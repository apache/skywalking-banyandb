<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="1014" onload="init(evt)" viewBox="0 0 1200 1014" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="997"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="997"> </text>
<g id="frames">
<g>
<title>all (2,185 samples, 100.00%)</title><rect x="10.0" y="963.0" width="1180.0" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="13.0" y="974.0">all</text>
</g>
<g>
<title>internal_catch_exc_subsystem (35 samples, 1.60%)</title><rect x="10.0" y="947.0" width="18.9" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="13.0" y="958.0"></text>
</g>
<g>
<title>__os_ch_md_redzone_cookie (35 samples, 1.60%)</title><rect x="10.0" y="931.0" width="18.9" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>thread_native_entry(Thread*) (35 samples, 1.60%)</title><rect x="10.0" y="915.0" width="18.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ConcurrentGCThread::run() (8 samples, 0.37%)</title><rect x="10.0" y="899.0" width="4.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::run_service() (8 samples, 0.37%)</title><rect x="10.0" y="883.0" width="4.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sample_young_list_rs_lengths() (6 samples, 0.27%)</title><rect x="10.0" y="867.0" width="3.2" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="13.0" y="878.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (6 samples, 0.27%)</title><rect x="10.0" y="851.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="862.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingClosure::do_heap_region(HeapRegion*) (6 samples, 0.27%)</title><rect x="10.0" y="835.0" width="3.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="13.0" y="846.0"></text>
</g>
<g>
<title>G1CollectionSet::update_young_region_prediction(HeapRegion*, unsigned long) (3 samples, 0.14%)</title><rect x="10.5" y="819.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="13.5" y="830.0"></text>
</g>
<g>
<title>G1Policy::predict_region_elapsed_time_ms(HeapRegion*, bool) const (3 samples, 0.14%)</title><rect x="10.5" y="803.0" width="1.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.5" y="814.0"></text>
</g>
<g>
<title>G1Policy::predict_bytes_to_copy(HeapRegion*) const (3 samples, 0.14%)</title><rect x="10.5" y="787.0" width="1.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="13.5" y="798.0"></text>
</g>
<g>
<title>G1Policy::predict_yg_surv_rate(int, SurvRateGroup*) const (2 samples, 0.09%)</title><rect x="11.1" y="771.0" width="1.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="14.1" y="782.0"></text>
</g>
<g>
<title>SurvRateGroup::get_seq(unsigned long) const (1 samples, 0.05%)</title><rect x="11.6" y="755.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="14.6" y="766.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.05%)</title><rect x="12.2" y="819.0" width="0.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="15.2" y="830.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="12.7" y="819.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="15.7" y="830.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="12.7" y="803.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="15.7" y="814.0"></text>
</g>
<g>
<title>Monitor::TryFast() (1 samples, 0.05%)</title><rect x="12.7" y="787.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="15.7" y="798.0"></text>
</g>
<g>
<title>G1YoungRemSetSamplingThread::sleep_before_next_cycle() (2 samples, 0.09%)</title><rect x="13.2" y="867.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="16.2" y="878.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (2 samples, 0.09%)</title><rect x="13.2" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="16.2" y="862.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (2 samples, 0.09%)</title><rect x="13.2" y="835.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="16.2" y="846.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (2 samples, 0.09%)</title><rect x="13.2" y="819.0" width="1.1" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="16.2" y="830.0"></text>
</g>
<g>
<title>__psynch_cvwait (2 samples, 0.09%)</title><rect x="13.2" y="803.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="16.2" y="814.0"></text>
</g>
<g>
<title>GangWorker::loop() (15 samples, 0.69%)</title><rect x="14.3" y="899.0" width="8.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.3" y="910.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (11 samples, 0.50%)</title><rect x="14.3" y="883.0" width="6.0" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="17.3" y="894.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (2 samples, 0.09%)</title><rect x="14.3" y="867.0" width="1.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="17.3" y="878.0"></text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.09%)</title><rect x="14.3" y="851.0" width="1.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="17.3" y="862.0"></text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (2 samples, 0.09%)</title><rect x="14.3" y="835.0" width="1.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="17.3" y="846.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_to_completed_buffer(CardTableEntryClosure*, unsigned int, unsigned long, bool) (2 samples, 0.09%)</title><rect x="14.3" y="819.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="17.3" y="830.0"></text>
</g>
<g>
<title>DirtyCardQueueSet::get_completed_buffer(unsigned long) (2 samples, 0.09%)</title><rect x="14.3" y="803.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="17.3" y="814.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (1 samples, 0.05%)</title><rect x="14.3" y="787.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="17.3" y="798.0"></text>
</g>
<g>
<title>Monitor::ILock(Thread*) (1 samples, 0.05%)</title><rect x="14.3" y="771.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.3" y="782.0"></text>
</g>
<g>
<title>os::PlatformEvent::park() (1 samples, 0.05%)</title><rect x="14.3" y="755.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="17.3" y="766.0"></text>
</g>
<g>
<title>__psynch_cvwait (1 samples, 0.05%)</title><rect x="14.3" y="739.0" width="0.6" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="17.3" y="750.0"></text>
</g>
<g>
<title>os::PlatformEvent::unpark() (1 samples, 0.05%)</title><rect x="14.9" y="787.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="17.9" y="798.0"></text>
</g>
<g>
<title>err_codes_iokit_usb (1 samples, 0.05%)</title><rect x="14.9" y="771.0" width="0.5" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="17.9" y="782.0"></text>
</g>
<g>
<title>__psynch_mutexwait (1 samples, 0.05%)</title><rect x="14.9" y="755.0" width="0.5" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="17.9" y="766.0"></text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 0.18%)</title><rect x="15.4" y="867.0" width="2.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.4" y="878.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (4 samples, 0.18%)</title><rect x="15.4" y="851.0" width="2.2" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.4" y="862.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (4 samples, 0.18%)</title><rect x="15.4" y="835.0" width="2.2" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.4" y="846.0"></text>
</g>
<g>
<title>G1EvacPhaseWithTrimTimeTracker::G1EvacPhaseWithTrimTimeTracker(G1ParScanThreadState*, TimeInterval&lt;CompositeCounterRepresentation, CompositeElapsedCounterSource&gt;&amp;, TimeInterval&lt;CompositeCounterRepresentation, CompositeElapsedCounterSource&gt;&amp;) (2 samples, 0.09%)</title><rect x="15.4" y="819.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="18.4" y="830.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (2 samples, 0.09%)</title><rect x="15.4" y="803.0" width="1.1" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="18.4" y="814.0"></text>
</g>
<g>
<title>os::elapsed_counter() (2 samples, 0.09%)</title><rect x="15.4" y="787.0" width="1.1" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="18.4" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (2 samples, 0.09%)</title><rect x="15.4" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="18.4" y="782.0"></text>
</g>
<g>
<title>G1EvacPhaseWithTrimTimeTracker::stop() (1 samples, 0.05%)</title><rect x="16.5" y="819.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="19.5" y="830.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (1 samples, 0.05%)</title><rect x="16.5" y="803.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="19.5" y="814.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.05%)</title><rect x="16.5" y="787.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="19.5" y="798.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="16.5" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="19.5" y="782.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::scan_rem_set_roots(HeapRegion*) (1 samples, 0.05%)</title><rect x="17.0" y="819.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.0" y="830.0"></text>
</g>
<g>
<title>HeapRegionRemSetIterator::has_next(unsigned long&amp;) (1 samples, 0.05%)</title><rect x="17.0" y="803.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="20.0" y="814.0"></text>
</g>
<g>
<title>RSHashTableIter::has_next(unsigned long&amp;) (1 samples, 0.05%)</title><rect x="17.0" y="787.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="20.0" y="798.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (4 samples, 0.18%)</title><rect x="17.6" y="867.0" width="2.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="20.6" y="878.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.05%)</title><rect x="17.6" y="851.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="20.6" y="862.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="17.6" y="835.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="20.6" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.05%)</title><rect x="17.6" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="20.6" y="830.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (1 samples, 0.05%)</title><rect x="17.6" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="20.6" y="814.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.05%)</title><rect x="17.6" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="20.6" y="798.0"></text>
</g>
<g>
<title>InterpreterOopMap::iterate_oop(OffsetClosure*) const (1 samples, 0.05%)</title><rect x="17.6" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="20.6" y="782.0"></text>
</g>
<g>
<title>InterpreterFrameClosure::offset_do(int) (1 samples, 0.05%)</title><rect x="17.6" y="755.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.6" y="766.0"></text>
</g>
<g>
<title>G1RootProcessor::process_string_table_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (2 samples, 0.09%)</title><rect x="18.1" y="851.0" width="1.1" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="21.1" y="862.0"></text>
</g>
<g>
<title>StringTable::possibly_parallel_oops_do(OopStorage::ParState&lt;false, false&gt;*, OopClosure*) (1 samples, 0.05%)</title><rect x="18.1" y="835.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="21.1" y="846.0"></text>
</g>
<g>
<title>void G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop_work&lt;oopDesc*&gt;(oopDesc**) (1 samples, 0.05%)</title><rect x="18.6" y="835.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="21.6" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::process_vm_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (1 samples, 0.05%)</title><rect x="19.2" y="851.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="22.2" y="862.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::G1GCParPhaseTimesTracker(G1GCPhaseTimes*, G1GCPhaseTimes::GCParPhases, unsigned int) (1 samples, 0.05%)</title><rect x="19.2" y="835.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="22.2" y="846.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::now() (1 samples, 0.05%)</title><rect x="19.2" y="819.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="22.2" y="830.0"></text>
</g>
<g>
<title>os::elapsed_counter() (1 samples, 0.05%)</title><rect x="19.2" y="803.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="22.2" y="814.0"></text>
</g>
<g>
<title>os::javaTimeNanos() (1 samples, 0.05%)</title><rect x="19.2" y="787.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="22.2" y="798.0"></text>
</g>
<g>
<title>mach_absolute_time (1 samples, 0.05%)</title><rect x="19.2" y="771.0" width="0.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="22.2" y="782.0"></text>
</g>
<g>
<title>os::elapsedTime() (1 samples, 0.05%)</title><rect x="19.7" y="867.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="22.7" y="878.0"></text>
</g>
<g>
<title>G1RedirtyLoggedCardsTask::work(unsigned int) (1 samples, 0.05%)</title><rect x="20.3" y="883.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="23.3" y="894.0"></text>
</g>
<g>
<title>G1GCParPhaseTimesTracker::~G1GCParPhaseTimesTracker() (1 samples, 0.05%)</title><rect x="20.3" y="867.0" width="0.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="23.3" y="878.0"></text>
</g>
<g>
<title>CompositeElapsedCounterSource::seconds(PairRep&lt;long, long&gt;) (1 samples, 0.05%)</title><rect x="20.3" y="851.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="23.3" y="862.0"></text>
</g>
<g>
<title>SemaphoreGangTaskDispatcher::worker_wait_for_task() (3 samples, 0.14%)</title><rect x="20.8" y="883.0" width="1.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="23.8" y="894.0"></text>
</g>
<g>
<title>semaphore_wait_trap (3 samples, 0.14%)</title><rect x="20.8" y="867.0" width="1.6" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="23.8" y="878.0"></text>
</g>
<g>
<title>JavaThread::run() (3 samples, 0.14%)</title><rect x="22.4" y="899.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="25.4" y="910.0"></text>
</g>
<g>
<title>JavaThread::thread_main_inner() (3 samples, 0.14%)</title><rect x="22.4" y="883.0" width="1.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="25.4" y="894.0"></text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (1 samples, 0.05%)</title><rect x="22.4" y="867.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="25.4" y="878.0"></text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (1 samples, 0.05%)</title><rect x="22.4" y="851.0" width="0.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="25.4" y="862.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (1 samples, 0.05%)</title><rect x="22.4" y="835.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="25.4" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (1 samples, 0.05%)</title><rect x="22.4" y="819.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="25.4" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (1 samples, 0.05%)</title><rect x="22.4" y="803.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="25.4" y="814.0"></text>
</g>
<g>
<title>Compilation::initialize() (1 samples, 0.05%)</title><rect x="22.4" y="787.0" width="0.6" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="25.4" y="798.0"></text>
</g>
<g>
<title>DebugInformationRecorder::DebugInformationRecorder(OopRecorder*) (1 samples, 0.05%)</title><rect x="22.4" y="771.0" width="0.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="25.4" y="782.0"></text>
</g>
<g>
<title>GrowableArray&lt;DIR_Chunk*&gt;::GrowableArray(int, bool, MemoryType) (1 samples, 0.05%)</title><rect x="22.4" y="755.0" width="0.6" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="25.4" y="766.0"></text>
</g>
<g>
<title>NMethodSweeper::sweeper_loop() (1 samples, 0.05%)</title><rect x="23.0" y="867.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="26.0" y="878.0"></text>
</g>
<g>
<title>NMethodSweeper::possibly_sweep() (1 samples, 0.05%)</title><rect x="23.0" y="851.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="26.0" y="862.0"></text>
</g>
<g>
<title>NMethodSweeper::sweep_code_cache() (1 samples, 0.05%)</title><rect x="23.0" y="835.0" width="0.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="26.0" y="846.0"></text>
</g>
<g>
<title>NMethodSweeper::process_compiled_method(CompiledMethod*) (1 samples, 0.05%)</title><rect x="23.0" y="819.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="26.0" y="830.0"></text>
</g>
<g>
<title>CompiledMethod::cleanup_inline_caches_impl(bool, bool, bool) (1 samples, 0.05%)</title><rect x="23.0" y="803.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="26.0" y="814.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (1 samples, 0.05%)</title><rect x="23.5" y="867.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="26.5" y="878.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (1 samples, 0.05%)</title><rect x="23.5" y="851.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="26.5" y="862.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_unload(_jmethodID*, void const*) (1 samples, 0.05%)</title><rect x="23.5" y="835.0" width="0.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="26.5" y="846.0"></text>
</g>
<g>
<title>Profiler::removeJavaMethod(void const*, _jmethodID*) (1 samples, 0.05%)</title><rect x="23.5" y="819.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="26.5" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (5 samples, 0.23%)</title><rect x="24.0" y="899.0" width="2.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="27.0" y="910.0"></text>
</g>
<g>
<title>VMThread::loop() (5 samples, 0.23%)</title><rect x="24.0" y="883.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="27.0" y="894.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) (5 samples, 0.23%)</title><rect x="24.0" y="867.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="27.0" y="878.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (5 samples, 0.23%)</title><rect x="24.0" y="851.0" width="2.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.0" y="862.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (5 samples, 0.23%)</title><rect x="24.0" y="835.0" width="2.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="27.0" y="846.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (5 samples, 0.23%)</title><rect x="24.0" y="819.0" width="2.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.0" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::pre_evacuate_collection_set() (2 samples, 0.09%)</title><rect x="24.0" y="803.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="27.0" y="814.0"></text>
</g>
<g>
<title>G1RemSetScanState::reset() (2 samples, 0.09%)</title><rect x="24.0" y="787.0" width="1.1" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="27.0" y="798.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (2 samples, 0.09%)</title><rect x="24.0" y="771.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="27.0" y="782.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ResetScanTopClosure::do_heap_region(HeapRegion*) (1 samples, 0.05%)</title><rect x="24.6" y="755.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="27.6" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::register_humongous_regions_with_cset() (1 samples, 0.05%)</title><rect x="25.1" y="803.0" width="0.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="28.1" y="814.0"></text>
</g>
<g>
<title>HeapRegionManager::iterate(HeapRegionClosure*) const (1 samples, 0.05%)</title><rect x="25.1" y="787.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="28.1" y="798.0"></text>
</g>
<g>
<title>RegisterHumongousWithInCSetFastTestClosure::do_heap_region(HeapRegion*) (1 samples, 0.05%)</title><rect x="25.1" y="771.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="28.1" y="782.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.05%)</title><rect x="25.1" y="755.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="28.1" y="766.0"></text>
</g>
<g>
<title>G1CollectedHeap::start_new_collection_set() (1 samples, 0.05%)</title><rect x="25.7" y="803.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="28.7" y="814.0"></text>
</g>
<g>
<title>G1ParScanThreadStateSet::G1ParScanThreadStateSet(G1CollectedHeap*, unsigned int, unsigned long) (1 samples, 0.05%)</title><rect x="26.2" y="803.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="29.2" y="814.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="26.2" y="787.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="29.2" y="798.0"></text>
</g>
<g>
<title>AllocateHeap(unsigned long, MemoryType, NativeCallStack const&amp;, AllocFailStrategy::AllocFailEnum) (1 samples, 0.05%)</title><rect x="26.2" y="771.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="29.2" y="782.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="26.2" y="755.0" width="0.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="29.2" y="766.0"></text>
</g>
<g>
<title>WatcherThread::run() (4 samples, 0.18%)</title><rect x="26.7" y="899.0" width="2.2" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="29.7" y="910.0"></text>
</g>
<g>
<title>WatcherThread::sleep() const (4 samples, 0.18%)</title><rect x="26.7" y="883.0" width="2.2" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="29.7" y="894.0"></text>
</g>
<g>
<title>Monitor::wait(bool, long, bool) (4 samples, 0.18%)</title><rect x="26.7" y="867.0" width="2.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="29.7" y="878.0"></text>
</g>
<g>
<title>Monitor::IWait(Thread*, long) (4 samples, 0.18%)</title><rect x="26.7" y="851.0" width="2.2" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="29.7" y="862.0"></text>
</g>
<g>
<title>os::PlatformEvent::park(long) (4 samples, 0.18%)</title><rect x="26.7" y="835.0" width="2.2" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="29.7" y="846.0"></text>
</g>
<g>
<title>__psynch_cvwait (4 samples, 0.18%)</title><rect x="26.7" y="819.0" width="2.2" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="29.7" y="830.0"></text>
</g>
<g>
<title>java/lang/Thread.run (3 samples, 0.14%)</title><rect x="28.9" y="947.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.9" y="958.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/FastThreadLocalRunnable.run (1 samples, 0.05%)</title><rect x="28.9" y="931.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.9" y="942.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/internal/ThreadExecutorMap$2.run (1 samples, 0.05%)</title><rect x="28.9" y="915.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.9" y="926.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/util/concurrent/SingleThreadEventExecutor$4.run (1 samples, 0.05%)</title><rect x="28.9" y="899.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="31.9" y="910.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.run (1 samples, 0.05%)</title><rect x="28.9" y="883.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.9" y="894.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKeys (1 samples, 0.05%)</title><rect x="28.9" y="867.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.9" y="878.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKeysOptimized (1 samples, 0.05%)</title><rect x="28.9" y="851.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.9" y="862.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/NioEventLoop.processSelectedKey (1 samples, 0.05%)</title><rect x="28.9" y="835.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="31.9" y="846.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/AbstractNioByteChannel$NioByteUnsafe.read (1 samples, 0.05%)</title><rect x="28.9" y="819.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.9" y="830.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline.fireChannelRead (1 samples, 0.05%)</title><rect x="28.9" y="803.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.9" y="814.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.05%)</title><rect x="28.9" y="787.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="31.9" y="798.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.05%)</title><rect x="28.9" y="771.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="31.9" y="782.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline$HeadContext.channelRead (1 samples, 0.05%)</title><rect x="28.9" y="755.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.9" y="766.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.fireChannelRead (1 samples, 0.05%)</title><rect x="28.9" y="739.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.9" y="750.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.05%)</title><rect x="28.9" y="723.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="734.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeChannelRead (1 samples, 0.05%)</title><rect x="28.9" y="707.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="31.9" y="718.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/TelnetChannelHandler.channelRead (1 samples, 0.05%)</title><rect x="28.9" y="691.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.9" y="702.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.receive (1 samples, 0.05%)</title><rect x="28.9" y="675.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.9" y="686.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushDataIfNecessary (1 samples, 0.05%)</title><rect x="28.9" y="659.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.9" y="670.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.flushData (1 samples, 0.05%)</title><rect x="28.9" y="643.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="654.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection.onData (1 samples, 0.05%)</title><rect x="28.9" y="627.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.9" y="638.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (1 samples, 0.05%)</title><rect x="28.9" y="611.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="31.9" y="622.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryDecoder.write (1 samples, 0.05%)</title><rect x="28.9" y="595.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="31.9" y="606.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (1 samples, 0.05%)</title><rect x="28.9" y="579.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.9" y="590.0"></text>
</g>
<g>
<title>io/termd/core/tty/ReadBuffer.accept (1 samples, 0.05%)</title><rect x="28.9" y="563.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.9" y="574.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (1 samples, 0.05%)</title><rect x="28.9" y="547.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="558.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyEventDecoder.accept (1 samples, 0.05%)</title><rect x="28.9" y="531.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="31.9" y="542.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (1 samples, 0.05%)</title><rect x="28.9" y="515.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.9" y="526.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction$2.accept (1 samples, 0.05%)</title><rect x="28.9" y="499.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="510.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.access$500 (1 samples, 0.05%)</title><rect x="28.9" y="483.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="31.9" y="494.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline.deliver (1 samples, 0.05%)</title><rect x="28.9" y="467.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.9" y="478.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.access$200 (1 samples, 0.05%)</title><rect x="28.9" y="451.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.9" y="462.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.handle (1 samples, 0.05%)</title><rect x="28.9" y="435.0" width="0.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="31.9" y="446.0"></text>
</g>
<g>
<title>io/termd/core/readline/functions/BackwardDeleteChar.apply (1 samples, 0.05%)</title><rect x="28.9" y="419.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.9" y="430.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.refresh (1 samples, 0.05%)</title><rect x="28.9" y="403.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.9" y="414.0"></text>
</g>
<g>
<title>io/termd/core/readline/Readline$Interaction.refresh (1 samples, 0.05%)</title><rect x="28.9" y="387.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="31.9" y="398.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (1 samples, 0.05%)</title><rect x="28.9" y="371.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="31.9" y="382.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.accept (1 samples, 0.05%)</title><rect x="28.9" y="355.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.9" y="366.0"></text>
</g>
<g>
<title>io/termd/core/tty/TtyOutputMode.sendChunk (1 samples, 0.05%)</title><rect x="28.9" y="339.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.9" y="350.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (1 samples, 0.05%)</title><rect x="28.9" y="323.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.9" y="334.0"></text>
</g>
<g>
<title>io/termd/core/io/BinaryEncoder.accept (1 samples, 0.05%)</title><rect x="28.9" y="307.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="31.9" y="318.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection$2.accept (1 samples, 0.05%)</title><rect x="28.9" y="291.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.9" y="302.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetTtyConnection$2.accept (1 samples, 0.05%)</title><rect x="28.9" y="275.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="31.9" y="286.0"></text>
</g>
<g>
<title>io/termd/core/telnet/TelnetConnection.write (1 samples, 0.05%)</title><rect x="28.9" y="259.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="31.9" y="270.0"></text>
</g>
<g>
<title>io/termd/core/telnet/netty/NettyTelnetConnection.send (1 samples, 0.05%)</title><rect x="28.9" y="243.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="31.9" y="254.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (1 samples, 0.05%)</title><rect x="28.9" y="227.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="31.9" y="238.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.writeAndFlush (1 samples, 0.05%)</title><rect x="28.9" y="211.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="31.9" y="222.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.write (1 samples, 0.05%)</title><rect x="28.9" y="195.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.9" y="206.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeWriteAndFlush (1 samples, 0.05%)</title><rect x="28.9" y="179.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.9" y="190.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannelHandlerContext.invokeFlush0 (1 samples, 0.05%)</title><rect x="28.9" y="163.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="174.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/DefaultChannelPipeline$HeadContext.flush (1 samples, 0.05%)</title><rect x="28.9" y="147.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.9" y="158.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannel$AbstractUnsafe.flush (1 samples, 0.05%)</title><rect x="28.9" y="131.0" width="0.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="31.9" y="142.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/AbstractNioChannel$AbstractNioUnsafe.flush0 (1 samples, 0.05%)</title><rect x="28.9" y="115.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="31.9" y="126.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/AbstractChannel$AbstractUnsafe.flush0 (1 samples, 0.05%)</title><rect x="28.9" y="99.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="31.9" y="110.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/socket/nio/NioSocketChannel.doWrite (1 samples, 0.05%)</title><rect x="28.9" y="83.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.9" y="94.0"></text>
</g>
<g>
<title>com/alibaba/arthas/deps/io/netty/channel/nio/AbstractNioByteChannel.clearOpWrite (1 samples, 0.05%)</title><rect x="28.9" y="67.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="31.9" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.interestOps (1 samples, 0.05%)</title><rect x="28.9" y="51.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.9" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/SelectionKeyImpl.ensureValid (1 samples, 0.05%)</title><rect x="28.9" y="35.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="31.9" y="46.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2 samples, 0.09%)</title><rect x="29.4" y="931.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.4" y="942.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2 samples, 0.09%)</title><rect x="29.4" y="915.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="32.4" y="926.0"></text>
</g>
<g>
<title>java/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask.run (2 samples, 0.09%)</title><rect x="29.4" y="899.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="32.4" y="910.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2 samples, 0.09%)</title><rect x="29.4" y="883.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (2 samples, 0.09%)</title><rect x="29.4" y="867.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="32.4" y="878.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessTask.run (2 samples, 0.09%)</title><rect x="29.4" y="851.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="32.4" y="862.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl$ProcessHandler.handle (2 samples, 0.09%)</title><rect x="29.4" y="835.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="32.4" y="846.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl$ProcessHandler.handle (2 samples, 0.09%)</title><rect x="29.4" y="819.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.4" y="830.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.access$100 (2 samples, 0.09%)</title><rect x="29.4" y="803.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="32.4" y="814.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/command/impl/AnnotatedCommandImpl.process (2 samples, 0.09%)</title><rect x="29.4" y="787.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="32.4" y="798.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.process (2 samples, 0.09%)</title><rect x="29.4" y="771.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="32.4" y="782.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/command/monitor200/ProfilerCommand.execute (1 samples, 0.05%)</title><rect x="29.4" y="755.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="32.4" y="766.0"></text>
</g>
<g>
<title>one/profiler/AsyncProfiler.execute (1 samples, 0.05%)</title><rect x="29.4" y="739.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="32.4" y="750.0"></text>
</g>
<g>
<title>one/profiler/AsyncProfiler.execute0 (1 samples, 0.05%)</title><rect x="29.4" y="723.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="32.4" y="734.0"></text>
</g>
<g>
<title>Java_one_profiler_AsyncProfiler_execute0 (1 samples, 0.05%)</title><rect x="29.4" y="707.0" width="0.6" height="15" fill="#ef6c6c" rx="2" ry="2"/>
<text x="32.4" y="718.0"></text>
</g>
<g>
<title>Profiler::runInternal(Arguments&amp;, std::__1::basic_ostream&lt;char, std::__1::char_traits&lt;char&gt; &gt;&amp;) (1 samples, 0.05%)</title><rect x="29.4" y="691.0" width="0.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="32.4" y="702.0"></text>
</g>
<g>
<title>Profiler::start(Arguments&amp;, bool) (1 samples, 0.05%)</title><rect x="29.4" y="675.0" width="0.6" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="32.4" y="686.0"></text>
</g>
<g>
<title>Profiler::bindNativeLibraryLoad(JNIEnv_*, bool) (1 samples, 0.05%)</title><rect x="29.4" y="659.0" width="0.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="32.4" y="670.0"></text>
</g>
<g>
<title>__pthread_mutex_ulock_adaptive_spin (1 samples, 0.05%)</title><rect x="29.4" y="643.0" width="0.6" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="32.4" y="654.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="29.4" y="627.0" width="0.6" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="32.4" y="638.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="29.4" y="611.0" width="0.6" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="32.4" y="622.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="29.4" y="595.0" width="0.6" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="32.4" y="606.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.05%)</title><rect x="29.4" y="579.0" width="0.6" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="32.4" y="590.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessImpl.end (1 samples, 0.05%)</title><rect x="30.0" y="755.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="33.0" y="766.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessImpl.end (1 samples, 0.05%)</title><rect x="30.0" y="739.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="33.0" y="750.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl$CommandProcessImpl.end (1 samples, 0.05%)</title><rect x="30.0" y="723.0" width="0.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.0" y="734.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl.access$2000 (1 samples, 0.05%)</title><rect x="30.0" y="707.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="33.0" y="718.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl.terminate (1 samples, 0.05%)</title><rect x="30.0" y="691.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="33.0" y="702.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/ProcessImpl.updateStatus (1 samples, 0.05%)</title><rect x="30.0" y="675.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="33.0" y="686.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/JobImpl$TerminatedHandler.handle (1 samples, 0.05%)</title><rect x="30.0" y="659.0" width="0.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="33.0" y="670.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/system/impl/JobImpl$TerminatedHandler.handle (1 samples, 0.05%)</title><rect x="30.0" y="643.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="33.0" y="654.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/shell/impl/ShellImpl$ShellJobHandler.onTerminated (1 samples, 0.05%)</title><rect x="30.0" y="627.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="33.0" y="638.0"></text>
</g>
<g>
<title>com/taobao/arthas/core/util/FileUtils.saveCommandHistory (1 samples, 0.05%)</title><rect x="30.0" y="611.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="33.0" y="622.0"></text>
</g>
<g>
<title>jdk/internal/misc/InnocuousThread.run (1 samples, 0.05%)</title><rect x="30.5" y="947.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="33.5" y="958.0"></text>
</g>
<g>
<title>java/lang/Thread.run (1 samples, 0.05%)</title><rect x="30.5" y="931.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="33.5" y="942.0"></text>
</g>
<g>
<title>sun/net/www/http/KeepAliveCache.run (1 samples, 0.05%)</title><rect x="30.5" y="915.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.5" y="926.0"></text>
</g>
<g>
<title>sun/net/www/http/HttpClient.closeServer (1 samples, 0.05%)</title><rect x="30.5" y="899.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="33.5" y="910.0"></text>
</g>
<g>
<title>sun/security/ssl/SSLSocketImpl.close (1 samples, 0.05%)</title><rect x="30.5" y="883.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.5" y="894.0"></text>
</g>
<g>
<title>sun/security/ssl/SSLSocketImpl.duplexCloseOutput (1 samples, 0.05%)</title><rect x="30.5" y="867.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="33.5" y="878.0"></text>
</g>
<g>
<title>sun/security/ssl/ProtocolVersion.useTLS13PlusSpec (1 samples, 0.05%)</title><rect x="30.5" y="851.0" width="0.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="33.5" y="862.0"></text>
</g>
<g>
<title>org/apache/skywalking/banyandb/benchmark/WriteEntitySerializationTest.main (2,146 samples, 98.22%)</title><rect x="31.1" y="947.0" width="1158.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="34.1" y="958.0">org/apache/skywalking/banyandb/benchmark/WriteEntitySerializationTest.main</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (5 samples, 0.23%)</title><rect x="31.1" y="931.0" width="2.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="34.1" y="942.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (5 samples, 0.23%)</title><rect x="31.1" y="915.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="34.1" y="926.0"></text>
</g>
<g>
<title>org/apache/skywalking/banyandb/benchmark/WriteEntitySerializationTest.flatbuffers (2,141 samples, 97.99%)</title><rect x="33.8" y="931.0" width="1156.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="36.8" y="942.0">org/apache/skywalking/banyandb/benchmark/WriteEntitySerializationTest.flatbuffers</text>
</g>
<g>
<title>banyandb/v1/EntityValue.createEntityValue (97 samples, 4.44%)</title><rect x="59.7" y="915.0" width="52.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="62.7" y="926.0">banya..</text>
</g>
<g>
<title>banyandb/v1/EntityValue.addDataBinary (6 samples, 0.27%)</title><rect x="59.7" y="899.0" width="3.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="62.7" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (6 samples, 0.27%)</title><rect x="59.7" y="883.0" width="3.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="62.7" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (6 samples, 0.27%)</title><rect x="59.7" y="867.0" width="3.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="62.7" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (3 samples, 0.14%)</title><rect x="61.3" y="851.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="64.3" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (1 samples, 0.05%)</title><rect x="61.3" y="835.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="64.3" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (2 samples, 0.09%)</title><rect x="61.8" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="64.8" y="846.0"></text>
</g>
<g>
<title>banyandb/v1/EntityValue.addEntityId (5 samples, 0.23%)</title><rect x="62.9" y="899.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="65.9" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (5 samples, 0.23%)</title><rect x="62.9" y="883.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.9" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (5 samples, 0.23%)</title><rect x="62.9" y="867.0" width="2.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="65.9" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (1 samples, 0.05%)</title><rect x="65.1" y="851.0" width="0.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="68.1" y="862.0"></text>
</g>
<g>
<title>banyandb/v1/EntityValue.addFields (4 samples, 0.18%)</title><rect x="65.6" y="899.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="68.6" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (4 samples, 0.18%)</title><rect x="65.6" y="883.0" width="2.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="68.6" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (4 samples, 0.18%)</title><rect x="65.6" y="867.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.6" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (2 samples, 0.09%)</title><rect x="66.7" y="851.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="69.7" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (2 samples, 0.09%)</title><rect x="66.7" y="835.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="69.7" y="846.0"></text>
</g>
<g>
<title>banyandb/v1/EntityValue.addTimestampNanoseconds (31 samples, 1.42%)</title><rect x="67.8" y="899.0" width="16.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="70.8" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addLong (31 samples, 1.42%)</title><rect x="67.8" y="883.0" width="16.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="70.8" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addLong (31 samples, 1.42%)</title><rect x="67.8" y="867.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="70.8" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (4 samples, 0.18%)</title><rect x="82.4" y="851.0" width="2.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="85.4" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (1 samples, 0.05%)</title><rect x="84.0" y="835.0" width="0.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="87.0" y="846.0"></text>
</g>
<g>
<title>banyandb/v1/EntityValue.endEntityValue (51 samples, 2.33%)</title><rect x="84.5" y="899.0" width="27.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="87.5" y="910.0">b..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (48 samples, 2.20%)</title><rect x="86.1" y="883.0" width="26.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="89.1" y="894.0">c..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addInt (1 samples, 0.05%)</title><rect x="93.7" y="867.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="96.7" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addShort (32 samples, 1.46%)</title><rect x="94.2" y="867.0" width="17.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="97.2" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (10 samples, 0.46%)</title><rect x="106.1" y="851.0" width="5.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="109.1" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (7 samples, 0.32%)</title><rect x="107.7" y="835.0" width="3.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.7" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (1 samples, 0.05%)</title><rect x="111.5" y="867.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="114.5" y="878.0"></text>
</g>
<g>
<title>banyandb/v1/EntityValue.createFieldsVector (34 samples, 1.56%)</title><rect x="112.1" y="915.0" width="18.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="115.1" y="926.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (26 samples, 1.19%)</title><rect x="112.1" y="899.0" width="14.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="115.1" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (18 samples, 0.82%)</title><rect x="116.4" y="883.0" width="9.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="119.4" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (1 samples, 0.05%)</title><rect x="116.4" y="867.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="119.4" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (17 samples, 0.78%)</title><rect x="116.9" y="867.0" width="9.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="119.9" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.startVector (8 samples, 0.37%)</title><rect x="126.1" y="899.0" width="4.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="129.1" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (4 samples, 0.18%)</title><rect x="128.3" y="883.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="131.3" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (4 samples, 0.18%)</title><rect x="128.3" y="867.0" width="2.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="131.3" y="878.0"></text>
</g>
<g>
<title>banyandb/v1/Metadata.createMetadata (77 samples, 3.52%)</title><rect x="130.4" y="915.0" width="41.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.4" y="926.0">ban..</text>
</g>
<g>
<title>banyandb/v1/Metadata.addGroup (5 samples, 0.23%)</title><rect x="130.4" y="899.0" width="2.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="133.4" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (5 samples, 0.23%)</title><rect x="130.4" y="883.0" width="2.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="133.4" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (5 samples, 0.23%)</title><rect x="130.4" y="867.0" width="2.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="133.4" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (3 samples, 0.14%)</title><rect x="131.5" y="851.0" width="1.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="134.5" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (3 samples, 0.14%)</title><rect x="131.5" y="835.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="134.5" y="846.0"></text>
</g>
<g>
<title>banyandb/v1/Metadata.addName (14 samples, 0.64%)</title><rect x="133.1" y="899.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.1" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (14 samples, 0.64%)</title><rect x="133.1" y="883.0" width="7.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="136.1" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (14 samples, 0.64%)</title><rect x="133.1" y="867.0" width="7.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="136.1" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (4 samples, 0.18%)</title><rect x="138.0" y="851.0" width="2.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="141.0" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (4 samples, 0.18%)</title><rect x="138.0" y="835.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="141.0" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.encodeUtf8Array (1 samples, 0.05%)</title><rect x="140.2" y="851.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="143.2" y="862.0"></text>
</g>
<g>
<title>banyandb/v1/Metadata.endMetadata (58 samples, 2.65%)</title><rect x="140.7" y="899.0" width="31.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="143.7" y="910.0">ba..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (54 samples, 2.47%)</title><rect x="142.9" y="883.0" width="29.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="145.9" y="894.0">co..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addShort (48 samples, 2.20%)</title><rect x="146.1" y="867.0" width="25.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="149.1" y="878.0">c..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (34 samples, 1.56%)</title><rect x="153.7" y="851.0" width="18.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="156.7" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (30 samples, 1.37%)</title><rect x="153.7" y="835.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="156.7" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder$HeapByteBufferFactory.newByteBuffer (13 samples, 0.59%)</title><rect x="158.0" y="819.0" width="7.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="161.0" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (10 samples, 0.46%)</title><rect x="159.1" y="803.0" width="5.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="162.1" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (10 samples, 0.46%)</title><rect x="159.1" y="787.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="162.1" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (10 samples, 0.46%)</title><rect x="159.1" y="771.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="162.1" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (10 samples, 0.46%)</title><rect x="159.1" y="755.0" width="5.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="162.1" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.46%)</title><rect x="159.1" y="739.0" width="5.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="162.1" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (10 samples, 0.46%)</title><rect x="159.1" y="723.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="162.1" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.order (1 samples, 0.05%)</title><rect x="164.5" y="803.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="167.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.09%)</title><rect x="165.0" y="819.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="168.0" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (7 samples, 0.32%)</title><rect x="166.1" y="819.0" width="3.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="169.1" y="830.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.05%)</title><rect x="168.2" y="803.0" width="0.6" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="171.2" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.09%)</title><rect x="168.8" y="803.0" width="1.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="171.8" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (3 samples, 0.14%)</title><rect x="169.9" y="835.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="172.9" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.05%)</title><rect x="171.5" y="835.0" width="0.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="174.5" y="846.0"></text>
</g>
<g>
<title>banyandb/v1/WriteEntity.createWriteEntity (50 samples, 2.29%)</title><rect x="172.0" y="915.0" width="27.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="175.0" y="926.0">b..</text>
</g>
<g>
<title>banyandb/v1/WriteEntity.addEntity (5 samples, 0.23%)</title><rect x="172.0" y="899.0" width="2.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="175.0" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (5 samples, 0.23%)</title><rect x="172.0" y="883.0" width="2.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.0" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (5 samples, 0.23%)</title><rect x="172.0" y="867.0" width="2.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="175.0" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (1 samples, 0.05%)</title><rect x="173.6" y="851.0" width="0.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.6" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (1 samples, 0.05%)</title><rect x="174.2" y="851.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.2" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (1 samples, 0.05%)</title><rect x="174.2" y="835.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.2" y="846.0"></text>
</g>
<g>
<title>banyandb/v1/WriteEntity.addMetaData (4 samples, 0.18%)</title><rect x="174.7" y="899.0" width="2.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="177.7" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (4 samples, 0.18%)</title><rect x="174.7" y="883.0" width="2.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="177.7" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (4 samples, 0.18%)</title><rect x="174.7" y="867.0" width="2.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="177.7" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (2 samples, 0.09%)</title><rect x="175.8" y="851.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="178.8" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (2 samples, 0.09%)</title><rect x="175.8" y="835.0" width="1.1" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="178.8" y="846.0"></text>
</g>
<g>
<title>banyandb/v1/WriteEntity.endWriteEntity (41 samples, 1.88%)</title><rect x="176.9" y="899.0" width="22.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="179.9" y="910.0">b..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (38 samples, 1.74%)</title><rect x="178.0" y="883.0" width="20.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="181.0" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addInt (1 samples, 0.05%)</title><rect x="185.0" y="867.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="188.0" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (1 samples, 0.05%)</title><rect x="185.0" y="851.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="188.0" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (1 samples, 0.05%)</title><rect x="185.0" y="835.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="188.0" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addShort (23 samples, 1.05%)</title><rect x="185.5" y="867.0" width="12.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="188.5" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (8 samples, 0.37%)</title><rect x="193.6" y="851.0" width="4.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="196.6" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (7 samples, 0.32%)</title><rect x="194.2" y="835.0" width="3.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="197.2" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (1 samples, 0.05%)</title><rect x="197.9" y="867.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.9" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (1 samples, 0.05%)</title><rect x="198.5" y="883.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="201.5" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.createByteVector (15 samples, 0.69%)</title><rect x="199.0" y="915.0" width="8.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="202.0" y="926.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.startVector (15 samples, 0.69%)</title><rect x="199.0" y="899.0" width="8.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="202.0" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (8 samples, 0.37%)</title><rect x="202.8" y="883.0" width="4.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="205.8" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (8 samples, 0.37%)</title><rect x="202.8" y="867.0" width="4.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="205.8" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.createString (239 samples, 10.94%)</title><rect x="207.1" y="915.0" width="129.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="210.1" y="926.0">com/google/flatb..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addByte (8 samples, 0.37%)</title><rect x="207.1" y="899.0" width="4.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="210.1" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (4 samples, 0.18%)</title><rect x="209.3" y="883.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="212.3" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (4 samples, 0.18%)</title><rect x="209.3" y="867.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="212.3" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.startVector (175 samples, 8.01%)</title><rect x="211.4" y="899.0" width="94.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="214.4" y="910.0">com/google/..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (160 samples, 7.32%)</title><rect x="219.5" y="883.0" width="86.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.5" y="894.0">com/google..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (133 samples, 6.09%)</title><rect x="223.3" y="867.0" width="71.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="226.3" y="878.0">com/goog..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder$HeapByteBufferFactory.newByteBuffer (68 samples, 3.11%)</title><rect x="229.8" y="851.0" width="36.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="232.8" y="862.0">com..</text>
</g>
<g>
<title>java/nio/Buffer.limit (7 samples, 0.32%)</title><rect x="236.3" y="835.0" width="3.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="239.3" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (48 samples, 2.20%)</title><rect x="240.1" y="835.0" width="25.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="243.1" y="846.0">j..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (47 samples, 2.15%)</title><rect x="240.6" y="819.0" width="25.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="243.6" y="830.0">j..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.14%)</title><rect x="240.6" y="803.0" width="1.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="243.6" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.14%)</title><rect x="240.6" y="787.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="243.6" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.14%)</title><rect x="240.6" y="771.0" width="1.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="243.6" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.14%)</title><rect x="240.6" y="755.0" width="1.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="243.6" y="766.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (3 samples, 0.14%)</title><rect x="240.6" y="739.0" width="1.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="243.6" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.14%)</title><rect x="240.6" y="723.0" width="1.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="243.6" y="734.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.05%)</title><rect x="240.6" y="707.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="243.6" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation(unsigned long, unsigned long, unsigned long*) (2 samples, 0.09%)</title><rect x="241.1" y="707.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="244.1" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.09%)</title><rect x="241.1" y="691.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="244.1" y="702.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.05%)</title><rect x="241.1" y="675.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="244.1" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.05%)</title><rect x="241.1" y="659.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="244.1" y="670.0"></text>
</g>
<g>
<title>HeapRegion::set_eden() (1 samples, 0.05%)</title><rect x="241.1" y="643.0" width="0.6" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="244.1" y="654.0"></text>
</g>
<g>
<title>HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type) (1 samples, 0.05%)</title><rect x="241.1" y="627.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="244.1" y="638.0"></text>
</g>
<g>
<title>MutatorAllocRegion::retire(bool) (1 samples, 0.05%)</title><rect x="241.7" y="675.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="244.7" y="686.0"></text>
</g>
<g>
<title>G1AllocRegion::retire_internal(HeapRegion*, bool) (1 samples, 0.05%)</title><rect x="241.7" y="659.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="244.7" y="670.0"></text>
</g>
<g>
<title>G1CollectedHeap::retire_mutator_alloc_region(HeapRegion*, unsigned long) (1 samples, 0.05%)</title><rect x="241.7" y="643.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="244.7" y="654.0"></text>
</g>
<g>
<title>G1CollectionSet::add_young_region_common(HeapRegion*) (1 samples, 0.05%)</title><rect x="241.7" y="627.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="244.7" y="638.0"></text>
</g>
<g>
<title>Monitor::IUnlock(bool) (1 samples, 0.05%)</title><rect x="241.7" y="611.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="244.7" y="622.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (44 samples, 2.01%)</title><rect x="242.2" y="803.0" width="23.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="245.2" y="814.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (44 samples, 2.01%)</title><rect x="242.2" y="787.0" width="23.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.2" y="798.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (44 samples, 2.01%)</title><rect x="242.2" y="771.0" width="23.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="245.2" y="782.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (44 samples, 2.01%)</title><rect x="242.2" y="755.0" width="23.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="245.2" y="766.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.limit (4 samples, 0.18%)</title><rect x="261.7" y="739.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="264.7" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (4 samples, 0.18%)</title><rect x="263.8" y="739.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="266.8" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.order (1 samples, 0.05%)</title><rect x="266.0" y="835.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="269.0" y="846.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.clear (5 samples, 0.23%)</title><rect x="266.5" y="851.0" width="2.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="269.5" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.order (4 samples, 0.18%)</title><rect x="269.2" y="851.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="272.2" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (7 samples, 0.32%)</title><rect x="271.4" y="851.0" width="3.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="274.4" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (37 samples, 1.69%)</title><rect x="275.2" y="851.0" width="19.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="278.2" y="862.0"></text>
</g>
<g>
<title>jbyte_arraycopy (4 samples, 0.18%)</title><rect x="284.9" y="835.0" width="2.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="287.9" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (15 samples, 0.69%)</title><rect x="287.0" y="835.0" width="8.1" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="290.0" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (19 samples, 0.87%)</title><rect x="295.1" y="867.0" width="10.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="298.1" y="878.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.05%)</title><rect x="305.4" y="867.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="308.4" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.encodeUtf8 (22 samples, 1.01%)</title><rect x="305.9" y="899.0" width="11.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="308.9" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.encodeUtf8Array (16 samples, 0.73%)</title><rect x="309.2" y="883.0" width="8.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="312.2" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.encodedLength (34 samples, 1.56%)</title><rect x="317.8" y="899.0" width="18.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="320.8" y="910.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.computeEncodedLength (34 samples, 1.56%)</title><rect x="317.8" y="883.0" width="18.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="320.8" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.encodeUtf8Array (2 samples, 0.09%)</title><rect x="335.1" y="867.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="338.1" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (5 samples, 0.23%)</title><rect x="336.2" y="915.0" width="2.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="339.2" y="926.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.finish (86 samples, 3.94%)</title><rect x="338.9" y="915.0" width="46.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="341.9" y="926.0">com/..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.finish (86 samples, 3.94%)</title><rect x="338.9" y="899.0" width="46.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="341.9" y="910.0">com/..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (3 samples, 0.14%)</title><rect x="339.4" y="883.0" width="1.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="342.4" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (2 samples, 0.09%)</title><rect x="340.0" y="867.0" width="1.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="343.0" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (2 samples, 0.09%)</title><rect x="340.0" y="851.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="343.0" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (2 samples, 0.09%)</title><rect x="341.0" y="883.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="344.0" y="894.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (80 samples, 3.66%)</title><rect x="342.1" y="883.0" width="43.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="345.1" y="894.0">com/..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (66 samples, 3.02%)</title><rect x="342.1" y="867.0" width="35.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="345.1" y="878.0">com..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder$HeapByteBufferFactory.newByteBuffer (37 samples, 1.69%)</title><rect x="347.0" y="851.0" width="20.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="350.0" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (23 samples, 1.05%)</title><rect x="354.5" y="835.0" width="12.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="357.5" y="846.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (23 samples, 1.05%)</title><rect x="354.5" y="819.0" width="12.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="357.5" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (1 samples, 0.05%)</title><rect x="354.5" y="803.0" width="0.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="357.5" y="814.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (1 samples, 0.05%)</title><rect x="354.5" y="787.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="357.5" y="798.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (1 samples, 0.05%)</title><rect x="354.5" y="771.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="357.5" y="782.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.05%)</title><rect x="354.5" y="755.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="357.5" y="766.0"></text>
</g>
<g>
<title>MemAllocator::mem_allocate(MemAllocator::Allocation&amp;) const (1 samples, 0.05%)</title><rect x="354.5" y="739.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="357.5" y="750.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.05%)</title><rect x="354.5" y="723.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="357.5" y="734.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (22 samples, 1.01%)</title><rect x="355.1" y="803.0" width="11.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="358.1" y="814.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (22 samples, 1.01%)</title><rect x="355.1" y="787.0" width="11.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="358.1" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (22 samples, 1.01%)</title><rect x="355.1" y="771.0" width="11.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="358.1" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (22 samples, 1.01%)</title><rect x="355.1" y="755.0" width="11.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="358.1" y="766.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="365.4" y="739.0" width="0.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="368.4" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.09%)</title><rect x="365.9" y="739.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="368.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.clear (3 samples, 0.14%)</title><rect x="367.0" y="851.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="370.0" y="862.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.order (1 samples, 0.05%)</title><rect x="368.6" y="851.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="371.6" y="862.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (16 samples, 0.73%)</title><rect x="369.1" y="851.0" width="8.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="372.1" y="862.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.05%)</title><rect x="370.8" y="835.0" width="0.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="373.8" y="846.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (12 samples, 0.55%)</title><rect x="371.3" y="835.0" width="6.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="374.3" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (14 samples, 0.64%)</title><rect x="377.8" y="867.0" width="7.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="380.8" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (1 samples, 0.05%)</title><rect x="385.3" y="915.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="388.3" y="926.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.05%)</title><rect x="385.9" y="915.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="388.9" y="926.0"></text>
</g>
<g>
<title>org/apache/skywalking/banyandb/benchmark/WriteEntitySerializationTest.buildField (1,488 samples, 68.10%)</title><rect x="386.4" y="915.0" width="803.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="389.4" y="926.0">org/apache/skywalking/banyandb/benchmark/WriteEntitySerializationTest.buildField</text>
</g>
<g>
<title>banyandb/v1/Field.addValue (153 samples, 7.00%)</title><rect x="386.4" y="899.0" width="82.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="389.4" y="910.0">banyandb/..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (153 samples, 7.00%)</title><rect x="386.4" y="883.0" width="82.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="389.4" y="894.0">com/googl..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (153 samples, 7.00%)</title><rect x="386.4" y="867.0" width="82.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="389.4" y="878.0">com/googl..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (121 samples, 5.54%)</title><rect x="403.7" y="851.0" width="65.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="406.7" y="862.0">com/goo..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (49 samples, 2.24%)</title><rect x="408.6" y="835.0" width="26.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="411.6" y="846.0">c..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder$HeapByteBufferFactory.newByteBuffer (29 samples, 1.33%)</title><rect x="413.4" y="819.0" width="15.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="416.4" y="830.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="416.7" y="803.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="419.7" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (21 samples, 0.96%)</title><rect x="417.2" y="803.0" width="11.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="420.2" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (21 samples, 0.96%)</title><rect x="417.2" y="787.0" width="11.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="420.2" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (21 samples, 0.96%)</title><rect x="417.2" y="771.0" width="11.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="420.2" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (21 samples, 0.96%)</title><rect x="417.2" y="755.0" width="11.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="420.2" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (21 samples, 0.96%)</title><rect x="417.2" y="739.0" width="11.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="420.2" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (21 samples, 0.96%)</title><rect x="417.2" y="723.0" width="11.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="420.2" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.14%)</title><rect x="426.4" y="707.0" width="1.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="429.4" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="428.0" y="707.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="431.0" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.order (1 samples, 0.05%)</title><rect x="428.5" y="803.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="431.5" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.clear (3 samples, 0.14%)</title><rect x="429.1" y="819.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="432.1" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.order (1 samples, 0.05%)</title><rect x="430.7" y="819.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="433.7" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (7 samples, 0.32%)</title><rect x="431.2" y="819.0" width="3.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="434.2" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (5 samples, 0.23%)</title><rect x="432.3" y="803.0" width="2.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="435.3" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (62 samples, 2.84%)</title><rect x="435.0" y="835.0" width="33.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="438.0" y="846.0">co..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (1 samples, 0.05%)</title><rect x="468.5" y="835.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="471.5" y="846.0"></text>
</g>
<g>
<title>banyandb/v1/Field.addValueType (43 samples, 1.97%)</title><rect x="469.0" y="899.0" width="23.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="472.0" y="910.0">b..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addByte (43 samples, 1.97%)</title><rect x="469.0" y="883.0" width="23.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="472.0" y="894.0">c..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addByte (43 samples, 1.97%)</title><rect x="469.0" y="867.0" width="23.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="472.0" y="878.0">c..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (4 samples, 0.18%)</title><rect x="479.3" y="851.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="482.3" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (20 samples, 0.92%)</title><rect x="481.5" y="851.0" width="10.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="484.5" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (20 samples, 0.92%)</title><rect x="481.5" y="835.0" width="10.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="484.5" y="846.0"></text>
</g>
<g>
<title>banyandb/v1/Field.endField (602 samples, 27.55%)</title><rect x="492.3" y="899.0" width="325.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="495.3" y="910.0">banyandb/v1/Field.endField</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (560 samples, 25.63%)</title><rect x="512.8" y="883.0" width="302.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="515.8" y="894.0">com/google/flatbuffers/FlatBufferBuilder...</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addInt (29 samples, 1.33%)</title><rect x="649.4" y="867.0" width="15.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="652.4" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (18 samples, 0.82%)</title><rect x="655.4" y="851.0" width="9.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="658.4" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (18 samples, 0.82%)</title><rect x="655.4" y="835.0" width="9.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="658.4" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addShort (274 samples, 12.54%)</title><rect x="665.1" y="867.0" width="147.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="668.1" y="878.0">com/google/flatbuff..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (148 samples, 6.77%)</title><rect x="733.1" y="851.0" width="79.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="736.1" y="862.0">com/googl..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (49 samples, 2.24%)</title><rect x="749.3" y="835.0" width="26.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="752.3" y="846.0">c..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder$HeapByteBufferFactory.newByteBuffer (25 samples, 1.14%)</title><rect x="755.8" y="819.0" width="13.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.8" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (21 samples, 0.96%)</title><rect x="756.9" y="803.0" width="11.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="759.9" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (21 samples, 0.96%)</title><rect x="756.9" y="787.0" width="11.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="759.9" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (21 samples, 0.96%)</title><rect x="756.9" y="771.0" width="11.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="759.9" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (21 samples, 0.96%)</title><rect x="756.9" y="755.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="759.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (21 samples, 0.96%)</title><rect x="756.9" y="739.0" width="11.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="759.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (21 samples, 0.96%)</title><rect x="756.9" y="723.0" width="11.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="759.9" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="766.6" y="707.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="769.6" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.09%)</title><rect x="767.1" y="707.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="770.1" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.order (2 samples, 0.09%)</title><rect x="768.2" y="803.0" width="1.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="771.2" y="814.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.clear (1 samples, 0.05%)</title><rect x="769.3" y="819.0" width="0.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="772.3" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.05%)</title><rect x="769.8" y="819.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="772.8" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (10 samples, 0.46%)</title><rect x="770.4" y="819.0" width="5.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="773.4" y="830.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (6 samples, 0.27%)</title><rect x="772.5" y="803.0" width="3.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="775.5" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (69 samples, 3.16%)</title><rect x="775.8" y="835.0" width="37.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="778.8" y="846.0">com..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (4 samples, 0.18%)</title><rect x="813.0" y="867.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="816.0" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (4 samples, 0.18%)</title><rect x="815.2" y="883.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="818.2" y="894.0"></text>
</g>
<g>
<title>org/apache/skywalking/banyandb/benchmark/WriteEntitySerializationTest.buildInt (118 samples, 5.40%)</title><rect x="817.4" y="899.0" width="63.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="820.4" y="910.0">org/apa..</text>
</g>
<g>
<title>banyandb/v1/Int.createInt (118 samples, 5.40%)</title><rect x="817.4" y="883.0" width="63.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="820.4" y="894.0">banyand..</text>
</g>
<g>
<title>banyandb/v1/Int.addValue (18 samples, 0.82%)</title><rect x="817.4" y="867.0" width="9.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="820.4" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addLong (18 samples, 0.82%)</title><rect x="817.4" y="851.0" width="9.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="820.4" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addLong (18 samples, 0.82%)</title><rect x="817.4" y="835.0" width="9.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="820.4" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (1 samples, 0.05%)</title><rect x="823.3" y="819.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="826.3" y="830.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (6 samples, 0.27%)</title><rect x="823.8" y="819.0" width="3.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="826.8" y="830.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (1 samples, 0.05%)</title><rect x="823.8" y="803.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="826.8" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder$HeapByteBufferFactory.newByteBuffer (1 samples, 0.05%)</title><rect x="823.8" y="787.0" width="0.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="826.8" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1 samples, 0.05%)</title><rect x="823.8" y="771.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="826.8" y="782.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (5 samples, 0.23%)</title><rect x="824.4" y="803.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="827.4" y="814.0"></text>
</g>
<g>
<title>banyandb/v1/Int.endInt (100 samples, 4.58%)</title><rect x="827.1" y="867.0" width="54.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="830.1" y="878.0">banya..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (89 samples, 4.07%)</title><rect x="831.4" y="851.0" width="48.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="834.4" y="862.0">com/..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addInt (8 samples, 0.37%)</title><rect x="849.2" y="835.0" width="4.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="852.2" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (5 samples, 0.23%)</title><rect x="850.9" y="819.0" width="2.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="853.9" y="830.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (5 samples, 0.23%)</title><rect x="850.9" y="803.0" width="2.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="853.9" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addShort (47 samples, 2.15%)</title><rect x="853.6" y="835.0" width="25.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="856.6" y="846.0">c..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (16 samples, 0.73%)</title><rect x="870.3" y="819.0" width="8.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="873.3" y="830.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (9 samples, 0.41%)</title><rect x="874.1" y="803.0" width="4.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="877.1" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (1 samples, 0.05%)</title><rect x="878.9" y="835.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="881.9" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (3 samples, 0.14%)</title><rect x="879.5" y="851.0" width="1.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="882.5" y="862.0"></text>
</g>
<g>
<title>org/apache/skywalking/banyandb/benchmark/WriteEntitySerializationTest.buildString (572 samples, 26.18%)</title><rect x="881.1" y="899.0" width="308.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="884.1" y="910.0">org/apache/skywalking/banyandb/benchmark/W..</text>
</g>
<g>
<title>banyandb/v1/Str.createStr (304 samples, 13.91%)</title><rect x="881.1" y="883.0" width="164.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="884.1" y="894.0">banyandb/v1/Str.creat..</text>
</g>
<g>
<title>banyandb/v1/Str.addValue (55 samples, 2.52%)</title><rect x="881.1" y="867.0" width="29.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="884.1" y="878.0">ba..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (55 samples, 2.52%)</title><rect x="881.1" y="851.0" width="29.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="884.1" y="862.0">co..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addOffset (55 samples, 2.52%)</title><rect x="881.1" y="835.0" width="29.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="884.1" y="846.0">co..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (17 samples, 0.78%)</title><rect x="899.5" y="819.0" width="9.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="902.5" y="830.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (17 samples, 0.78%)</title><rect x="899.5" y="803.0" width="9.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="902.5" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.encodeUtf8Array (4 samples, 0.18%)</title><rect x="908.6" y="819.0" width="2.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="911.6" y="830.0"></text>
</g>
<g>
<title>banyandb/v1/Str.endStr (249 samples, 11.40%)</title><rect x="910.8" y="867.0" width="134.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="913.8" y="878.0">banyandb/v1/Str.e..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (222 samples, 10.16%)</title><rect x="920.5" y="851.0" width="119.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="923.5" y="862.0">com/google/flat..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addInt (13 samples, 0.59%)</title><rect x="974.5" y="835.0" width="7.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="977.5" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (6 samples, 0.27%)</title><rect x="978.3" y="819.0" width="3.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="981.3" y="830.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (6 samples, 0.27%)</title><rect x="978.3" y="803.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="981.3" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addShort (107 samples, 4.90%)</title><rect x="981.5" y="835.0" width="57.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="984.5" y="846.0">com/go..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (44 samples, 2.01%)</title><rect x="1015.6" y="819.0" width="23.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1018.6" y="830.0">c..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (2 samples, 0.09%)</title><rect x="1021.5" y="803.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1024.5" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (31 samples, 1.42%)</title><rect x="1022.6" y="803.0" width="16.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1025.6" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (2 samples, 0.09%)</title><rect x="1039.3" y="835.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1042.3" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (9 samples, 0.41%)</title><rect x="1040.4" y="851.0" width="4.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1043.4" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.createString (268 samples, 12.27%)</title><rect x="1045.3" y="883.0" width="144.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1048.3" y="894.0">com/google/flatbuf..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.addByte (24 samples, 1.10%)</title><rect x="1045.3" y="867.0" width="12.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1048.3" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (23 samples, 1.05%)</title><rect x="1045.8" y="851.0" width="12.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1048.8" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (23 samples, 1.05%)</title><rect x="1045.8" y="835.0" width="12.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1048.8" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.startVector (124 samples, 5.68%)</title><rect x="1058.2" y="867.0" width="67.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1061.2" y="878.0">com/goo..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (92 samples, 4.21%)</title><rect x="1075.5" y="851.0" width="49.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1078.5" y="862.0">com/g..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.growByteBuffer (31 samples, 1.42%)</title><rect x="1083.1" y="835.0" width="16.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1086.1" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder$HeapByteBufferFactory.newByteBuffer (20 samples, 0.92%)</title><rect x="1083.6" y="819.0" width="10.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1086.6" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (16 samples, 0.73%)</title><rect x="1085.8" y="803.0" width="8.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1088.8" y="814.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14 samples, 0.64%)</title><rect x="1086.9" y="787.0" width="7.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1089.9" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (14 samples, 0.64%)</title><rect x="1086.9" y="771.0" width="7.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1089.9" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (14 samples, 0.64%)</title><rect x="1086.9" y="755.0" width="7.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1089.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (14 samples, 0.64%)</title><rect x="1086.9" y="739.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1089.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (14 samples, 0.64%)</title><rect x="1086.9" y="723.0" width="7.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1089.9" y="734.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.05%)</title><rect x="1092.3" y="707.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1095.3" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (3 samples, 0.14%)</title><rect x="1092.8" y="707.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1095.8" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.clear (2 samples, 0.09%)</title><rect x="1094.4" y="819.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1097.4" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.09%)</title><rect x="1095.5" y="819.0" width="1.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1098.5" y="830.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (6 samples, 0.27%)</title><rect x="1096.6" y="819.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1099.6" y="830.0"></text>
</g>
<g>
<title>jbyte_arraycopy (2 samples, 0.09%)</title><rect x="1097.7" y="803.0" width="1.0" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="1100.7" y="814.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.09%)</title><rect x="1098.7" y="803.0" width="1.1" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="1101.7" y="814.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.pad (45 samples, 2.06%)</title><rect x="1099.8" y="835.0" width="24.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1102.8" y="846.0">c..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.09%)</title><rect x="1124.1" y="835.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1127.1" y="846.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.encodeUtf8 (86 samples, 3.94%)</title><rect x="1125.2" y="867.0" width="46.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1128.2" y="878.0">com/..</text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.prep (8 samples, 0.37%)</title><rect x="1137.1" y="851.0" width="4.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1140.1" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.encodeUtf8Array (56 samples, 2.56%)</title><rect x="1141.4" y="851.0" width="30.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1144.4" y="862.0">co..</text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.encodedLength (34 samples, 1.56%)</title><rect x="1171.6" y="867.0" width="18.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1174.6" y="878.0"></text>
</g>
<g>
<title>com/google/flatbuffers/Utf8Safe.computeEncodedLength (34 samples, 1.56%)</title><rect x="1171.6" y="851.0" width="18.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1174.6" y="862.0"></text>
</g>
<g>
<title>com/google/flatbuffers/FlatBufferBuilder.endTable (1 samples, 0.05%)</title><rect x="1189.5" y="835.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1192.5" y="846.0"></text>
</g>
</g>
</svg>
