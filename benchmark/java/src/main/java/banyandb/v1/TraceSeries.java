// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class TraceSeries extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static TraceSeries getRootAsTraceSeries(ByteBuffer _bb) { return getRootAsTraceSeries(_bb, new TraceSeries()); }
  public static TraceSeries getRootAsTraceSeries(ByteBuffer _bb, TraceSeries obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TraceSeries __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public banyandb.v1.Metadata metadata() { return metadata(new banyandb.v1.Metadata()); }
  public banyandb.v1.Metadata metadata(banyandb.v1.Metadata obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public banyandb.v1.FieldSpec fields(int j) { return fields(new banyandb.v1.FieldSpec(), j); }
  public banyandb.v1.FieldSpec fields(banyandb.v1.FieldSpec obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int fieldsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public banyandb.v1.FieldSpec.Vector fieldsVector() { return fieldsVector(new banyandb.v1.FieldSpec.Vector()); }
  public banyandb.v1.FieldSpec.Vector fieldsVector(banyandb.v1.FieldSpec.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public banyandb.v1.TraceFieldMap reservedFieldsMap() { return reservedFieldsMap(new banyandb.v1.TraceFieldMap()); }
  public banyandb.v1.TraceFieldMap reservedFieldsMap(banyandb.v1.TraceFieldMap obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public banyandb.v1.ShardInfo shard() { return shard(new banyandb.v1.ShardInfo()); }
  public banyandb.v1.ShardInfo shard(banyandb.v1.ShardInfo obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public banyandb.v1.Duration duration() { return duration(new banyandb.v1.Duration()); }
  public banyandb.v1.Duration duration(banyandb.v1.Duration obj) { int o = __offset(12); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public long updatedAtNanoseconds() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static void startTraceSeries(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addMetadata(FlatBufferBuilder builder, int metadataOffset) { builder.addOffset(0, metadataOffset, 0); }
  public static void addFields(FlatBufferBuilder builder, int fieldsOffset) { builder.addOffset(1, fieldsOffset, 0); }
  public static int createFieldsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFieldsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addReservedFieldsMap(FlatBufferBuilder builder, int reservedFieldsMapOffset) { builder.addOffset(2, reservedFieldsMapOffset, 0); }
  public static void addShard(FlatBufferBuilder builder, int shardOffset) { builder.addOffset(3, shardOffset, 0); }
  public static void addDuration(FlatBufferBuilder builder, int durationOffset) { builder.addStruct(4, durationOffset, 0); }
  public static void addUpdatedAtNanoseconds(FlatBufferBuilder builder, long updatedAtNanoseconds) { builder.addLong(5, updatedAtNanoseconds, 0L); }
  public static int endTraceSeries(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TraceSeries get(int j) { return get(new TraceSeries(), j); }
    public TraceSeries get(TraceSeries obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

