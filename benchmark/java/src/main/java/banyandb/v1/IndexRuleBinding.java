// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class IndexRuleBinding extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static IndexRuleBinding getRootAsIndexRuleBinding(ByteBuffer _bb) { return getRootAsIndexRuleBinding(_bb, new IndexRuleBinding()); }
  public static IndexRuleBinding getRootAsIndexRuleBinding(ByteBuffer _bb, IndexRuleBinding obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IndexRuleBinding __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public banyandb.v1.Metadata metadata() { return metadata(new banyandb.v1.Metadata()); }
  public banyandb.v1.Metadata metadata(banyandb.v1.Metadata obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public banyandb.v1.Metadata ruleRef() { return ruleRef(new banyandb.v1.Metadata()); }
  public banyandb.v1.Metadata ruleRef(banyandb.v1.Metadata obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public banyandb.v1.Series subjects(int j) { return subjects(new banyandb.v1.Series(), j); }
  public banyandb.v1.Series subjects(banyandb.v1.Series obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int subjectsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public banyandb.v1.Series.Vector subjectsVector() { return subjectsVector(new banyandb.v1.Series.Vector()); }
  public banyandb.v1.Series.Vector subjectsVector(banyandb.v1.Series.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public long beginAtNanoseconds() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long expireAtNanoseconds() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long updatedAtNanoseconds() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createIndexRuleBinding(FlatBufferBuilder builder,
      int metadataOffset,
      int rule_refOffset,
      int subjectsOffset,
      long begin_at_nanoseconds,
      long expire_at_nanoseconds,
      long updated_at_nanoseconds) {
    builder.startTable(6);
    IndexRuleBinding.addUpdatedAtNanoseconds(builder, updated_at_nanoseconds);
    IndexRuleBinding.addExpireAtNanoseconds(builder, expire_at_nanoseconds);
    IndexRuleBinding.addBeginAtNanoseconds(builder, begin_at_nanoseconds);
    IndexRuleBinding.addSubjects(builder, subjectsOffset);
    IndexRuleBinding.addRuleRef(builder, rule_refOffset);
    IndexRuleBinding.addMetadata(builder, metadataOffset);
    return IndexRuleBinding.endIndexRuleBinding(builder);
  }

  public static void startIndexRuleBinding(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addMetadata(FlatBufferBuilder builder, int metadataOffset) { builder.addOffset(0, metadataOffset, 0); }
  public static void addRuleRef(FlatBufferBuilder builder, int ruleRefOffset) { builder.addOffset(1, ruleRefOffset, 0); }
  public static void addSubjects(FlatBufferBuilder builder, int subjectsOffset) { builder.addOffset(2, subjectsOffset, 0); }
  public static int createSubjectsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSubjectsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addBeginAtNanoseconds(FlatBufferBuilder builder, long beginAtNanoseconds) { builder.addLong(3, beginAtNanoseconds, 0L); }
  public static void addExpireAtNanoseconds(FlatBufferBuilder builder, long expireAtNanoseconds) { builder.addLong(4, expireAtNanoseconds, 0L); }
  public static void addUpdatedAtNanoseconds(FlatBufferBuilder builder, long updatedAtNanoseconds) { builder.addLong(5, updatedAtNanoseconds, 0L); }
  public static int endIndexRuleBinding(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIndexRuleBindingBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedIndexRuleBindingBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IndexRuleBinding get(int j) { return get(new IndexRuleBinding(), j); }
    public IndexRuleBinding get(IndexRuleBinding obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

