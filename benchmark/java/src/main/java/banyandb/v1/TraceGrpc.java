//Generated by flatc compiler (version 2.0.0)
//If you make any local changes, they will be lost
//source: rpc.fbs

package banyandb.v1;

import com.google.flatbuffers.grpc.FlatbuffersUtils;

import java.nio.ByteBuffer;
import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ClientCalls.asyncClientStreamingCall;
import static io.grpc.stub.ClientCalls.asyncServerStreamingCall;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingServerStreamingCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncBidiStreamingCall;
import static io.grpc.stub.ServerCalls.asyncClientStreamingCall;
import static io.grpc.stub.ServerCalls.asyncServerStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler",
    comments = "Source: rpc.fbs")
public final class TraceGrpc {

  private TraceGrpc() {}
  
  public static final String SERVICE_NAME = "banyandb.v1.Trace";
  
  // Static method descriptors that strictly reflect the proto.
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getQueryMethod()} instead. 
  public static final io.grpc.MethodDescriptor<banyandb.v1.EntityCriteria,
      banyandb.v1.QueryResponse> METHOD_QUERY = getQueryMethod();
  
  private static volatile io.grpc.MethodDescriptor<banyandb.v1.EntityCriteria,
      banyandb.v1.QueryResponse> getQueryMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<banyandb.v1.EntityCriteria> extractorOfEntityCriteria;
  private static FlatbuffersUtils.FBExtactor<banyandb.v1.EntityCriteria> getExtractorOfEntityCriteria() {
      if (extractorOfEntityCriteria != null) return extractorOfEntityCriteria;
      synchronized (TraceGrpc.class) {
          if (extractorOfEntityCriteria != null) return extractorOfEntityCriteria;
          extractorOfEntityCriteria = new FlatbuffersUtils.FBExtactor<banyandb.v1.EntityCriteria>() {
              public banyandb.v1.EntityCriteria extract (ByteBuffer buffer) {
                  return banyandb.v1.EntityCriteria.getRootAsEntityCriteria(buffer);
              }
          };
          return extractorOfEntityCriteria;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<banyandb.v1.QueryResponse> extractorOfQueryResponse;
  private static FlatbuffersUtils.FBExtactor<banyandb.v1.QueryResponse> getExtractorOfQueryResponse() {
      if (extractorOfQueryResponse != null) return extractorOfQueryResponse;
      synchronized (TraceGrpc.class) {
          if (extractorOfQueryResponse != null) return extractorOfQueryResponse;
          extractorOfQueryResponse = new FlatbuffersUtils.FBExtactor<banyandb.v1.QueryResponse>() {
              public banyandb.v1.QueryResponse extract (ByteBuffer buffer) {
                  return banyandb.v1.QueryResponse.getRootAsQueryResponse(buffer);
              }
          };
          return extractorOfQueryResponse;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<banyandb.v1.EntityCriteria,
      banyandb.v1.QueryResponse> getQueryMethod() {
    io.grpc.MethodDescriptor<banyandb.v1.EntityCriteria, banyandb.v1.QueryResponse> getQueryMethod;
    if ((getQueryMethod = TraceGrpc.getQueryMethod) == null) {
      synchronized (TraceGrpc.class) {
        if ((getQueryMethod = TraceGrpc.getQueryMethod) == null) {
          TraceGrpc.getQueryMethod = getQueryMethod = 
              io.grpc.MethodDescriptor.<banyandb.v1.EntityCriteria, banyandb.v1.QueryResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "banyandb.v1.Trace", "Query"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  banyandb.v1.EntityCriteria.class, getExtractorOfEntityCriteria()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  banyandb.v1.QueryResponse.class, getExtractorOfQueryResponse()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getQueryMethod;
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  @java.lang.Deprecated // Use {@link #getWriteMethod()} instead. 
  public static final io.grpc.MethodDescriptor<banyandb.v1.WriteEntity,
      banyandb.v1.WriteResponse> METHOD_WRITE = getWriteMethod();
  
  private static volatile io.grpc.MethodDescriptor<banyandb.v1.WriteEntity,
      banyandb.v1.WriteResponse> getWriteMethod;
  
  private static volatile FlatbuffersUtils.FBExtactor<banyandb.v1.WriteEntity> extractorOfWriteEntity;
  private static FlatbuffersUtils.FBExtactor<banyandb.v1.WriteEntity> getExtractorOfWriteEntity() {
      if (extractorOfWriteEntity != null) return extractorOfWriteEntity;
      synchronized (TraceGrpc.class) {
          if (extractorOfWriteEntity != null) return extractorOfWriteEntity;
          extractorOfWriteEntity = new FlatbuffersUtils.FBExtactor<banyandb.v1.WriteEntity>() {
              public banyandb.v1.WriteEntity extract (ByteBuffer buffer) {
                  return banyandb.v1.WriteEntity.getRootAsWriteEntity(buffer);
              }
          };
          return extractorOfWriteEntity;
      }
  }
  
  private static volatile FlatbuffersUtils.FBExtactor<banyandb.v1.WriteResponse> extractorOfWriteResponse;
  private static FlatbuffersUtils.FBExtactor<banyandb.v1.WriteResponse> getExtractorOfWriteResponse() {
      if (extractorOfWriteResponse != null) return extractorOfWriteResponse;
      synchronized (TraceGrpc.class) {
          if (extractorOfWriteResponse != null) return extractorOfWriteResponse;
          extractorOfWriteResponse = new FlatbuffersUtils.FBExtactor<banyandb.v1.WriteResponse>() {
              public banyandb.v1.WriteResponse extract (ByteBuffer buffer) {
                  return banyandb.v1.WriteResponse.getRootAsWriteResponse(buffer);
              }
          };
          return extractorOfWriteResponse;
      }
  }
  
  @io.grpc.ExperimentalApi("https://github.com/grpc/grpc-java/issues/1901")
  public static io.grpc.MethodDescriptor<banyandb.v1.WriteEntity,
      banyandb.v1.WriteResponse> getWriteMethod() {
    io.grpc.MethodDescriptor<banyandb.v1.WriteEntity, banyandb.v1.WriteResponse> getWriteMethod;
    if ((getWriteMethod = TraceGrpc.getWriteMethod) == null) {
      synchronized (TraceGrpc.class) {
        if ((getWriteMethod = TraceGrpc.getWriteMethod) == null) {
          TraceGrpc.getWriteMethod = getWriteMethod = 
              io.grpc.MethodDescriptor.<banyandb.v1.WriteEntity, banyandb.v1.WriteResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
              .setFullMethodName(generateFullMethodName(
                  "banyandb.v1.Trace", "Write"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(FlatbuffersUtils.marshaller(
                  banyandb.v1.WriteEntity.class, getExtractorOfWriteEntity()))
              .setResponseMarshaller(FlatbuffersUtils.marshaller(
                  banyandb.v1.WriteResponse.class, getExtractorOfWriteResponse()))
                  .setSchemaDescriptor(null)
                  .build();
          }
        }
     }
     return getWriteMethod;
  }
  
  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static TraceStub newStub(io.grpc.Channel channel) {
    return new TraceStub(channel);
  }
  
  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static TraceBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new TraceBlockingStub(channel);
  }
  
  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static TraceFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new TraceFutureStub(channel);
  }
  
  /**
   */
  public static abstract class TraceImplBase implements io.grpc.BindableService {
    
    /**
     */
    public     void query(banyandb.v1.EntityCriteria request,
        io.grpc.stub.StreamObserver<banyandb.v1.QueryResponse> responseObserver)     {
      asyncUnimplementedUnaryCall(getQueryMethod(), responseObserver);
    }
    
    /**
     */
    public     io.grpc.stub.StreamObserver<banyandb.v1.WriteEntity> write(
        io.grpc.stub.StreamObserver<banyandb.v1.WriteResponse> responseObserver)     {
      return asyncUnimplementedStreamingCall(getWriteMethod(), responseObserver);
    }
    
    @java.lang.Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getQueryMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                banyandb.v1.EntityCriteria,
                banyandb.v1.QueryResponse>(
                  this, METHODID_QUERY)))
          .addMethod(
            getWriteMethod(),
            asyncBidiStreamingCall(
              new MethodHandlers<
                banyandb.v1.WriteEntity,
                banyandb.v1.WriteResponse>(
                  this, METHODID_WRITE)))
          .build();
    }
  }
  
  /**
   */
  public static final class TraceStub extends io.grpc.stub.AbstractStub<TraceStub> {
    private TraceStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private TraceStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected TraceStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new TraceStub(channel, callOptions);
    }
    
    /**
     */
    public     void query(banyandb.v1.EntityCriteria request,
        io.grpc.stub.StreamObserver<banyandb.v1.QueryResponse> responseObserver)     {
      asyncUnaryCall(
          getChannel().newCall(getQueryMethod(), getCallOptions()), request, responseObserver);
    }
    
    /**
     */
    public     io.grpc.stub.StreamObserver<banyandb.v1.WriteEntity> write(
        io.grpc.stub.StreamObserver<banyandb.v1.WriteResponse> responseObserver)     {
      return asyncBidiStreamingCall(
          getChannel().newCall(getWriteMethod(), getCallOptions()), responseObserver);
    }
  }
  
  /**
   */
  public static final class TraceBlockingStub extends io.grpc.stub.AbstractStub<TraceBlockingStub> {
    private TraceBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private TraceBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected TraceBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new TraceBlockingStub(channel, callOptions);
    }
    
    /**
     */
    public     banyandb.v1.QueryResponse query(banyandb.v1.EntityCriteria request)     {
      return blockingUnaryCall(
          getChannel(), getQueryMethod(), getCallOptions(), request);
    }
  }
  
  /**
   */
  public static final class TraceFutureStub extends io.grpc.stub.AbstractStub<TraceFutureStub> {
    private TraceFutureStub(io.grpc.Channel channel) {
      super(channel);
    }
    
    private TraceFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }
    
    @java.lang.Override
    protected TraceFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new TraceFutureStub(channel, callOptions);
    }
    
    /**
     */
    public     com.google.common.util.concurrent.ListenableFuture<banyandb.v1.QueryResponse> query(
        banyandb.v1.EntityCriteria request)     {
      return futureUnaryCall(
          getChannel().newCall(getQueryMethod(), getCallOptions()), request);
    }
  }
  
  private static final int METHODID_QUERY = 0;
  private static final int METHODID_WRITE = 1;
  
  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final TraceImplBase serviceImpl;
    private final int methodId;
  
    MethodHandlers(TraceImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }
  
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_QUERY:
          serviceImpl.query((banyandb.v1.EntityCriteria) request,
              (io.grpc.stub.StreamObserver<banyandb.v1.QueryResponse>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }
    
    @java.lang.Override
    @java.lang.SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_WRITE:
          return (io.grpc.stub.StreamObserver<Req>) serviceImpl.write(
              (io.grpc.stub.StreamObserver<banyandb.v1.WriteResponse>) responseObserver);
        default:
          throw new AssertionError();
      }
    }
  }
  
  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
  
  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (TraceGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)              
              .setSchemaDescriptor(null)              
              .addMethod(getQueryMethod())              
              .addMethod(getWriteMethod())              
              .build();
        }
      }
    }
    return result;
  }
}
