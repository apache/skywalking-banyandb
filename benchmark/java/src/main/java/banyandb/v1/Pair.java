// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class Pair extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Pair getRootAsPair(ByteBuffer _bb) { return getRootAsPair(_bb, new Pair()); }
  public static Pair getRootAsPair(ByteBuffer _bb, Pair obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Pair __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte pairType() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table pair(Table obj) { int o = __offset(6); return o != 0 ? __union(obj, o + bb_pos) : null; }

  public static int createPair(FlatBufferBuilder builder,
      byte pair_type,
      int pairOffset) {
    builder.startTable(2);
    Pair.addPair(builder, pairOffset);
    Pair.addPairType(builder, pair_type);
    return Pair.endPair(builder);
  }

  public static void startPair(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addPairType(FlatBufferBuilder builder, byte pairType) { builder.addByte(0, pairType, 0); }
  public static void addPair(FlatBufferBuilder builder, int pairOffset) { builder.addOffset(1, pairOffset, 0); }
  public static int endPair(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Pair get(int j) { return get(new Pair(), j); }
    public Pair get(Pair obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

