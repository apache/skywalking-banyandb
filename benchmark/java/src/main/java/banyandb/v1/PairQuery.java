// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class PairQuery extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static PairQuery getRootAsPairQuery(ByteBuffer _bb) { return getRootAsPairQuery(_bb, new PairQuery()); }
  public static PairQuery getRootAsPairQuery(ByteBuffer _bb, PairQuery obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PairQuery __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte op() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public banyandb.v1.Pair condition() { return condition(new banyandb.v1.Pair()); }
  public banyandb.v1.Pair condition(banyandb.v1.Pair obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createPairQuery(FlatBufferBuilder builder,
      byte op,
      int conditionOffset) {
    builder.startTable(2);
    PairQuery.addCondition(builder, conditionOffset);
    PairQuery.addOp(builder, op);
    return PairQuery.endPairQuery(builder);
  }

  public static void startPairQuery(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addOp(FlatBufferBuilder builder, byte op) { builder.addByte(0, op, 0); }
  public static void addCondition(FlatBufferBuilder builder, int conditionOffset) { builder.addOffset(1, conditionOffset, 0); }
  public static int endPairQuery(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PairQuery get(int j) { return get(new PairQuery(), j); }
    public PairQuery get(PairQuery obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

