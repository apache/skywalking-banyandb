// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class TraceFieldMap extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static TraceFieldMap getRootAsTraceFieldMap(ByteBuffer _bb) { return getRootAsTraceFieldMap(_bb, new TraceFieldMap()); }
  public static TraceFieldMap getRootAsTraceFieldMap(ByteBuffer _bb, TraceFieldMap obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TraceFieldMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String traceId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer traceIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer traceIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String seriesId(int j) { int o = __offset(6); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int seriesIdLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public StringVector seriesIdVector() { return seriesIdVector(new StringVector()); }
  public StringVector seriesIdVector(StringVector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public banyandb.v1.TraceStateMap state() { return state(new banyandb.v1.TraceStateMap()); }
  public banyandb.v1.TraceStateMap state(banyandb.v1.TraceStateMap obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTraceFieldMap(FlatBufferBuilder builder,
      int trace_idOffset,
      int series_idOffset,
      int stateOffset) {
    builder.startTable(3);
    TraceFieldMap.addState(builder, stateOffset);
    TraceFieldMap.addSeriesId(builder, series_idOffset);
    TraceFieldMap.addTraceId(builder, trace_idOffset);
    return TraceFieldMap.endTraceFieldMap(builder);
  }

  public static void startTraceFieldMap(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addTraceId(FlatBufferBuilder builder, int traceIdOffset) { builder.addOffset(0, traceIdOffset, 0); }
  public static void addSeriesId(FlatBufferBuilder builder, int seriesIdOffset) { builder.addOffset(1, seriesIdOffset, 0); }
  public static int createSeriesIdVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSeriesIdVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addState(FlatBufferBuilder builder, int stateOffset) { builder.addOffset(2, stateOffset, 0); }
  public static int endTraceFieldMap(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TraceFieldMap get(int j) { return get(new TraceFieldMap(), j); }
    public TraceFieldMap get(TraceFieldMap obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

