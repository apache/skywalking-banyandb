// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class QueryResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static QueryResponse getRootAsQueryResponse(ByteBuffer _bb) { return getRootAsQueryResponse(_bb, new QueryResponse()); }
  public static QueryResponse getRootAsQueryResponse(ByteBuffer _bb, QueryResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public QueryResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public banyandb.v1.Entity entities(int j) { return entities(new banyandb.v1.Entity(), j); }
  public banyandb.v1.Entity entities(banyandb.v1.Entity obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int entitiesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public banyandb.v1.Entity.Vector entitiesVector() { return entitiesVector(new banyandb.v1.Entity.Vector()); }
  public banyandb.v1.Entity.Vector entitiesVector(banyandb.v1.Entity.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createQueryResponse(FlatBufferBuilder builder,
      int entitiesOffset) {
    builder.startTable(1);
    QueryResponse.addEntities(builder, entitiesOffset);
    return QueryResponse.endQueryResponse(builder);
  }

  public static void startQueryResponse(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addEntities(FlatBufferBuilder builder, int entitiesOffset) { builder.addOffset(0, entitiesOffset, 0); }
  public static int createEntitiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startEntitiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endQueryResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public QueryResponse get(int j) { return get(new QueryResponse(), j); }
    public QueryResponse get(QueryResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

