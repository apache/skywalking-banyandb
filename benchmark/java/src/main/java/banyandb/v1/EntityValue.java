// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

import javax.annotation.Nullable;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class EntityValue extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static EntityValue getRootAsEntityValue(ByteBuffer _bb) { return getRootAsEntityValue(_bb, new EntityValue()); }
  public static EntityValue getRootAsEntityValue(ByteBuffer _bb, EntityValue obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public EntityValue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public  @Nullable java.lang.String entityId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer entityIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer entityIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long timestampNanoseconds() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int dataBinary(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int dataBinaryLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector dataBinaryVector() { return dataBinaryVector(new ByteVector()); }
  public ByteVector dataBinaryVector(ByteVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer dataBinaryAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer dataBinaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public banyandb.v1.Field fields(int j) { return fields(new banyandb.v1.Field(), j); }
  public banyandb.v1.Field fields(banyandb.v1.Field obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int fieldsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public banyandb.v1.Field.Vector fieldsVector() { return fieldsVector(new banyandb.v1.Field.Vector()); }
  public banyandb.v1.Field.Vector fieldsVector(banyandb.v1.Field.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createEntityValue(FlatBufferBuilder builder,
      int entity_idOffset,
      long timestamp_nanoseconds,
      int data_binaryOffset,
      int fieldsOffset) {
    builder.startTable(4);
    EntityValue.addTimestampNanoseconds(builder, timestamp_nanoseconds);
    EntityValue.addFields(builder, fieldsOffset);
    EntityValue.addDataBinary(builder, data_binaryOffset);
    EntityValue.addEntityId(builder, entity_idOffset);
    return EntityValue.endEntityValue(builder);
  }

  public static void startEntityValue(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addEntityId(FlatBufferBuilder builder, int entityIdOffset) { builder.addOffset(0, entityIdOffset, 0); }
  public static void addTimestampNanoseconds(FlatBufferBuilder builder, long timestampNanoseconds) { builder.addLong(1, timestampNanoseconds, 0L); }
  public static void addDataBinary(FlatBufferBuilder builder, int dataBinaryOffset) { builder.addOffset(2, dataBinaryOffset, 0); }
  public static int createDataBinaryVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createDataBinaryVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startDataBinaryVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addFields(FlatBufferBuilder builder, int fieldsOffset) { builder.addOffset(3, fieldsOffset, 0); }
  public static int createFieldsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFieldsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endEntityValue(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishEntityValueBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedEntityValueBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public EntityValue get(int j) { return get(new EntityValue(), j); }
    public EntityValue get(EntityValue obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

