// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class IntArray extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static IntArray getRootAsIntArray(ByteBuffer _bb) { return getRootAsIntArray(_bb, new IntArray()); }
  public static IntArray getRootAsIntArray(ByteBuffer _bb, IntArray obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IntArray __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long value(int j) { int o = __offset(4); return o != 0 ? bb.getLong(__vector(o) + j * 8) : 0; }
  public int valueLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public LongVector valueVector() { return valueVector(new LongVector()); }
  public LongVector valueVector(LongVector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer valueAsByteBuffer() { return __vector_as_bytebuffer(4, 8); }
  public ByteBuffer valueInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 8); }

  public static int createIntArray(FlatBufferBuilder builder,
      int valueOffset) {
    builder.startTable(1);
    IntArray.addValue(builder, valueOffset);
    return IntArray.endIntArray(builder);
  }

  public static void startIntArray(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addValue(FlatBufferBuilder builder, int valueOffset) { builder.addOffset(0, valueOffset, 0); }
  public static int createValueVector(FlatBufferBuilder builder, long[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addLong(data[i]); return builder.endVector(); }
  public static void startValueVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endIntArray(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IntArray get(int j) { return get(new IntArray(), j); }
    public IntArray get(IntArray obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

