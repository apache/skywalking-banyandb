// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class Shard extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Shard getRootAsShard(ByteBuffer _bb) { return getRootAsShard(_bb, new Shard()); }
  public static Shard getRootAsShard(ByteBuffer _bb, Shard obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Shard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long id() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public banyandb.v1.Metadata series() { return series(new banyandb.v1.Metadata()); }
  public banyandb.v1.Metadata series(banyandb.v1.Metadata obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public banyandb.v1.Node node() { return node(new banyandb.v1.Node()); }
  public banyandb.v1.Node node(banyandb.v1.Node obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int total() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public long updateTime() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long createTime() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createShard(FlatBufferBuilder builder,
      long id,
      int seriesOffset,
      int nodeOffset,
      int total,
      long update_time,
      long create_time) {
    builder.startTable(6);
    Shard.addCreateTime(builder, create_time);
    Shard.addUpdateTime(builder, update_time);
    Shard.addId(builder, id);
    Shard.addNode(builder, nodeOffset);
    Shard.addSeries(builder, seriesOffset);
    Shard.addTotal(builder, total);
    return Shard.endShard(builder);
  }

  public static void startShard(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addId(FlatBufferBuilder builder, long id) { builder.addLong(0, id, 0L); }
  public static void addSeries(FlatBufferBuilder builder, int seriesOffset) { builder.addOffset(1, seriesOffset, 0); }
  public static void addNode(FlatBufferBuilder builder, int nodeOffset) { builder.addOffset(2, nodeOffset, 0); }
  public static void addTotal(FlatBufferBuilder builder, int total) { builder.addByte(3, (byte)total, (byte)0); }
  public static void addUpdateTime(FlatBufferBuilder builder, long updateTime) { builder.addLong(4, updateTime, 0L); }
  public static void addCreateTime(FlatBufferBuilder builder, long createTime) { builder.addLong(5, createTime, 0L); }
  public static int endShard(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Shard get(int j) { return get(new Shard(), j); }
    public Shard get(Shard obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

