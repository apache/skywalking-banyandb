// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class ShardEvent extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static ShardEvent getRootAsShardEvent(ByteBuffer _bb) { return getRootAsShardEvent(_bb, new ShardEvent()); }
  public static ShardEvent getRootAsShardEvent(ByteBuffer _bb, ShardEvent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ShardEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public banyandb.v1.Shard shard() { return shard(new banyandb.v1.Shard()); }
  public banyandb.v1.Shard shard(banyandb.v1.Shard obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public byte action() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public long time() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createShardEvent(FlatBufferBuilder builder,
      int shardOffset,
      byte action,
      long time) {
    builder.startTable(3);
    ShardEvent.addTime(builder, time);
    ShardEvent.addShard(builder, shardOffset);
    ShardEvent.addAction(builder, action);
    return ShardEvent.endShardEvent(builder);
  }

  public static void startShardEvent(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addShard(FlatBufferBuilder builder, int shardOffset) { builder.addOffset(0, shardOffset, 0); }
  public static void addAction(FlatBufferBuilder builder, byte action) { builder.addByte(1, action, 0); }
  public static void addTime(FlatBufferBuilder builder, long time) { builder.addLong(2, time, 0L); }
  public static int endShardEvent(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishShardEventBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedShardEventBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ShardEvent get(int j) { return get(new ShardEvent(), j); }
    public ShardEvent get(ShardEvent obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

