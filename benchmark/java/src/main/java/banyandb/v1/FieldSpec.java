// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class FieldSpec extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static FieldSpec getRootAsFieldSpec(ByteBuffer _bb) { return getRootAsFieldSpec(_bb, new FieldSpec()); }
  public static FieldSpec getRootAsFieldSpec(ByteBuffer _bb, FieldSpec obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FieldSpec __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public byte type() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }

  public static int createFieldSpec(FlatBufferBuilder builder,
      int nameOffset,
      byte type) {
    builder.startTable(2);
    FieldSpec.addName(builder, nameOffset);
    FieldSpec.addType(builder, type);
    return FieldSpec.endFieldSpec(builder);
  }

  public static void startFieldSpec(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(1, type, 0); }
  public static int endFieldSpec(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FieldSpec get(int j) { return get(new FieldSpec(), j); }
    public FieldSpec get(FieldSpec obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

