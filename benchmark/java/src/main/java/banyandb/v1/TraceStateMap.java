// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class TraceStateMap extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static TraceStateMap getRootAsTraceStateMap(ByteBuffer _bb) { return getRootAsTraceStateMap(_bb, new TraceStateMap()); }
  public static TraceStateMap getRootAsTraceStateMap(ByteBuffer _bb, TraceStateMap obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TraceStateMap __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String field() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer fieldAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer fieldInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String valSuccess() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer valSuccessAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer valSuccessInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String valError() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer valErrorAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer valErrorInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createTraceStateMap(FlatBufferBuilder builder,
      int fieldOffset,
      int val_successOffset,
      int val_errorOffset) {
    builder.startTable(3);
    TraceStateMap.addValError(builder, val_errorOffset);
    TraceStateMap.addValSuccess(builder, val_successOffset);
    TraceStateMap.addField(builder, fieldOffset);
    return TraceStateMap.endTraceStateMap(builder);
  }

  public static void startTraceStateMap(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addField(FlatBufferBuilder builder, int fieldOffset) { builder.addOffset(0, fieldOffset, 0); }
  public static void addValSuccess(FlatBufferBuilder builder, int valSuccessOffset) { builder.addOffset(1, valSuccessOffset, 0); }
  public static void addValError(FlatBufferBuilder builder, int valErrorOffset) { builder.addOffset(2, valErrorOffset, 0); }
  public static int endTraceStateMap(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TraceStateMap get(int j) { return get(new TraceStateMap(), j); }
    public TraceStateMap get(TraceStateMap obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

