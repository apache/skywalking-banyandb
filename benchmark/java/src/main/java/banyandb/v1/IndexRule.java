// automatically generated by the FlatBuffers compiler, do not modify

package banyandb.v1;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@javax.annotation.Generated(value="flatc")
@SuppressWarnings("unused")
public final class IndexRule extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static IndexRule getRootAsIndexRule(ByteBuffer _bb) { return getRootAsIndexRule(_bb, new IndexRule()); }
  public static IndexRule getRootAsIndexRule(ByteBuffer _bb, IndexRule obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IndexRule __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public banyandb.v1.Metadata metadata() { return metadata(new banyandb.v1.Metadata()); }
  public banyandb.v1.Metadata metadata(banyandb.v1.Metadata obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public banyandb.v1.IndexObject objects(int j) { return objects(new banyandb.v1.IndexObject(), j); }
  public banyandb.v1.IndexObject objects(banyandb.v1.IndexObject obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int objectsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public banyandb.v1.IndexObject.Vector objectsVector() { return objectsVector(new banyandb.v1.IndexObject.Vector()); }
  public banyandb.v1.IndexObject.Vector objectsVector(banyandb.v1.IndexObject.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public long updatedAtNanoseconds() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createIndexRule(FlatBufferBuilder builder,
      int metadataOffset,
      int objectsOffset,
      long updated_at_nanoseconds) {
    builder.startTable(3);
    IndexRule.addUpdatedAtNanoseconds(builder, updated_at_nanoseconds);
    IndexRule.addObjects(builder, objectsOffset);
    IndexRule.addMetadata(builder, metadataOffset);
    return IndexRule.endIndexRule(builder);
  }

  public static void startIndexRule(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addMetadata(FlatBufferBuilder builder, int metadataOffset) { builder.addOffset(0, metadataOffset, 0); }
  public static void addObjects(FlatBufferBuilder builder, int objectsOffset) { builder.addOffset(1, objectsOffset, 0); }
  public static int createObjectsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startObjectsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addUpdatedAtNanoseconds(FlatBufferBuilder builder, long updatedAtNanoseconds) { builder.addLong(2, updatedAtNanoseconds, 0L); }
  public static int endIndexRule(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IndexRule get(int j) { return get(new IndexRule(), j); }
    public IndexRule get(IndexRule obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

