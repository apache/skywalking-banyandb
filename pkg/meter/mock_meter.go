// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/skywalking-banyandb/pkg/meter (interfaces: Provider,Counter,Gauge,Histogram,Scope,Instrument)
//
// Generated by this command:
//
//	mockgen -destination=mock_meter.go -package=meter github.com/apache/skywalking-banyandb/pkg/meter Provider,Counter,Gauge,Histogram,Scope,Instrument
//

// Package meter is a generated GoMock package.
package meter

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// Counter mocks base method.
func (m *MockProvider) Counter(name string, labelNames ...string) Counter {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range labelNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Counter", varargs...)
	ret0, _ := ret[0].(Counter)
	return ret0
}

// Counter indicates an expected call of Counter.
func (mr *MockProviderMockRecorder) Counter(name any, labelNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, labelNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Counter", reflect.TypeOf((*MockProvider)(nil).Counter), varargs...)
}

// Gauge mocks base method.
func (m *MockProvider) Gauge(name string, labelNames ...string) Gauge {
	m.ctrl.T.Helper()
	varargs := []any{name}
	for _, a := range labelNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Gauge", varargs...)
	ret0, _ := ret[0].(Gauge)
	return ret0
}

// Gauge indicates an expected call of Gauge.
func (mr *MockProviderMockRecorder) Gauge(name any, labelNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name}, labelNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockProvider)(nil).Gauge), varargs...)
}

// Histogram mocks base method.
func (m *MockProvider) Histogram(name string, buckets Buckets, labelNames ...string) Histogram {
	m.ctrl.T.Helper()
	varargs := []any{name, buckets}
	for _, a := range labelNames {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Histogram", varargs...)
	ret0, _ := ret[0].(Histogram)
	return ret0
}

// Histogram indicates an expected call of Histogram.
func (mr *MockProviderMockRecorder) Histogram(name, buckets any, labelNames ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{name, buckets}, labelNames...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockProvider)(nil).Histogram), varargs...)
}

// MockCounter is a mock of Counter interface.
type MockCounter struct {
	ctrl     *gomock.Controller
	recorder *MockCounterMockRecorder
	isgomock struct{}
}

// MockCounterMockRecorder is the mock recorder for MockCounter.
type MockCounterMockRecorder struct {
	mock *MockCounter
}

// NewMockCounter creates a new mock instance.
func NewMockCounter(ctrl *gomock.Controller) *MockCounter {
	mock := &MockCounter{ctrl: ctrl}
	mock.recorder = &MockCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounter) EXPECT() *MockCounterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockCounter) Delete(labelValues ...string) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range labelValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCounterMockRecorder) Delete(labelValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCounter)(nil).Delete), labelValues...)
}

// Inc mocks base method.
func (m *MockCounter) Inc(delta float64, labelValues ...string) {
	m.ctrl.T.Helper()
	varargs := []any{delta}
	for _, a := range labelValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Inc", varargs...)
}

// Inc indicates an expected call of Inc.
func (mr *MockCounterMockRecorder) Inc(delta any, labelValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{delta}, labelValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inc", reflect.TypeOf((*MockCounter)(nil).Inc), varargs...)
}

// MockGauge is a mock of Gauge interface.
type MockGauge struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeMockRecorder
	isgomock struct{}
}

// MockGaugeMockRecorder is the mock recorder for MockGauge.
type MockGaugeMockRecorder struct {
	mock *MockGauge
}

// NewMockGauge creates a new mock instance.
func NewMockGauge(ctrl *gomock.Controller) *MockGauge {
	mock := &MockGauge{ctrl: ctrl}
	mock.recorder = &MockGaugeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGauge) EXPECT() *MockGaugeMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockGauge) Add(delta float64, labelValues ...string) {
	m.ctrl.T.Helper()
	varargs := []any{delta}
	for _, a := range labelValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Add", varargs...)
}

// Add indicates an expected call of Add.
func (mr *MockGaugeMockRecorder) Add(delta any, labelValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{delta}, labelValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockGauge)(nil).Add), varargs...)
}

// Delete mocks base method.
func (m *MockGauge) Delete(labelValues ...string) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range labelValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockGaugeMockRecorder) Delete(labelValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGauge)(nil).Delete), labelValues...)
}

// Set mocks base method.
func (m *MockGauge) Set(value float64, labelValues ...string) {
	m.ctrl.T.Helper()
	varargs := []any{value}
	for _, a := range labelValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Set", varargs...)
}

// Set indicates an expected call of Set.
func (mr *MockGaugeMockRecorder) Set(value any, labelValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{value}, labelValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockGauge)(nil).Set), varargs...)
}

// MockHistogram is a mock of Histogram interface.
type MockHistogram struct {
	ctrl     *gomock.Controller
	recorder *MockHistogramMockRecorder
	isgomock struct{}
}

// MockHistogramMockRecorder is the mock recorder for MockHistogram.
type MockHistogramMockRecorder struct {
	mock *MockHistogram
}

// NewMockHistogram creates a new mock instance.
func NewMockHistogram(ctrl *gomock.Controller) *MockHistogram {
	mock := &MockHistogram{ctrl: ctrl}
	mock.recorder = &MockHistogramMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHistogram) EXPECT() *MockHistogramMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockHistogram) Delete(labelValues ...string) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range labelValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHistogramMockRecorder) Delete(labelValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHistogram)(nil).Delete), labelValues...)
}

// Observe mocks base method.
func (m *MockHistogram) Observe(value float64, labelValues ...string) {
	m.ctrl.T.Helper()
	varargs := []any{value}
	for _, a := range labelValues {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Observe", varargs...)
}

// Observe indicates an expected call of Observe.
func (mr *MockHistogramMockRecorder) Observe(value any, labelValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{value}, labelValues...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Observe", reflect.TypeOf((*MockHistogram)(nil).Observe), varargs...)
}

// MockScope is a mock of Scope interface.
type MockScope struct {
	ctrl     *gomock.Controller
	recorder *MockScopeMockRecorder
	isgomock struct{}
}

// MockScopeMockRecorder is the mock recorder for MockScope.
type MockScopeMockRecorder struct {
	mock *MockScope
}

// NewMockScope creates a new mock instance.
func NewMockScope(ctrl *gomock.Controller) *MockScope {
	mock := &MockScope{ctrl: ctrl}
	mock.recorder = &MockScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScope) EXPECT() *MockScopeMockRecorder {
	return m.recorder
}

// ConstLabels mocks base method.
func (m *MockScope) ConstLabels(labels LabelPairs) Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstLabels", labels)
	ret0, _ := ret[0].(Scope)
	return ret0
}

// ConstLabels indicates an expected call of ConstLabels.
func (mr *MockScopeMockRecorder) ConstLabels(labels any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstLabels", reflect.TypeOf((*MockScope)(nil).ConstLabels), labels)
}

// GetLabels mocks base method.
func (m *MockScope) GetLabels() LabelPairs {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLabels")
	ret0, _ := ret[0].(LabelPairs)
	return ret0
}

// GetLabels indicates an expected call of GetLabels.
func (mr *MockScopeMockRecorder) GetLabels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLabels", reflect.TypeOf((*MockScope)(nil).GetLabels))
}

// GetNamespace mocks base method.
func (m *MockScope) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockScopeMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockScope)(nil).GetNamespace))
}

// SubScope mocks base method.
func (m *MockScope) SubScope(name string) Scope {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubScope", name)
	ret0, _ := ret[0].(Scope)
	return ret0
}

// SubScope indicates an expected call of SubScope.
func (mr *MockScopeMockRecorder) SubScope(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubScope", reflect.TypeOf((*MockScope)(nil).SubScope), name)
}

// MockInstrument is a mock of Instrument interface.
type MockInstrument struct {
	ctrl     *gomock.Controller
	recorder *MockInstrumentMockRecorder
	isgomock struct{}
}

// MockInstrumentMockRecorder is the mock recorder for MockInstrument.
type MockInstrumentMockRecorder struct {
	mock *MockInstrument
}

// NewMockInstrument creates a new mock instance.
func NewMockInstrument(ctrl *gomock.Controller) *MockInstrument {
	mock := &MockInstrument{ctrl: ctrl}
	mock.recorder = &MockInstrumentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstrument) EXPECT() *MockInstrumentMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockInstrument) Delete(labelValues ...string) bool {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range labelValues {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockInstrumentMockRecorder) Delete(labelValues ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstrument)(nil).Delete), labelValues...)
}
