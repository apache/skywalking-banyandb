{
  "swagger": "2.0",
  "info": {
    "title": "banyandb/database/v1/rpc.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "StreamRegistryService"
    },
    {
      "name": "IndexRuleBindingRegistryService"
    },
    {
      "name": "IndexRuleRegistryService"
    },
    {
      "name": "MeasureRegistryService"
    },
    {
      "name": "GroupRegistryService"
    },
    {
      "name": "TopNAggregationRegistryService"
    }
  ],
  "basePath": "/api",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/measure/schema": {
      "post": {
        "operationId": "MeasureRegistryService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MeasureRegistryServiceCreateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MeasureRegistryServiceCreateRequest"
            }
          }
        ],
        "tags": [
          "MeasureRegistryService"
        ]
      },
      "put": {
        "operationId": "MeasureRegistryService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MeasureRegistryServiceUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MeasureRegistryServiceUpdateRequest"
            }
          }
        ],
        "tags": [
          "MeasureRegistryService"
        ]
      }
    },
    "/v1/measure/schema-group/{group}": {
      "get": {
        "operationId": "MeasureRegistryService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MeasureRegistryServiceListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "MeasureRegistryService"
        ]
      }
    },
    "/v1/measure/schema/{metadata.group}/{metadata.name}": {
      "get": {
        "operationId": "MeasureRegistryService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MeasureRegistryServiceGetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "metadata.group",
            "description": "group contains a set of options, like retention policy, max",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metadata.name",
            "description": "name of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metadata.id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "metadata.createRevision",
            "description": "readonly. create_revision is the revision of last creation on this key.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "metadata.modRevision",
            "description": "readonly. mod_revision is the revision of last modification on this key.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "MeasureRegistryService"
        ]
      },
      "delete": {
        "operationId": "MeasureRegistryService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MeasureRegistryServiceDeleteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "metadata.group",
            "description": "group contains a set of options, like retention policy, max",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metadata.name",
            "description": "name of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metadata.id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "metadata.createRevision",
            "description": "readonly. create_revision is the revision of last creation on this key.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "metadata.modRevision",
            "description": "readonly. mod_revision is the revision of last modification on this key.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "MeasureRegistryService"
        ]
      }
    },
    "/v1/stream/schema": {
      "post": {
        "operationId": "StreamRegistryService_Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StreamRegistryServiceCreateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1StreamRegistryServiceCreateRequest"
            }
          }
        ],
        "tags": [
          "StreamRegistryService"
        ]
      },
      "put": {
        "operationId": "StreamRegistryService_Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StreamRegistryServiceUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1StreamRegistryServiceUpdateRequest"
            }
          }
        ],
        "tags": [
          "StreamRegistryService"
        ]
      }
    },
    "/v1/stream/schema-group/{group}": {
      "get": {
        "operationId": "StreamRegistryService_List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StreamRegistryServiceListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "group",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "StreamRegistryService"
        ]
      }
    },
    "/v1/stream/schema/{metadata.group}/{metadata.name}": {
      "get": {
        "operationId": "StreamRegistryService_Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StreamRegistryServiceGetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "metadata.group",
            "description": "group contains a set of options, like retention policy, max",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metadata.name",
            "description": "name of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metadata.id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "metadata.createRevision",
            "description": "readonly. create_revision is the revision of last creation on this key.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "metadata.modRevision",
            "description": "readonly. mod_revision is the revision of last modification on this key.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "StreamRegistryService"
        ]
      },
      "delete": {
        "operationId": "StreamRegistryService_Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StreamRegistryServiceDeleteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "metadata.group",
            "description": "group contains a set of options, like retention policy, max",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metadata.name",
            "description": "name of the entity",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metadata.id",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "metadata.createRevision",
            "description": "readonly. create_revision is the revision of last creation on this key.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "metadata.modRevision",
            "description": "readonly. mod_revision is the revision of last modification on this key.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "StreamRegistryService"
        ]
      }
    }
  },
  "definitions": {
    "ConditionBinaryOp": {
      "type": "string",
      "enum": [
        "BINARY_OP_UNSPECIFIED",
        "BINARY_OP_EQ",
        "BINARY_OP_NE",
        "BINARY_OP_LT",
        "BINARY_OP_GT",
        "BINARY_OP_LE",
        "BINARY_OP_GE",
        "BINARY_OP_HAVING",
        "BINARY_OP_NOT_HAVING",
        "BINARY_OP_IN",
        "BINARY_OP_NOT_IN"
      ],
      "default": "BINARY_OP_UNSPECIFIED",
      "title": "BinaryOp specifies the operation imposed to the given query condition\nFor EQ, NE, LT, GT, LE and GE, only one operand should be given, i.e. one-to-one relationship.\nHAVING and NOT_HAVING allow multi-value to be the operand such as array/vector, i.e. one-to-many relationship.\nFor example, \"keyA\" contains \"valueA\" **and** \"valueB\""
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Catalog": {
      "type": "string",
      "enum": [
        "CATALOG_UNSPECIFIED",
        "CATALOG_STREAM",
        "CATALOG_MEASURE"
      ],
      "default": "CATALOG_UNSPECIFIED"
    },
    "v1CompressionMethod": {
      "type": "string",
      "enum": [
        "COMPRESSION_METHOD_UNSPECIFIED",
        "COMPRESSION_METHOD_ZSTD"
      ],
      "default": "COMPRESSION_METHOD_UNSPECIFIED"
    },
    "v1Condition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "op": {
          "$ref": "#/definitions/ConditionBinaryOp"
        },
        "value": {
          "$ref": "#/definitions/v1TagValue"
        }
      },
      "description": "Condition consists of the query condition with a single binary operator to be imposed\nFor 1:1 BinaryOp, values in condition must be an array with length = 1,\nwhile for 1:N BinaryOp, values can be an array with length \u003e= 1."
    },
    "v1Criteria": {
      "type": "object",
      "properties": {
        "tagFamilyName": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Condition"
          }
        }
      },
      "description": "tag_families are indexed."
    },
    "v1EncodingMethod": {
      "type": "string",
      "enum": [
        "ENCODING_METHOD_UNSPECIFIED",
        "ENCODING_METHOD_GORILLA"
      ],
      "default": "ENCODING_METHOD_UNSPECIFIED"
    },
    "v1Entity": {
      "type": "object",
      "properties": {
        "tagNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1FieldSpec": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name is the identity of a field"
        },
        "fieldType": {
          "$ref": "#/definitions/v1FieldType",
          "title": "field_type denotes the type of field value"
        },
        "encodingMethod": {
          "$ref": "#/definitions/v1EncodingMethod",
          "title": "encoding_method indicates how to encode data during writing"
        },
        "compressionMethod": {
          "$ref": "#/definitions/v1CompressionMethod",
          "title": "compression_method indicates how to compress data during writing"
        }
      },
      "title": "FieldSpec is the specification of field"
    },
    "v1FieldType": {
      "type": "string",
      "enum": [
        "FIELD_TYPE_UNSPECIFIED",
        "FIELD_TYPE_STRING",
        "FIELD_TYPE_INT",
        "FIELD_TYPE_DATA_BINARY"
      ],
      "default": "FIELD_TYPE_UNSPECIFIED"
    },
    "v1Group": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata",
          "title": "metadata define the group's identity"
        },
        "catalog": {
          "$ref": "#/definitions/v1Catalog",
          "title": "catalog denotes which type of data the group contains"
        },
        "resourceOpts": {
          "$ref": "#/definitions/v1ResourceOpts",
          "title": "resourceOpts indicates the structure of the underlying kv storage"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "updated_at indicates when resources of the group are updated"
        }
      },
      "title": "Group is an internal object for Group management"
    },
    "v1GroupRegistryServiceCreateResponse": {
      "type": "object"
    },
    "v1GroupRegistryServiceDeleteResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "v1GroupRegistryServiceGetResponse": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/v1Group"
        }
      }
    },
    "v1GroupRegistryServiceListResponse": {
      "type": "object",
      "properties": {
        "group": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Group"
          }
        }
      }
    },
    "v1GroupRegistryServiceUpdateResponse": {
      "type": "object"
    },
    "v1ID": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "v1IndexRule": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata",
          "title": "metadata define the rule's identity"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "tags are the combination that refers to an indexed object\nIf the elements in tags are more than 1, the object will generate a multi-tag index\nCaveat: All tags in a multi-tag MUST have an identical IndexType"
        },
        "type": {
          "$ref": "#/definitions/v1IndexRuleType",
          "description": "type is the IndexType of this IndexObject."
        },
        "location": {
          "$ref": "#/definitions/v1IndexRuleLocation",
          "description": "location indicates where to store index."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "updated_at indicates when the IndexRule is updated"
        }
      },
      "description": "IndexRule defines how to generate indices based on tags and the index type\nIndexRule should bind to a subject through an IndexRuleBinding to generate proper indices."
    },
    "v1IndexRuleBinding": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata",
          "title": "metadata is the identity of this binding"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "rules refers to the IndexRule"
        },
        "subject": {
          "$ref": "#/definitions/v1Subject",
          "title": "subject indicates the subject of binding action"
        },
        "beginAt": {
          "type": "string",
          "format": "date-time",
          "title": "begin_at_nanoseconds is the timestamp, after which the binding will be active"
        },
        "expireAt": {
          "type": "string",
          "format": "date-time",
          "title": "expire_at_nanoseconds it the timestamp, after which the binding will be inactive\nexpire_at_nanoseconds must be larger than begin_at_nanoseconds"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "updated_at indicates when the IndexRuleBinding is updated"
        }
      },
      "description": "IndexRuleBinding is a bridge to connect severalIndexRules to a subject\nThis binding is valid between begin_at_nanoseconds and expire_at_nanoseconds, that provides flexible strategies\nto control how to generate time series indices."
    },
    "v1IndexRuleBindingRegistryServiceCreateResponse": {
      "type": "object"
    },
    "v1IndexRuleBindingRegistryServiceDeleteResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "v1IndexRuleBindingRegistryServiceGetResponse": {
      "type": "object",
      "properties": {
        "indexRuleBinding": {
          "$ref": "#/definitions/v1IndexRuleBinding"
        }
      }
    },
    "v1IndexRuleBindingRegistryServiceListResponse": {
      "type": "object",
      "properties": {
        "indexRuleBinding": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1IndexRuleBinding"
          }
        }
      }
    },
    "v1IndexRuleBindingRegistryServiceUpdateResponse": {
      "type": "object"
    },
    "v1IndexRuleLocation": {
      "type": "string",
      "enum": [
        "LOCATION_UNSPECIFIED",
        "LOCATION_SERIES",
        "LOCATION_GLOBAL"
      ],
      "default": "LOCATION_UNSPECIFIED"
    },
    "v1IndexRuleRegistryServiceCreateResponse": {
      "type": "object"
    },
    "v1IndexRuleRegistryServiceDeleteResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "v1IndexRuleRegistryServiceGetResponse": {
      "type": "object",
      "properties": {
        "indexRule": {
          "$ref": "#/definitions/v1IndexRule"
        }
      }
    },
    "v1IndexRuleRegistryServiceListResponse": {
      "type": "object",
      "properties": {
        "indexRule": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1IndexRule"
          }
        }
      }
    },
    "v1IndexRuleRegistryServiceUpdateResponse": {
      "type": "object"
    },
    "v1IndexRuleType": {
      "type": "string",
      "enum": [
        "TYPE_UNSPECIFIED",
        "TYPE_TREE",
        "TYPE_INVERTED"
      ],
      "default": "TYPE_UNSPECIFIED",
      "title": "Type determine the index structure under the hood"
    },
    "v1Int": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1IntArray": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "v1Measure": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata",
          "title": "metadata is the identity of a measure"
        },
        "tagFamilies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TagFamilySpec"
          },
          "title": "tag_families are for filter measures"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1FieldSpec"
          },
          "title": "fields denote measure values"
        },
        "entity": {
          "$ref": "#/definitions/v1Entity",
          "title": "entity indicates which tags will be to generate a series and shard a measure"
        },
        "interval": {
          "type": "string",
          "description": "interval indicates how frequently to send a data point\nvalid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\", \"d\"."
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "updated_at indicates when the measure is updated"
        }
      },
      "title": "Measure intends to store data point"
    },
    "v1MeasureRegistryServiceCreateRequest": {
      "type": "object",
      "properties": {
        "measure": {
          "$ref": "#/definitions/v1Measure"
        }
      }
    },
    "v1MeasureRegistryServiceCreateResponse": {
      "type": "object"
    },
    "v1MeasureRegistryServiceDeleteResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "v1MeasureRegistryServiceGetResponse": {
      "type": "object",
      "properties": {
        "measure": {
          "$ref": "#/definitions/v1Measure"
        }
      }
    },
    "v1MeasureRegistryServiceListResponse": {
      "type": "object",
      "properties": {
        "measure": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Measure"
          }
        }
      }
    },
    "v1MeasureRegistryServiceUpdateRequest": {
      "type": "object",
      "properties": {
        "measure": {
          "$ref": "#/definitions/v1Measure"
        }
      }
    },
    "v1MeasureRegistryServiceUpdateResponse": {
      "type": "object"
    },
    "v1Metadata": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "title": "group contains a set of options, like retention policy, max"
        },
        "name": {
          "type": "string",
          "title": "name of the entity"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createRevision": {
          "type": "string",
          "format": "int64",
          "description": "readonly. create_revision is the revision of last creation on this key."
        },
        "modRevision": {
          "type": "string",
          "format": "int64",
          "description": "readonly. mod_revision is the revision of last modification on this key."
        }
      },
      "title": "Metadata is for multi-tenant, multi-model use"
    },
    "v1ResourceOpts": {
      "type": "object",
      "properties": {
        "shardNum": {
          "type": "integer",
          "format": "int64",
          "title": "shard_num is the number of shards"
        },
        "blockNum": {
          "type": "integer",
          "format": "int64",
          "title": "block_num specific how many blocks in a segment"
        },
        "ttl": {
          "type": "string",
          "title": "ttl indicates time to live, how long the data will be cached"
        }
      }
    },
    "v1Sort": {
      "type": "string",
      "enum": [
        "SORT_UNSPECIFIED",
        "SORT_DESC",
        "SORT_ASC"
      ],
      "default": "SORT_UNSPECIFIED"
    },
    "v1Str": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "v1StrArray": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Stream": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata",
          "title": "metadata is the identity of a trace series"
        },
        "tagFamilies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TagFamilySpec"
          },
          "title": "tag_families"
        },
        "entity": {
          "$ref": "#/definitions/v1Entity",
          "title": "entity indicates how to generate a series and shard a stream"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "updated_at indicates when the stream is updated"
        }
      },
      "title": "Stream intends to store streaming data, for example, traces or logs"
    },
    "v1StreamRegistryServiceCreateRequest": {
      "type": "object",
      "properties": {
        "stream": {
          "$ref": "#/definitions/v1Stream"
        }
      }
    },
    "v1StreamRegistryServiceCreateResponse": {
      "type": "object"
    },
    "v1StreamRegistryServiceDeleteResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "v1StreamRegistryServiceGetResponse": {
      "type": "object",
      "properties": {
        "stream": {
          "$ref": "#/definitions/v1Stream"
        }
      }
    },
    "v1StreamRegistryServiceListResponse": {
      "type": "object",
      "properties": {
        "stream": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Stream"
          }
        }
      }
    },
    "v1StreamRegistryServiceUpdateRequest": {
      "type": "object",
      "properties": {
        "stream": {
          "$ref": "#/definitions/v1Stream"
        }
      }
    },
    "v1StreamRegistryServiceUpdateResponse": {
      "type": "object"
    },
    "v1Subject": {
      "type": "object",
      "properties": {
        "catalog": {
          "$ref": "#/definitions/v1Catalog",
          "title": "catalog is where the subject belongs to"
        },
        "name": {
          "type": "string",
          "title": "name refers to a stream or measure in a particular catalog"
        }
      },
      "title": "Subject defines which stream or measure would generate indices"
    },
    "v1TagFamilySpec": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TagSpec"
          },
          "title": "tags defines accepted tags"
        }
      }
    },
    "v1TagSpec": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1TagType"
        }
      }
    },
    "v1TagType": {
      "type": "string",
      "enum": [
        "TAG_TYPE_UNSPECIFIED",
        "TAG_TYPE_STRING",
        "TAG_TYPE_INT",
        "TAG_TYPE_STRING_ARRAY",
        "TAG_TYPE_INT_ARRAY",
        "TAG_TYPE_DATA_BINARY",
        "TAG_TYPE_ID"
      ],
      "default": "TAG_TYPE_UNSPECIFIED"
    },
    "v1TagValue": {
      "type": "object",
      "properties": {
        "null": {
          "type": "string"
        },
        "str": {
          "$ref": "#/definitions/v1Str"
        },
        "strArray": {
          "$ref": "#/definitions/v1StrArray"
        },
        "int": {
          "$ref": "#/definitions/v1Int"
        },
        "intArray": {
          "$ref": "#/definitions/v1IntArray"
        },
        "binaryData": {
          "type": "string",
          "format": "byte"
        },
        "id": {
          "$ref": "#/definitions/v1ID"
        }
      }
    },
    "v1TopNAggregation": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata",
          "title": "metadata is the identity of an aggregation"
        },
        "sourceMeasure": {
          "$ref": "#/definitions/v1Metadata",
          "title": "source_measure denotes the data source of this aggregation"
        },
        "fieldName": {
          "type": "string",
          "title": "field_name is the name of field used for ranking"
        },
        "fieldValueSort": {
          "$ref": "#/definitions/v1Sort",
          "title": "field_value_sort indicates how to sort fields\nASC: bottomN\nDESC: topN\nUNSPECIFIED: topN + bottomN"
        },
        "groupByTagNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "group_by_tag_names groups data points into statistical counters"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Criteria"
          },
          "title": "criteria select partial data points from measure"
        },
        "countersNumber": {
          "type": "integer",
          "format": "int32",
          "title": "counters_number sets the number of counters to be tracked. The default value is 1000"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time",
          "title": "updated_at indicates when the measure is updated"
        }
      },
      "title": "TopNAggregation generates offline TopN statistics for a measure's TopN approximation"
    },
    "v1TopNAggregationRegistryServiceCreateResponse": {
      "type": "object"
    },
    "v1TopNAggregationRegistryServiceDeleteResponse": {
      "type": "object",
      "properties": {
        "deleted": {
          "type": "boolean"
        }
      }
    },
    "v1TopNAggregationRegistryServiceGetResponse": {
      "type": "object",
      "properties": {
        "topNAggregation": {
          "$ref": "#/definitions/v1TopNAggregation"
        }
      }
    },
    "v1TopNAggregationRegistryServiceListResponse": {
      "type": "object",
      "properties": {
        "topNAggregation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TopNAggregation"
          }
        }
      }
    },
    "v1TopNAggregationRegistryServiceUpdateResponse": {
      "type": "object"
    }
  }
}
