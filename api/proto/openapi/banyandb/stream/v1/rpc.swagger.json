{
  "swagger": "2.0",
  "info": {
    "title": "banyandb/stream/v1/rpc.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "StreamService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/stream/data": {
      "post": {
        "operationId": "StreamService_Query",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1QueryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1QueryRequest"
            }
          }
        ],
        "tags": [
          "StreamService"
        ]
      }
    }
  },
  "definitions": {
    "ConditionBinaryOp": {
      "type": "string",
      "enum": [
        "BINARY_OP_UNSPECIFIED",
        "BINARY_OP_EQ",
        "BINARY_OP_NE",
        "BINARY_OP_LT",
        "BINARY_OP_GT",
        "BINARY_OP_LE",
        "BINARY_OP_GE",
        "BINARY_OP_HAVING",
        "BINARY_OP_NOT_HAVING",
        "BINARY_OP_IN",
        "BINARY_OP_NOT_IN"
      ],
      "default": "BINARY_OP_UNSPECIFIED",
      "title": "BinaryOp specifies the operation imposed to the given query condition\nFor EQ, NE, LT, GT, LE and GE, only one operand should be given, i.e. one-to-one relationship.\nHAVING and NOT_HAVING allow multi-value to be the operand such as array/vector, i.e. one-to-many relationship.\nFor example, \"keyA\" contains \"valueA\" **and** \"valueB\""
    },
    "modelv1TagFamily": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Tag"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "protobufNullValue": {
      "type": "string",
      "enum": [
        "NULL_VALUE"
      ],
      "default": "NULL_VALUE",
      "description": "`NullValue` is a singleton enumeration to represent the null value for the\n`Value` type union.\n\n The JSON representation for `NullValue` is JSON `null`.\n\n - NULL_VALUE: Null value."
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1Condition": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "op": {
          "$ref": "#/definitions/ConditionBinaryOp"
        },
        "value": {
          "$ref": "#/definitions/v1TagValue"
        }
      },
      "description": "Condition consists of the query condition with a single binary operator to be imposed\nFor 1:1 BinaryOp, values in condition must be an array with length = 1,\nwhile for 1:N BinaryOp, values can be an array with length \u003e= 1."
    },
    "v1Criteria": {
      "type": "object",
      "properties": {
        "tagFamilyName": {
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Condition"
          }
        }
      },
      "description": "tag_families are indexed."
    },
    "v1Element": {
      "type": "object",
      "properties": {
        "elementId": {
          "type": "string",
          "title": "element_id could be span_id of a Span or segment_id of a Segment in the context of stream"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "timestamp represents a millisecond\n1) either the start time of a Span/Segment,\n2) or the timestamp of a log"
        },
        "tagFamilies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/modelv1TagFamily"
          },
          "title": "fields contains all indexed Field. Some typical names,\n- stream_id\n- duration\n- service_name\n- service_instance_id\n- end_time_milliseconds"
        }
      },
      "title": "Element represents\n(stream context) a Span defined in Google Dapper paper or equivalently a Segment in Skywalking.\n(Log context) a log"
    },
    "v1ElementValue": {
      "type": "object",
      "properties": {
        "elementId": {
          "type": "string",
          "title": "element_id could be span_id of a Span or segment_id of a Segment in the context of stream"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "title": "timestamp is in the timeunit of milliseconds. It represents\n1) either the start time of a Span/Segment,\n2) or the timestamp of a log"
        },
        "tagFamilies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TagFamilyForWrite"
          },
          "title": "the order of tag_families' items match the stream schema"
        }
      }
    },
    "v1ID": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "v1Int": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1IntArray": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "v1Metadata": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string",
          "title": "group contains a set of options, like retention policy, max"
        },
        "name": {
          "type": "string",
          "title": "name of the entity"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createRevision": {
          "type": "string",
          "format": "int64",
          "description": "readonly. create_revision is the revision of last creation on this key."
        },
        "modRevision": {
          "type": "string",
          "format": "int64",
          "description": "readonly. mod_revision is the revision of last modification on this key."
        }
      },
      "title": "Metadata is for multi-tenant, multi-model use"
    },
    "v1QueryOrder": {
      "type": "object",
      "properties": {
        "indexRuleName": {
          "type": "string"
        },
        "sort": {
          "$ref": "#/definitions/v1Sort"
        }
      },
      "description": "QueryOrder means a Sort operation to be done for a given index rule.\nThe index_rule_name refers to the name of a index rule bound to the subject."
    },
    "v1QueryRequest": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1Metadata",
          "title": "metadata is required"
        },
        "timeRange": {
          "$ref": "#/definitions/v1TimeRange",
          "title": "time_range is a range query with begin/end time of entities in the timeunit of milliseconds.\nIn the context of stream, it represents the range of the `startTime` for spans/segments,\nwhile in the context of Log, it means the range of the timestamp(s) for logs.\nit is always recommended to specify time range for performance reason"
        },
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "offset is used to support pagination, together with the following limit"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "limit is used to impose a boundary on the number of records being returned"
        },
        "orderBy": {
          "$ref": "#/definitions/v1QueryOrder",
          "title": "order_by is given to specify the sort for a field. So far, only fields in the type of Integer are supported"
        },
        "criteria": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Criteria"
          },
          "description": "tag_families are indexed."
        },
        "projection": {
          "$ref": "#/definitions/v1TagProjection",
          "title": "projection can be used to select the key names of the element in the response"
        }
      },
      "description": "QueryRequest is the request contract for query."
    },
    "v1QueryResponse": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Element"
          },
          "title": "elements are the actual data returned"
        }
      },
      "description": "QueryResponse is the response for a query to the Query module."
    },
    "v1Sort": {
      "type": "string",
      "enum": [
        "SORT_UNSPECIFIED",
        "SORT_DESC",
        "SORT_ASC"
      ],
      "default": "SORT_UNSPECIFIED"
    },
    "v1Str": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "v1StrArray": {
      "type": "object",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1Tag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/v1TagValue"
        }
      },
      "description": "Pair is the building block of a record which is equivalent to a key-value pair.\nIn the context of Trace, it could be metadata of a trace such as service_name, service_instance, etc.\nBesides, other tags are organized in key-value pair in the underlying storage layer.\nOne should notice that the values can be a multi-value."
    },
    "v1TagFamilyForWrite": {
      "type": "object",
      "properties": {
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TagValue"
          }
        }
      }
    },
    "v1TagProjection": {
      "type": "object",
      "properties": {
        "tagFamilies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1TagProjectionTagFamily"
          }
        }
      },
      "description": "TagProjection is used to select the names of keys to be returned."
    },
    "v1TagProjectionTagFamily": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1TagValue": {
      "type": "object",
      "properties": {
        "null": {
          "type": "string"
        },
        "str": {
          "$ref": "#/definitions/v1Str"
        },
        "strArray": {
          "$ref": "#/definitions/v1StrArray"
        },
        "int": {
          "$ref": "#/definitions/v1Int"
        },
        "intArray": {
          "$ref": "#/definitions/v1IntArray"
        },
        "binaryData": {
          "type": "string",
          "format": "byte"
        },
        "id": {
          "$ref": "#/definitions/v1ID"
        }
      }
    },
    "v1TimeRange": {
      "type": "object",
      "properties": {
        "begin": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "TimeRange is a range query for uint64,\nthe range here follows left-inclusive and right-exclusive rule, i.e. [begin, end) if both edges exist"
    },
    "v1WriteResponse": {
      "type": "object"
    }
  }
}
