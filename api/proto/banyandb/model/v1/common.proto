// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

package banyandb.model.v1;

import "google/protobuf/struct.proto";

option go_package = "github.com/apache/skywalking-banyandb/api/proto/banyandb/model/v1";
option java_package = "org.apache.skywalking.banyandb.model.v1";

message Str {
  string value = 1;
}

message Int {
  int64 value = 1;
}

message Float {
  double value = 1;
}

message StrArray {
  repeated string value = 1;
}

message IntArray {
  repeated int64 value = 1;
}

message TagValue {
  oneof value {
    google.protobuf.NullValue null = 1;
    Str str = 2;
    StrArray str_array = 3;
    Int int = 4;
    IntArray int_array = 5;
    bytes binary_data = 6;
  }
}

message TagFamilyForWrite {
  repeated TagValue tags = 1;
}

message FieldValue {
  oneof value {
    google.protobuf.NullValue null = 1;
    model.v1.Str str = 2;
    model.v1.Int int = 3;
    bytes binary_data = 4;
    model.v1.Float float = 5;
  }
}

enum AggregationFunction {
  AGGREGATION_FUNCTION_UNSPECIFIED = 0;
  AGGREGATION_FUNCTION_MEAN = 1;
  AGGREGATION_FUNCTION_MAX = 2;
  AGGREGATION_FUNCTION_MIN = 3;
  AGGREGATION_FUNCTION_COUNT = 4;
  AGGREGATION_FUNCTION_SUM = 5;
}

enum MeasureAggregate {
  MEASURE_AGGREGATE_UNSPECIFIED = 0;
  // Calculate the minimum value of delta measures.
  MEASURE_AGGREGATE_MIN = 1;
  // Calculate the maximum value of delta measures.
  MEASURE_AGGREGATE_MAX = 2;
  // Count the number of delta measures.
  MEASURE_AGGREGATE_COUNT = 3;
  // Calculate the sum value of delta measures.
  MEASURE_AGGREGATE_SUM = 4;
  // Calculate the average value of delta measures.
  MEASURE_AGGREGATE_AVG = 5;
  // Calculate the percentage of delta measures, where the input matches with the condition.
  MEASURE_AGGREGATE_PERCENT = 6;
  // Calculate the ratio for measures, where the input matches with the condition.
  MEASURE_AGGREGATE_RATE = 7;
  // Calculate the histogram for delta measures.
  MEASURE_AGGREGATE_HISTOGRAM = 8;
  // Calculate the {p99, p95, p90, p75, p50} for delta measures.
  MEASURE_AGGREGATE_PERCENTILE2 = 9;
  // Calculate the apdex for delta measures.
  MEASURE_AGGREGATE_APDEX = 10;
  // Same like PERCENTILE2, little different on algorithm.
  MEASURE_AGGREGATE_PERCENTILE = 11;
}
