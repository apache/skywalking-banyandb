// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

option java_package = "org.apache.skywalking.banyandb.database.v2";
option go_package = "github.com/apache/skywalking-banyandb/api/proto/banyandb/database/v2";

package banyandb.database.v2;

import "google/protobuf/timestamp.proto";
import "banyandb/common/v2/common.proto";

// Duration represents the elapsed time between two instants
message Duration {
    uint32 val = 1;
    enum DurationUnit {
        DURATION_UNIT_UNSPECIFIED = 0;
        DURATION_UNIT_HOUR = 1;
        DURATION_UNIT_DAY = 2;
        DURATION_UNIT_WEEK = 3;
        DURATION_UNIT_MONTH = 4;
    }
    DurationUnit unit = 2;
}

enum TagType {
    TAG_TYPE_UNSPECIFIED=0;
    TAG_TYPE_STRING = 1;
    TAG_TYPE_INT = 2;
    TAG_TYPE_STRING_ARRAY = 3;
    TAG_TYPE_INT_ARRAY = 4;
}

message TagSpec {
    string name = 1;
    TagType type = 2;
}

// Stream intends to store streaming data, for example, traces or logs
message Stream {
    // metadata is the identity of a trace series
    common.v2.Metadata metadata = 1;
    // tags defines accepted tags
    repeated TagSpec tags = 2;
    // entity indicates how to generate a series and shard a stream
    Entity entity = 3;
    // duration determines how long a TraceSeries keeps its data
    uint32 shard_num = 4;
    Duration duration = 5;
    // updated_at_nanoseconds indicates when the TraceSeries is updated
    google.protobuf.Timestamp updated_at = 6;
}

message Entity {
    repeated string tag_names = 1;
}

// IndexRule defines how to generate indices based on tags and the index type
// IndexRule should bind to a subject through an IndexRuleBinding to generate proper indices.
message IndexRule {
    // metadata define the rule's identity
    common.v2.Metadata metadata = 1;
    // tags are the combination that refers to an indexed object
    // If the elements in tags are more than 1, the object will generate a multi-tag index
    // Caveat: All tags in a multi-tag MUST have an identical IndexType
    repeated string tags = 2;
    // IndexType determine the index structure under the hood
    enum IndexType {
        INDEX_TYPE_UNSPECIFIED = 0;
        INDEX_TYPE_BLOCK_ATTACHED = 1;
        INDEX_TYPE_TRACE = 2;
    }
    // type is the IndexType of this IndexObject.
    IndexType type = 3;
    // updated_at_nanoseconds indicates when the IndexRule is updated
    google.protobuf.Timestamp updated_at = 6;
}

// Subject defines which stream or measure would generate indices
message Subject {
    // catalog is where the subject belongs to
    common.v2.Catalog catalog = 1;
    // name refers to a stream or measure in a particular catalog
    string name = 2;
}

// IndexRuleBinding is a bridge to connect severalIndexRules to a subject
// This binding is valid between begin_at_nanoseconds and expire_at_nanoseconds, that provides flexible strategies
// to control how to generate time series indices.
message IndexRuleBinding {
    // metadata is the identity of this binding
    common.v2.Metadata metadata = 1;
    // rules refers to the IndexRule
    repeated string rules = 2;
    // subjects indicate the subjects of binding action
    Subject subjects = 3;
    // begin_at_nanoseconds is the timestamp, after which the binding will be active
    google.protobuf.Timestamp begin_at = 4;
    // expire_at_nanoseconds it the timestamp, after which the binding will be inactive
    // expire_at_nanoseconds must be larger than begin_at_nanoseconds
    google.protobuf.Timestamp expire_at = 5;
    // updated_at_nanoseconds indicates when the IndexRuleBinding is updated
    google.protobuf.Timestamp updated_at = 6;
}
