// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: banyandb/database/v1/event.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ShardEvent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ShardEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShardEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ShardEventMultiError, or
// nil if none found.
func (m *ShardEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *ShardEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetShard()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShardEventValidationError{
					field:  "Shard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShardEventValidationError{
					field:  "Shard",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetShard()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShardEventValidationError{
				field:  "Shard",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ShardEventValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ShardEventValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ShardEventValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ShardEventMultiError(errors)
	}

	return nil
}

// ShardEventMultiError is an error wrapping multiple validation errors
// returned by ShardEvent.ValidateAll() if the designated constraints aren't met.
type ShardEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShardEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShardEventMultiError) AllErrors() []error { return m }

// ShardEventValidationError is the validation error returned by
// ShardEvent.Validate if the designated constraints aren't met.
type ShardEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShardEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShardEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShardEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShardEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShardEventValidationError) ErrorName() string { return "ShardEventValidationError" }

// Error satisfies the builtin error interface
func (e ShardEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShardEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShardEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShardEventValidationError{}

// Validate checks the field values on EntityEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EntityEvent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityEvent with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EntityEventMultiError, or
// nil if none found.
func (m *EntityEvent) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityEvent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSubject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityEventValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityEventValidationError{
					field:  "Subject",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSubject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityEventValidationError{
				field:  "Subject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetEntityLocator() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, EntityEventValidationError{
						field:  fmt.Sprintf("EntityLocator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, EntityEventValidationError{
						field:  fmt.Sprintf("EntityLocator[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return EntityEventValidationError{
					field:  fmt.Sprintf("EntityLocator[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EntityEventValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EntityEventValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EntityEventValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EntityEventMultiError(errors)
	}

	return nil
}

// EntityEventMultiError is an error wrapping multiple validation errors
// returned by EntityEvent.ValidateAll() if the designated constraints aren't met.
type EntityEventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityEventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityEventMultiError) AllErrors() []error { return m }

// EntityEventValidationError is the validation error returned by
// EntityEvent.Validate if the designated constraints aren't met.
type EntityEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityEventValidationError) ErrorName() string { return "EntityEventValidationError" }

// Error satisfies the builtin error interface
func (e EntityEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityEventValidationError{}

// Validate checks the field values on EntityEvent_TagLocator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EntityEvent_TagLocator) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EntityEvent_TagLocator with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EntityEvent_TagLocatorMultiError, or nil if none found.
func (m *EntityEvent_TagLocator) ValidateAll() error {
	return m.validate(true)
}

func (m *EntityEvent_TagLocator) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FamilyOffset

	// no validation rules for TagOffset

	if len(errors) > 0 {
		return EntityEvent_TagLocatorMultiError(errors)
	}

	return nil
}

// EntityEvent_TagLocatorMultiError is an error wrapping multiple validation
// errors returned by EntityEvent_TagLocator.ValidateAll() if the designated
// constraints aren't met.
type EntityEvent_TagLocatorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EntityEvent_TagLocatorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EntityEvent_TagLocatorMultiError) AllErrors() []error { return m }

// EntityEvent_TagLocatorValidationError is the validation error returned by
// EntityEvent_TagLocator.Validate if the designated constraints aren't met.
type EntityEvent_TagLocatorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EntityEvent_TagLocatorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EntityEvent_TagLocatorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EntityEvent_TagLocatorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EntityEvent_TagLocatorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EntityEvent_TagLocatorValidationError) ErrorName() string {
	return "EntityEvent_TagLocatorValidationError"
}

// Error satisfies the builtin error interface
func (e EntityEvent_TagLocatorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEntityEvent_TagLocator.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EntityEvent_TagLocatorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EntityEvent_TagLocatorValidationError{}
