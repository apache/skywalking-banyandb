// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        (unknown)
// source: banyandb/database/v1/rpc.proto

package v1

import (
	v1 "github.com/apache/skywalking-banyandb/api/proto/banyandb/common/v1"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamRegistryServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *StreamRegistryServiceCreateRequest) Reset() {
	*x = StreamRegistryServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRegistryServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRegistryServiceCreateRequest) ProtoMessage() {}

func (x *StreamRegistryServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRegistryServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*StreamRegistryServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *StreamRegistryServiceCreateRequest) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type StreamRegistryServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamRegistryServiceCreateResponse) Reset() {
	*x = StreamRegistryServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRegistryServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRegistryServiceCreateResponse) ProtoMessage() {}

func (x *StreamRegistryServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRegistryServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*StreamRegistryServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{1}
}

type StreamRegistryServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *StreamRegistryServiceUpdateRequest) Reset() {
	*x = StreamRegistryServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRegistryServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRegistryServiceUpdateRequest) ProtoMessage() {}

func (x *StreamRegistryServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRegistryServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*StreamRegistryServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *StreamRegistryServiceUpdateRequest) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type StreamRegistryServiceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamRegistryServiceUpdateResponse) Reset() {
	*x = StreamRegistryServiceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRegistryServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRegistryServiceUpdateResponse) ProtoMessage() {}

func (x *StreamRegistryServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRegistryServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*StreamRegistryServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{3}
}

type StreamRegistryServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *StreamRegistryServiceDeleteRequest) Reset() {
	*x = StreamRegistryServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRegistryServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRegistryServiceDeleteRequest) ProtoMessage() {}

func (x *StreamRegistryServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRegistryServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*StreamRegistryServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *StreamRegistryServiceDeleteRequest) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type StreamRegistryServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *StreamRegistryServiceDeleteResponse) Reset() {
	*x = StreamRegistryServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRegistryServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRegistryServiceDeleteResponse) ProtoMessage() {}

func (x *StreamRegistryServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRegistryServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*StreamRegistryServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *StreamRegistryServiceDeleteResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type StreamRegistryServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *StreamRegistryServiceGetRequest) Reset() {
	*x = StreamRegistryServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRegistryServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRegistryServiceGetRequest) ProtoMessage() {}

func (x *StreamRegistryServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRegistryServiceGetRequest.ProtoReflect.Descriptor instead.
func (*StreamRegistryServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *StreamRegistryServiceGetRequest) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type StreamRegistryServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream *Stream `protobuf:"bytes,1,opt,name=stream,proto3" json:"stream,omitempty"`
}

func (x *StreamRegistryServiceGetResponse) Reset() {
	*x = StreamRegistryServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRegistryServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRegistryServiceGetResponse) ProtoMessage() {}

func (x *StreamRegistryServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRegistryServiceGetResponse.ProtoReflect.Descriptor instead.
func (*StreamRegistryServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *StreamRegistryServiceGetResponse) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type StreamRegistryServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *StreamRegistryServiceListRequest) Reset() {
	*x = StreamRegistryServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRegistryServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRegistryServiceListRequest) ProtoMessage() {}

func (x *StreamRegistryServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRegistryServiceListRequest.ProtoReflect.Descriptor instead.
func (*StreamRegistryServiceListRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *StreamRegistryServiceListRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type StreamRegistryServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stream []*Stream `protobuf:"bytes,1,rep,name=stream,proto3" json:"stream,omitempty"`
}

func (x *StreamRegistryServiceListResponse) Reset() {
	*x = StreamRegistryServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRegistryServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRegistryServiceListResponse) ProtoMessage() {}

func (x *StreamRegistryServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRegistryServiceListResponse.ProtoReflect.Descriptor instead.
func (*StreamRegistryServiceListResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *StreamRegistryServiceListResponse) GetStream() []*Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

type IndexRuleBindingRegistryServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexRuleBinding *IndexRuleBinding `protobuf:"bytes,1,opt,name=index_rule_binding,json=indexRuleBinding,proto3" json:"index_rule_binding,omitempty"`
}

func (x *IndexRuleBindingRegistryServiceCreateRequest) Reset() {
	*x = IndexRuleBindingRegistryServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBindingRegistryServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBindingRegistryServiceCreateRequest) ProtoMessage() {}

func (x *IndexRuleBindingRegistryServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBindingRegistryServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*IndexRuleBindingRegistryServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *IndexRuleBindingRegistryServiceCreateRequest) GetIndexRuleBinding() *IndexRuleBinding {
	if x != nil {
		return x.IndexRuleBinding
	}
	return nil
}

type IndexRuleBindingRegistryServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IndexRuleBindingRegistryServiceCreateResponse) Reset() {
	*x = IndexRuleBindingRegistryServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBindingRegistryServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBindingRegistryServiceCreateResponse) ProtoMessage() {}

func (x *IndexRuleBindingRegistryServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBindingRegistryServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*IndexRuleBindingRegistryServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{11}
}

type IndexRuleBindingRegistryServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexRuleBinding *IndexRuleBinding `protobuf:"bytes,1,opt,name=index_rule_binding,json=indexRuleBinding,proto3" json:"index_rule_binding,omitempty"`
}

func (x *IndexRuleBindingRegistryServiceUpdateRequest) Reset() {
	*x = IndexRuleBindingRegistryServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBindingRegistryServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBindingRegistryServiceUpdateRequest) ProtoMessage() {}

func (x *IndexRuleBindingRegistryServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBindingRegistryServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*IndexRuleBindingRegistryServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *IndexRuleBindingRegistryServiceUpdateRequest) GetIndexRuleBinding() *IndexRuleBinding {
	if x != nil {
		return x.IndexRuleBinding
	}
	return nil
}

type IndexRuleBindingRegistryServiceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IndexRuleBindingRegistryServiceUpdateResponse) Reset() {
	*x = IndexRuleBindingRegistryServiceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBindingRegistryServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBindingRegistryServiceUpdateResponse) ProtoMessage() {}

func (x *IndexRuleBindingRegistryServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBindingRegistryServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*IndexRuleBindingRegistryServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{13}
}

type IndexRuleBindingRegistryServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *IndexRuleBindingRegistryServiceDeleteRequest) Reset() {
	*x = IndexRuleBindingRegistryServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBindingRegistryServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBindingRegistryServiceDeleteRequest) ProtoMessage() {}

func (x *IndexRuleBindingRegistryServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBindingRegistryServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*IndexRuleBindingRegistryServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *IndexRuleBindingRegistryServiceDeleteRequest) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type IndexRuleBindingRegistryServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *IndexRuleBindingRegistryServiceDeleteResponse) Reset() {
	*x = IndexRuleBindingRegistryServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBindingRegistryServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBindingRegistryServiceDeleteResponse) ProtoMessage() {}

func (x *IndexRuleBindingRegistryServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBindingRegistryServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*IndexRuleBindingRegistryServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *IndexRuleBindingRegistryServiceDeleteResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type IndexRuleBindingRegistryServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *IndexRuleBindingRegistryServiceGetRequest) Reset() {
	*x = IndexRuleBindingRegistryServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBindingRegistryServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBindingRegistryServiceGetRequest) ProtoMessage() {}

func (x *IndexRuleBindingRegistryServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBindingRegistryServiceGetRequest.ProtoReflect.Descriptor instead.
func (*IndexRuleBindingRegistryServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *IndexRuleBindingRegistryServiceGetRequest) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type IndexRuleBindingRegistryServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexRuleBinding *IndexRuleBinding `protobuf:"bytes,1,opt,name=index_rule_binding,json=indexRuleBinding,proto3" json:"index_rule_binding,omitempty"`
}

func (x *IndexRuleBindingRegistryServiceGetResponse) Reset() {
	*x = IndexRuleBindingRegistryServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBindingRegistryServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBindingRegistryServiceGetResponse) ProtoMessage() {}

func (x *IndexRuleBindingRegistryServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBindingRegistryServiceGetResponse.ProtoReflect.Descriptor instead.
func (*IndexRuleBindingRegistryServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *IndexRuleBindingRegistryServiceGetResponse) GetIndexRuleBinding() *IndexRuleBinding {
	if x != nil {
		return x.IndexRuleBinding
	}
	return nil
}

type IndexRuleBindingRegistryServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *IndexRuleBindingRegistryServiceListRequest) Reset() {
	*x = IndexRuleBindingRegistryServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBindingRegistryServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBindingRegistryServiceListRequest) ProtoMessage() {}

func (x *IndexRuleBindingRegistryServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBindingRegistryServiceListRequest.ProtoReflect.Descriptor instead.
func (*IndexRuleBindingRegistryServiceListRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *IndexRuleBindingRegistryServiceListRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type IndexRuleBindingRegistryServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexRuleBinding []*IndexRuleBinding `protobuf:"bytes,1,rep,name=index_rule_binding,json=indexRuleBinding,proto3" json:"index_rule_binding,omitempty"`
}

func (x *IndexRuleBindingRegistryServiceListResponse) Reset() {
	*x = IndexRuleBindingRegistryServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBindingRegistryServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBindingRegistryServiceListResponse) ProtoMessage() {}

func (x *IndexRuleBindingRegistryServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBindingRegistryServiceListResponse.ProtoReflect.Descriptor instead.
func (*IndexRuleBindingRegistryServiceListResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *IndexRuleBindingRegistryServiceListResponse) GetIndexRuleBinding() []*IndexRuleBinding {
	if x != nil {
		return x.IndexRuleBinding
	}
	return nil
}

type IndexRuleRegistryServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexRule *IndexRule `protobuf:"bytes,1,opt,name=index_rule,json=indexRule,proto3" json:"index_rule,omitempty"`
}

func (x *IndexRuleRegistryServiceCreateRequest) Reset() {
	*x = IndexRuleRegistryServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleRegistryServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleRegistryServiceCreateRequest) ProtoMessage() {}

func (x *IndexRuleRegistryServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleRegistryServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*IndexRuleRegistryServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *IndexRuleRegistryServiceCreateRequest) GetIndexRule() *IndexRule {
	if x != nil {
		return x.IndexRule
	}
	return nil
}

type IndexRuleRegistryServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IndexRuleRegistryServiceCreateResponse) Reset() {
	*x = IndexRuleRegistryServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleRegistryServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleRegistryServiceCreateResponse) ProtoMessage() {}

func (x *IndexRuleRegistryServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleRegistryServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*IndexRuleRegistryServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{21}
}

type IndexRuleRegistryServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexRule *IndexRule `protobuf:"bytes,1,opt,name=index_rule,json=indexRule,proto3" json:"index_rule,omitempty"`
}

func (x *IndexRuleRegistryServiceUpdateRequest) Reset() {
	*x = IndexRuleRegistryServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleRegistryServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleRegistryServiceUpdateRequest) ProtoMessage() {}

func (x *IndexRuleRegistryServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleRegistryServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*IndexRuleRegistryServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *IndexRuleRegistryServiceUpdateRequest) GetIndexRule() *IndexRule {
	if x != nil {
		return x.IndexRule
	}
	return nil
}

type IndexRuleRegistryServiceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IndexRuleRegistryServiceUpdateResponse) Reset() {
	*x = IndexRuleRegistryServiceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleRegistryServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleRegistryServiceUpdateResponse) ProtoMessage() {}

func (x *IndexRuleRegistryServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleRegistryServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*IndexRuleRegistryServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{23}
}

type IndexRuleRegistryServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *IndexRuleRegistryServiceDeleteRequest) Reset() {
	*x = IndexRuleRegistryServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleRegistryServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleRegistryServiceDeleteRequest) ProtoMessage() {}

func (x *IndexRuleRegistryServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleRegistryServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*IndexRuleRegistryServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *IndexRuleRegistryServiceDeleteRequest) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type IndexRuleRegistryServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *IndexRuleRegistryServiceDeleteResponse) Reset() {
	*x = IndexRuleRegistryServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleRegistryServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleRegistryServiceDeleteResponse) ProtoMessage() {}

func (x *IndexRuleRegistryServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleRegistryServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*IndexRuleRegistryServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *IndexRuleRegistryServiceDeleteResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type IndexRuleRegistryServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *IndexRuleRegistryServiceGetRequest) Reset() {
	*x = IndexRuleRegistryServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleRegistryServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleRegistryServiceGetRequest) ProtoMessage() {}

func (x *IndexRuleRegistryServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleRegistryServiceGetRequest.ProtoReflect.Descriptor instead.
func (*IndexRuleRegistryServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *IndexRuleRegistryServiceGetRequest) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type IndexRuleRegistryServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexRule *IndexRule `protobuf:"bytes,1,opt,name=index_rule,json=indexRule,proto3" json:"index_rule,omitempty"`
}

func (x *IndexRuleRegistryServiceGetResponse) Reset() {
	*x = IndexRuleRegistryServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleRegistryServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleRegistryServiceGetResponse) ProtoMessage() {}

func (x *IndexRuleRegistryServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleRegistryServiceGetResponse.ProtoReflect.Descriptor instead.
func (*IndexRuleRegistryServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *IndexRuleRegistryServiceGetResponse) GetIndexRule() *IndexRule {
	if x != nil {
		return x.IndexRule
	}
	return nil
}

type IndexRuleRegistryServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *IndexRuleRegistryServiceListRequest) Reset() {
	*x = IndexRuleRegistryServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleRegistryServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleRegistryServiceListRequest) ProtoMessage() {}

func (x *IndexRuleRegistryServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleRegistryServiceListRequest.ProtoReflect.Descriptor instead.
func (*IndexRuleRegistryServiceListRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{28}
}

func (x *IndexRuleRegistryServiceListRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type IndexRuleRegistryServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IndexRule []*IndexRule `protobuf:"bytes,1,rep,name=index_rule,json=indexRule,proto3" json:"index_rule,omitempty"`
}

func (x *IndexRuleRegistryServiceListResponse) Reset() {
	*x = IndexRuleRegistryServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleRegistryServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleRegistryServiceListResponse) ProtoMessage() {}

func (x *IndexRuleRegistryServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleRegistryServiceListResponse.ProtoReflect.Descriptor instead.
func (*IndexRuleRegistryServiceListResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{29}
}

func (x *IndexRuleRegistryServiceListResponse) GetIndexRule() []*IndexRule {
	if x != nil {
		return x.IndexRule
	}
	return nil
}

type MeasureRegistryServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measure *Measure `protobuf:"bytes,1,opt,name=measure,proto3" json:"measure,omitempty"`
}

func (x *MeasureRegistryServiceCreateRequest) Reset() {
	*x = MeasureRegistryServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureRegistryServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRegistryServiceCreateRequest) ProtoMessage() {}

func (x *MeasureRegistryServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRegistryServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*MeasureRegistryServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{30}
}

func (x *MeasureRegistryServiceCreateRequest) GetMeasure() *Measure {
	if x != nil {
		return x.Measure
	}
	return nil
}

type MeasureRegistryServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeasureRegistryServiceCreateResponse) Reset() {
	*x = MeasureRegistryServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureRegistryServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRegistryServiceCreateResponse) ProtoMessage() {}

func (x *MeasureRegistryServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRegistryServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*MeasureRegistryServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{31}
}

type MeasureRegistryServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measure *Measure `protobuf:"bytes,1,opt,name=measure,proto3" json:"measure,omitempty"`
}

func (x *MeasureRegistryServiceUpdateRequest) Reset() {
	*x = MeasureRegistryServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureRegistryServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRegistryServiceUpdateRequest) ProtoMessage() {}

func (x *MeasureRegistryServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRegistryServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*MeasureRegistryServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{32}
}

func (x *MeasureRegistryServiceUpdateRequest) GetMeasure() *Measure {
	if x != nil {
		return x.Measure
	}
	return nil
}

type MeasureRegistryServiceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MeasureRegistryServiceUpdateResponse) Reset() {
	*x = MeasureRegistryServiceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureRegistryServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRegistryServiceUpdateResponse) ProtoMessage() {}

func (x *MeasureRegistryServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRegistryServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*MeasureRegistryServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{33}
}

type MeasureRegistryServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MeasureRegistryServiceDeleteRequest) Reset() {
	*x = MeasureRegistryServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureRegistryServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRegistryServiceDeleteRequest) ProtoMessage() {}

func (x *MeasureRegistryServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRegistryServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*MeasureRegistryServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{34}
}

func (x *MeasureRegistryServiceDeleteRequest) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MeasureRegistryServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *MeasureRegistryServiceDeleteResponse) Reset() {
	*x = MeasureRegistryServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureRegistryServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRegistryServiceDeleteResponse) ProtoMessage() {}

func (x *MeasureRegistryServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRegistryServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*MeasureRegistryServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{35}
}

func (x *MeasureRegistryServiceDeleteResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type MeasureRegistryServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *MeasureRegistryServiceGetRequest) Reset() {
	*x = MeasureRegistryServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureRegistryServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRegistryServiceGetRequest) ProtoMessage() {}

func (x *MeasureRegistryServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRegistryServiceGetRequest.ProtoReflect.Descriptor instead.
func (*MeasureRegistryServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{36}
}

func (x *MeasureRegistryServiceGetRequest) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type MeasureRegistryServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measure *Measure `protobuf:"bytes,1,opt,name=measure,proto3" json:"measure,omitempty"`
}

func (x *MeasureRegistryServiceGetResponse) Reset() {
	*x = MeasureRegistryServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureRegistryServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRegistryServiceGetResponse) ProtoMessage() {}

func (x *MeasureRegistryServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRegistryServiceGetResponse.ProtoReflect.Descriptor instead.
func (*MeasureRegistryServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{37}
}

func (x *MeasureRegistryServiceGetResponse) GetMeasure() *Measure {
	if x != nil {
		return x.Measure
	}
	return nil
}

type MeasureRegistryServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *MeasureRegistryServiceListRequest) Reset() {
	*x = MeasureRegistryServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureRegistryServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRegistryServiceListRequest) ProtoMessage() {}

func (x *MeasureRegistryServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRegistryServiceListRequest.ProtoReflect.Descriptor instead.
func (*MeasureRegistryServiceListRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{38}
}

func (x *MeasureRegistryServiceListRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type MeasureRegistryServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Measure []*Measure `protobuf:"bytes,1,rep,name=measure,proto3" json:"measure,omitempty"`
}

func (x *MeasureRegistryServiceListResponse) Reset() {
	*x = MeasureRegistryServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeasureRegistryServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeasureRegistryServiceListResponse) ProtoMessage() {}

func (x *MeasureRegistryServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeasureRegistryServiceListResponse.ProtoReflect.Descriptor instead.
func (*MeasureRegistryServiceListResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{39}
}

func (x *MeasureRegistryServiceListResponse) GetMeasure() []*Measure {
	if x != nil {
		return x.Measure
	}
	return nil
}

type GroupRegistryServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *v1.Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupRegistryServiceCreateRequest) Reset() {
	*x = GroupRegistryServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistryServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistryServiceCreateRequest) ProtoMessage() {}

func (x *GroupRegistryServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistryServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*GroupRegistryServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{40}
}

func (x *GroupRegistryServiceCreateRequest) GetGroup() *v1.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type GroupRegistryServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GroupRegistryServiceCreateResponse) Reset() {
	*x = GroupRegistryServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistryServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistryServiceCreateResponse) ProtoMessage() {}

func (x *GroupRegistryServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistryServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*GroupRegistryServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{41}
}

type GroupRegistryServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *v1.Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupRegistryServiceUpdateRequest) Reset() {
	*x = GroupRegistryServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistryServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistryServiceUpdateRequest) ProtoMessage() {}

func (x *GroupRegistryServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistryServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*GroupRegistryServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{42}
}

func (x *GroupRegistryServiceUpdateRequest) GetGroup() *v1.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type GroupRegistryServiceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GroupRegistryServiceUpdateResponse) Reset() {
	*x = GroupRegistryServiceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistryServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistryServiceUpdateResponse) ProtoMessage() {}

func (x *GroupRegistryServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistryServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*GroupRegistryServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{43}
}

type GroupRegistryServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupRegistryServiceDeleteRequest) Reset() {
	*x = GroupRegistryServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistryServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistryServiceDeleteRequest) ProtoMessage() {}

func (x *GroupRegistryServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistryServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*GroupRegistryServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{44}
}

func (x *GroupRegistryServiceDeleteRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type GroupRegistryServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *GroupRegistryServiceDeleteResponse) Reset() {
	*x = GroupRegistryServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistryServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistryServiceDeleteResponse) ProtoMessage() {}

func (x *GroupRegistryServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistryServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*GroupRegistryServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{45}
}

func (x *GroupRegistryServiceDeleteResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type GroupRegistryServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupRegistryServiceGetRequest) Reset() {
	*x = GroupRegistryServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistryServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistryServiceGetRequest) ProtoMessage() {}

func (x *GroupRegistryServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistryServiceGetRequest.ProtoReflect.Descriptor instead.
func (*GroupRegistryServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{46}
}

func (x *GroupRegistryServiceGetRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type GroupRegistryServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *v1.Group `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupRegistryServiceGetResponse) Reset() {
	*x = GroupRegistryServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistryServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistryServiceGetResponse) ProtoMessage() {}

func (x *GroupRegistryServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistryServiceGetResponse.ProtoReflect.Descriptor instead.
func (*GroupRegistryServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{47}
}

func (x *GroupRegistryServiceGetResponse) GetGroup() *v1.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type GroupRegistryServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GroupRegistryServiceListRequest) Reset() {
	*x = GroupRegistryServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistryServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistryServiceListRequest) ProtoMessage() {}

func (x *GroupRegistryServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistryServiceListRequest.ProtoReflect.Descriptor instead.
func (*GroupRegistryServiceListRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{48}
}

type GroupRegistryServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group []*v1.Group `protobuf:"bytes,1,rep,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupRegistryServiceListResponse) Reset() {
	*x = GroupRegistryServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupRegistryServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupRegistryServiceListResponse) ProtoMessage() {}

func (x *GroupRegistryServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupRegistryServiceListResponse.ProtoReflect.Descriptor instead.
func (*GroupRegistryServiceListResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{49}
}

func (x *GroupRegistryServiceListResponse) GetGroup() []*v1.Group {
	if x != nil {
		return x.Group
	}
	return nil
}

type TopNAggregationRegistryServiceCreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopNAggregation *TopNAggregation `protobuf:"bytes,1,opt,name=top_n_aggregation,json=topNAggregation,proto3" json:"top_n_aggregation,omitempty"`
}

func (x *TopNAggregationRegistryServiceCreateRequest) Reset() {
	*x = TopNAggregationRegistryServiceCreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNAggregationRegistryServiceCreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNAggregationRegistryServiceCreateRequest) ProtoMessage() {}

func (x *TopNAggregationRegistryServiceCreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNAggregationRegistryServiceCreateRequest.ProtoReflect.Descriptor instead.
func (*TopNAggregationRegistryServiceCreateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{50}
}

func (x *TopNAggregationRegistryServiceCreateRequest) GetTopNAggregation() *TopNAggregation {
	if x != nil {
		return x.TopNAggregation
	}
	return nil
}

type TopNAggregationRegistryServiceCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TopNAggregationRegistryServiceCreateResponse) Reset() {
	*x = TopNAggregationRegistryServiceCreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNAggregationRegistryServiceCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNAggregationRegistryServiceCreateResponse) ProtoMessage() {}

func (x *TopNAggregationRegistryServiceCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNAggregationRegistryServiceCreateResponse.ProtoReflect.Descriptor instead.
func (*TopNAggregationRegistryServiceCreateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{51}
}

type TopNAggregationRegistryServiceUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopNAggregation *TopNAggregation `protobuf:"bytes,1,opt,name=top_n_aggregation,json=topNAggregation,proto3" json:"top_n_aggregation,omitempty"`
}

func (x *TopNAggregationRegistryServiceUpdateRequest) Reset() {
	*x = TopNAggregationRegistryServiceUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNAggregationRegistryServiceUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNAggregationRegistryServiceUpdateRequest) ProtoMessage() {}

func (x *TopNAggregationRegistryServiceUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNAggregationRegistryServiceUpdateRequest.ProtoReflect.Descriptor instead.
func (*TopNAggregationRegistryServiceUpdateRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{52}
}

func (x *TopNAggregationRegistryServiceUpdateRequest) GetTopNAggregation() *TopNAggregation {
	if x != nil {
		return x.TopNAggregation
	}
	return nil
}

type TopNAggregationRegistryServiceUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TopNAggregationRegistryServiceUpdateResponse) Reset() {
	*x = TopNAggregationRegistryServiceUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNAggregationRegistryServiceUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNAggregationRegistryServiceUpdateResponse) ProtoMessage() {}

func (x *TopNAggregationRegistryServiceUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNAggregationRegistryServiceUpdateResponse.ProtoReflect.Descriptor instead.
func (*TopNAggregationRegistryServiceUpdateResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{53}
}

type TopNAggregationRegistryServiceDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TopNAggregationRegistryServiceDeleteRequest) Reset() {
	*x = TopNAggregationRegistryServiceDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNAggregationRegistryServiceDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNAggregationRegistryServiceDeleteRequest) ProtoMessage() {}

func (x *TopNAggregationRegistryServiceDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNAggregationRegistryServiceDeleteRequest.ProtoReflect.Descriptor instead.
func (*TopNAggregationRegistryServiceDeleteRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{54}
}

func (x *TopNAggregationRegistryServiceDeleteRequest) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type TopNAggregationRegistryServiceDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted bool `protobuf:"varint,1,opt,name=deleted,proto3" json:"deleted,omitempty"`
}

func (x *TopNAggregationRegistryServiceDeleteResponse) Reset() {
	*x = TopNAggregationRegistryServiceDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNAggregationRegistryServiceDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNAggregationRegistryServiceDeleteResponse) ProtoMessage() {}

func (x *TopNAggregationRegistryServiceDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNAggregationRegistryServiceDeleteResponse.ProtoReflect.Descriptor instead.
func (*TopNAggregationRegistryServiceDeleteResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{55}
}

func (x *TopNAggregationRegistryServiceDeleteResponse) GetDeleted() bool {
	if x != nil {
		return x.Deleted
	}
	return false
}

type TopNAggregationRegistryServiceGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *TopNAggregationRegistryServiceGetRequest) Reset() {
	*x = TopNAggregationRegistryServiceGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNAggregationRegistryServiceGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNAggregationRegistryServiceGetRequest) ProtoMessage() {}

func (x *TopNAggregationRegistryServiceGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNAggregationRegistryServiceGetRequest.ProtoReflect.Descriptor instead.
func (*TopNAggregationRegistryServiceGetRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{56}
}

func (x *TopNAggregationRegistryServiceGetRequest) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type TopNAggregationRegistryServiceGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopNAggregation *TopNAggregation `protobuf:"bytes,1,opt,name=top_n_aggregation,json=topNAggregation,proto3" json:"top_n_aggregation,omitempty"`
}

func (x *TopNAggregationRegistryServiceGetResponse) Reset() {
	*x = TopNAggregationRegistryServiceGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNAggregationRegistryServiceGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNAggregationRegistryServiceGetResponse) ProtoMessage() {}

func (x *TopNAggregationRegistryServiceGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNAggregationRegistryServiceGetResponse.ProtoReflect.Descriptor instead.
func (*TopNAggregationRegistryServiceGetResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{57}
}

func (x *TopNAggregationRegistryServiceGetResponse) GetTopNAggregation() *TopNAggregation {
	if x != nil {
		return x.TopNAggregation
	}
	return nil
}

type TopNAggregationRegistryServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
}

func (x *TopNAggregationRegistryServiceListRequest) Reset() {
	*x = TopNAggregationRegistryServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNAggregationRegistryServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNAggregationRegistryServiceListRequest) ProtoMessage() {}

func (x *TopNAggregationRegistryServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNAggregationRegistryServiceListRequest.ProtoReflect.Descriptor instead.
func (*TopNAggregationRegistryServiceListRequest) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{58}
}

func (x *TopNAggregationRegistryServiceListRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type TopNAggregationRegistryServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopNAggregation []*TopNAggregation `protobuf:"bytes,1,rep,name=top_n_aggregation,json=topNAggregation,proto3" json:"top_n_aggregation,omitempty"`
}

func (x *TopNAggregationRegistryServiceListResponse) Reset() {
	*x = TopNAggregationRegistryServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_database_v1_rpc_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopNAggregationRegistryServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopNAggregationRegistryServiceListResponse) ProtoMessage() {}

func (x *TopNAggregationRegistryServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_database_v1_rpc_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopNAggregationRegistryServiceListResponse.ProtoReflect.Descriptor instead.
func (*TopNAggregationRegistryServiceListResponse) Descriptor() ([]byte, []int) {
	return file_banyandb_database_v1_rpc_proto_rawDescGZIP(), []int{59}
}

func (x *TopNAggregationRegistryServiceListResponse) GetTopNAggregation() []*TopNAggregation {
	if x != nil {
		return x.TopNAggregation
	}
	return nil
}

var File_banyandb_database_v1_rpc_proto protoreflect.FileDescriptor

var file_banyandb_database_v1_rpc_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x21, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x22, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a, 0x22, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x25, 0x0a, 0x23, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e,
	0x0a, 0x22, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3f,
	0x0a, 0x23, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0x5b, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x20,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x38, 0x0a, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x59, 0x0a, 0x21, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x22, 0x84, 0x01, 0x0a, 0x2c,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x12,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x22, 0x2f, 0x0a, 0x2d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x2c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x2f, 0x0a, 0x2d, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a, 0x2c, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x49, 0x0a, 0x2d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75,
	0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x22, 0x65, 0x0a, 0x29, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x82, 0x01, 0x0a, 0x2a, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x42, 0x0a, 0x2a,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x83, 0x01, 0x0a, 0x2b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x54, 0x0a, 0x12, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x62,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62,
	0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x67, 0x0a, 0x25, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0x28, 0x0a, 0x26, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x25, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75,
	0x6c, 0x65, 0x22, 0x28, 0x0a, 0x26, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61, 0x0a, 0x25,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e,
	0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x42, 0x0a, 0x26, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x22, 0x5e, 0x0a, 0x22, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x65, 0x0a, 0x23, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x3b, 0x0a, 0x23, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x66, 0x0a, 0x24, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x22,
	0x5e, 0x0a, 0x23, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e,
	0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x22,
	0x26, 0x0a, 0x24, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x23, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x22, 0x26, 0x0a, 0x24, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5f, 0x0a, 0x23, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x40, 0x0a, 0x24, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x22, 0x5c, 0x0a, 0x20, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x5c, 0x0a, 0x21, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x22, 0x39,
	0x0a, 0x21, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x5d, 0x0a, 0x22, 0x4d, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x22, 0x54, 0x0a, 0x21, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x24,
	0x0a, 0x22, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x54, 0x0a, 0x21, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x24, 0x0a, 0x22, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x39, 0x0a, 0x21, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3e, 0x0a, 0x22, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x36, 0x0a, 0x1e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0x52, 0x0a, 0x1f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x21, 0x0a, 0x1f, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x20, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22,
	0x80, 0x01, 0x0a, 0x2b, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x51, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x61, 0x6e,
	0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x2c, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x2b, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2e, 0x0a, 0x2c, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x2b, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x48,
	0x0a, 0x2c, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x28, 0x54, 0x6f, 0x70, 0x4e,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7e,
	0x0a, 0x29, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x11, 0x74,
	0x6f, 0x70, 0x5f, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x74,
	0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41,
	0x0a, 0x29, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x22, 0x7f, 0x0a, 0x2a, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x51, 0x0a, 0x11, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x5f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x61, 0x6e,
	0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x74, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x94, 0x07, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e,
	0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0xca, 0x01, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x38, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x45, 0x1a, 0x40, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xb9, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x38, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x62,
	0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x2a,
	0x32, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0xb0, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x35, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x34, 0x12, 0x32, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x36, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e,
	0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x6c, 0x69, 0x73, 0x74,
	0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x32, 0xd6, 0x08, 0x0a, 0x1f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xbb, 0x01,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x42, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x62,
	0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0x82, 0x02, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x42, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x62, 0x61, 0x6e,
	0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x6f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x69, 0x1a, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a,
	0x12, 0xd9, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x42, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65,
	0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x2a, 0x3e, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xd0, 0x01, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x3f, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12,
	0x3e, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f,
	0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12,
	0xc0, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x62, 0x61, 0x6e,
	0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x12, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x7d, 0x32, 0xd1, 0x07, 0x0a, 0x18, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0xa5, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x2e, 0x62, 0x61, 0x6e,
	0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e,
	0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f,
	0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x3a, 0x01, 0x2a, 0x12, 0xdc, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x3b, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x51, 0x1a, 0x4c, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x2d, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xc3, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x3b, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x38, 0x2a, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2d,
	0x72, 0x75, 0x6c, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xba, 0x01, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x38, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x38, 0x12, 0x36, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xaa, 0x01, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x39, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e,
	0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2d, 0x72, 0x75, 0x6c,
	0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x32, 0xa6, 0x07, 0x0a, 0x16, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x9e, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x39, 0x2e, 0x62,
	0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e,
	0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x3a,
	0x01, 0x2a, 0x12, 0xcf, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x39, 0x2e,
	0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x48, 0x1a, 0x43, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x2f, 0x7b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0xbc, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x39, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x62, 0x61, 0x6e,
	0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x2a, 0x33,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61,
	0x6d, 0x65, 0x7d, 0x12, 0xb3, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x36, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x35, 0x12, 0x33, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x2f, 0x7b, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa3, 0x01, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x37, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x32,
	0xc8, 0x06, 0x0a, 0x14, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x98, 0x01, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x62,
	0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x3a, 0x01, 0x2a, 0x12, 0xc5, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x37,
	0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e,
	0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x1a, 0x3d, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x7d, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x9d, 0x01, 0x0a, 0x06,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x37, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x2a, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x7d, 0x12, 0x94, 0x01, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x34, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x62, 0x61, 0x6e, 0x79,
	0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x7b, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x7d, 0x12, 0x95, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x36, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x32, 0xeb, 0x05, 0x0a, 0x1e, 0x54,
	0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x01,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x41, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8f, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x41, 0x2e, 0x62, 0x61, 0x6e,
	0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e,
	0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x8f, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x41, 0x2e, 0x62,
	0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x42, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x3e, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a,
	0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x4e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x7b, 0x0a, 0x2a, 0x6f, 0x72, 0x67, 0x2e,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c,
	0x6b, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62,
	0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x92, 0x41, 0x06, 0x22,
	0x04, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_banyandb_database_v1_rpc_proto_rawDescOnce sync.Once
	file_banyandb_database_v1_rpc_proto_rawDescData = file_banyandb_database_v1_rpc_proto_rawDesc
)

func file_banyandb_database_v1_rpc_proto_rawDescGZIP() []byte {
	file_banyandb_database_v1_rpc_proto_rawDescOnce.Do(func() {
		file_banyandb_database_v1_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_banyandb_database_v1_rpc_proto_rawDescData)
	})
	return file_banyandb_database_v1_rpc_proto_rawDescData
}

var file_banyandb_database_v1_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_banyandb_database_v1_rpc_proto_goTypes = []interface{}{
	(*StreamRegistryServiceCreateRequest)(nil),            // 0: banyandb.database.v1.StreamRegistryServiceCreateRequest
	(*StreamRegistryServiceCreateResponse)(nil),           // 1: banyandb.database.v1.StreamRegistryServiceCreateResponse
	(*StreamRegistryServiceUpdateRequest)(nil),            // 2: banyandb.database.v1.StreamRegistryServiceUpdateRequest
	(*StreamRegistryServiceUpdateResponse)(nil),           // 3: banyandb.database.v1.StreamRegistryServiceUpdateResponse
	(*StreamRegistryServiceDeleteRequest)(nil),            // 4: banyandb.database.v1.StreamRegistryServiceDeleteRequest
	(*StreamRegistryServiceDeleteResponse)(nil),           // 5: banyandb.database.v1.StreamRegistryServiceDeleteResponse
	(*StreamRegistryServiceGetRequest)(nil),               // 6: banyandb.database.v1.StreamRegistryServiceGetRequest
	(*StreamRegistryServiceGetResponse)(nil),              // 7: banyandb.database.v1.StreamRegistryServiceGetResponse
	(*StreamRegistryServiceListRequest)(nil),              // 8: banyandb.database.v1.StreamRegistryServiceListRequest
	(*StreamRegistryServiceListResponse)(nil),             // 9: banyandb.database.v1.StreamRegistryServiceListResponse
	(*IndexRuleBindingRegistryServiceCreateRequest)(nil),  // 10: banyandb.database.v1.IndexRuleBindingRegistryServiceCreateRequest
	(*IndexRuleBindingRegistryServiceCreateResponse)(nil), // 11: banyandb.database.v1.IndexRuleBindingRegistryServiceCreateResponse
	(*IndexRuleBindingRegistryServiceUpdateRequest)(nil),  // 12: banyandb.database.v1.IndexRuleBindingRegistryServiceUpdateRequest
	(*IndexRuleBindingRegistryServiceUpdateResponse)(nil), // 13: banyandb.database.v1.IndexRuleBindingRegistryServiceUpdateResponse
	(*IndexRuleBindingRegistryServiceDeleteRequest)(nil),  // 14: banyandb.database.v1.IndexRuleBindingRegistryServiceDeleteRequest
	(*IndexRuleBindingRegistryServiceDeleteResponse)(nil), // 15: banyandb.database.v1.IndexRuleBindingRegistryServiceDeleteResponse
	(*IndexRuleBindingRegistryServiceGetRequest)(nil),     // 16: banyandb.database.v1.IndexRuleBindingRegistryServiceGetRequest
	(*IndexRuleBindingRegistryServiceGetResponse)(nil),    // 17: banyandb.database.v1.IndexRuleBindingRegistryServiceGetResponse
	(*IndexRuleBindingRegistryServiceListRequest)(nil),    // 18: banyandb.database.v1.IndexRuleBindingRegistryServiceListRequest
	(*IndexRuleBindingRegistryServiceListResponse)(nil),   // 19: banyandb.database.v1.IndexRuleBindingRegistryServiceListResponse
	(*IndexRuleRegistryServiceCreateRequest)(nil),         // 20: banyandb.database.v1.IndexRuleRegistryServiceCreateRequest
	(*IndexRuleRegistryServiceCreateResponse)(nil),        // 21: banyandb.database.v1.IndexRuleRegistryServiceCreateResponse
	(*IndexRuleRegistryServiceUpdateRequest)(nil),         // 22: banyandb.database.v1.IndexRuleRegistryServiceUpdateRequest
	(*IndexRuleRegistryServiceUpdateResponse)(nil),        // 23: banyandb.database.v1.IndexRuleRegistryServiceUpdateResponse
	(*IndexRuleRegistryServiceDeleteRequest)(nil),         // 24: banyandb.database.v1.IndexRuleRegistryServiceDeleteRequest
	(*IndexRuleRegistryServiceDeleteResponse)(nil),        // 25: banyandb.database.v1.IndexRuleRegistryServiceDeleteResponse
	(*IndexRuleRegistryServiceGetRequest)(nil),            // 26: banyandb.database.v1.IndexRuleRegistryServiceGetRequest
	(*IndexRuleRegistryServiceGetResponse)(nil),           // 27: banyandb.database.v1.IndexRuleRegistryServiceGetResponse
	(*IndexRuleRegistryServiceListRequest)(nil),           // 28: banyandb.database.v1.IndexRuleRegistryServiceListRequest
	(*IndexRuleRegistryServiceListResponse)(nil),          // 29: banyandb.database.v1.IndexRuleRegistryServiceListResponse
	(*MeasureRegistryServiceCreateRequest)(nil),           // 30: banyandb.database.v1.MeasureRegistryServiceCreateRequest
	(*MeasureRegistryServiceCreateResponse)(nil),          // 31: banyandb.database.v1.MeasureRegistryServiceCreateResponse
	(*MeasureRegistryServiceUpdateRequest)(nil),           // 32: banyandb.database.v1.MeasureRegistryServiceUpdateRequest
	(*MeasureRegistryServiceUpdateResponse)(nil),          // 33: banyandb.database.v1.MeasureRegistryServiceUpdateResponse
	(*MeasureRegistryServiceDeleteRequest)(nil),           // 34: banyandb.database.v1.MeasureRegistryServiceDeleteRequest
	(*MeasureRegistryServiceDeleteResponse)(nil),          // 35: banyandb.database.v1.MeasureRegistryServiceDeleteResponse
	(*MeasureRegistryServiceGetRequest)(nil),              // 36: banyandb.database.v1.MeasureRegistryServiceGetRequest
	(*MeasureRegistryServiceGetResponse)(nil),             // 37: banyandb.database.v1.MeasureRegistryServiceGetResponse
	(*MeasureRegistryServiceListRequest)(nil),             // 38: banyandb.database.v1.MeasureRegistryServiceListRequest
	(*MeasureRegistryServiceListResponse)(nil),            // 39: banyandb.database.v1.MeasureRegistryServiceListResponse
	(*GroupRegistryServiceCreateRequest)(nil),             // 40: banyandb.database.v1.GroupRegistryServiceCreateRequest
	(*GroupRegistryServiceCreateResponse)(nil),            // 41: banyandb.database.v1.GroupRegistryServiceCreateResponse
	(*GroupRegistryServiceUpdateRequest)(nil),             // 42: banyandb.database.v1.GroupRegistryServiceUpdateRequest
	(*GroupRegistryServiceUpdateResponse)(nil),            // 43: banyandb.database.v1.GroupRegistryServiceUpdateResponse
	(*GroupRegistryServiceDeleteRequest)(nil),             // 44: banyandb.database.v1.GroupRegistryServiceDeleteRequest
	(*GroupRegistryServiceDeleteResponse)(nil),            // 45: banyandb.database.v1.GroupRegistryServiceDeleteResponse
	(*GroupRegistryServiceGetRequest)(nil),                // 46: banyandb.database.v1.GroupRegistryServiceGetRequest
	(*GroupRegistryServiceGetResponse)(nil),               // 47: banyandb.database.v1.GroupRegistryServiceGetResponse
	(*GroupRegistryServiceListRequest)(nil),               // 48: banyandb.database.v1.GroupRegistryServiceListRequest
	(*GroupRegistryServiceListResponse)(nil),              // 49: banyandb.database.v1.GroupRegistryServiceListResponse
	(*TopNAggregationRegistryServiceCreateRequest)(nil),   // 50: banyandb.database.v1.TopNAggregationRegistryServiceCreateRequest
	(*TopNAggregationRegistryServiceCreateResponse)(nil),  // 51: banyandb.database.v1.TopNAggregationRegistryServiceCreateResponse
	(*TopNAggregationRegistryServiceUpdateRequest)(nil),   // 52: banyandb.database.v1.TopNAggregationRegistryServiceUpdateRequest
	(*TopNAggregationRegistryServiceUpdateResponse)(nil),  // 53: banyandb.database.v1.TopNAggregationRegistryServiceUpdateResponse
	(*TopNAggregationRegistryServiceDeleteRequest)(nil),   // 54: banyandb.database.v1.TopNAggregationRegistryServiceDeleteRequest
	(*TopNAggregationRegistryServiceDeleteResponse)(nil),  // 55: banyandb.database.v1.TopNAggregationRegistryServiceDeleteResponse
	(*TopNAggregationRegistryServiceGetRequest)(nil),      // 56: banyandb.database.v1.TopNAggregationRegistryServiceGetRequest
	(*TopNAggregationRegistryServiceGetResponse)(nil),     // 57: banyandb.database.v1.TopNAggregationRegistryServiceGetResponse
	(*TopNAggregationRegistryServiceListRequest)(nil),     // 58: banyandb.database.v1.TopNAggregationRegistryServiceListRequest
	(*TopNAggregationRegistryServiceListResponse)(nil),    // 59: banyandb.database.v1.TopNAggregationRegistryServiceListResponse
	(*Stream)(nil),           // 60: banyandb.database.v1.Stream
	(*v1.Metadata)(nil),      // 61: banyandb.common.v1.Metadata
	(*IndexRuleBinding)(nil), // 62: banyandb.database.v1.IndexRuleBinding
	(*IndexRule)(nil),        // 63: banyandb.database.v1.IndexRule
	(*Measure)(nil),          // 64: banyandb.database.v1.Measure
	(*v1.Group)(nil),         // 65: banyandb.common.v1.Group
	(*TopNAggregation)(nil),  // 66: banyandb.database.v1.TopNAggregation
}
var file_banyandb_database_v1_rpc_proto_depIdxs = []int32{
	60, // 0: banyandb.database.v1.StreamRegistryServiceCreateRequest.stream:type_name -> banyandb.database.v1.Stream
	60, // 1: banyandb.database.v1.StreamRegistryServiceUpdateRequest.stream:type_name -> banyandb.database.v1.Stream
	61, // 2: banyandb.database.v1.StreamRegistryServiceDeleteRequest.metadata:type_name -> banyandb.common.v1.Metadata
	61, // 3: banyandb.database.v1.StreamRegistryServiceGetRequest.metadata:type_name -> banyandb.common.v1.Metadata
	60, // 4: banyandb.database.v1.StreamRegistryServiceGetResponse.stream:type_name -> banyandb.database.v1.Stream
	60, // 5: banyandb.database.v1.StreamRegistryServiceListResponse.stream:type_name -> banyandb.database.v1.Stream
	62, // 6: banyandb.database.v1.IndexRuleBindingRegistryServiceCreateRequest.index_rule_binding:type_name -> banyandb.database.v1.IndexRuleBinding
	62, // 7: banyandb.database.v1.IndexRuleBindingRegistryServiceUpdateRequest.index_rule_binding:type_name -> banyandb.database.v1.IndexRuleBinding
	61, // 8: banyandb.database.v1.IndexRuleBindingRegistryServiceDeleteRequest.metadata:type_name -> banyandb.common.v1.Metadata
	61, // 9: banyandb.database.v1.IndexRuleBindingRegistryServiceGetRequest.metadata:type_name -> banyandb.common.v1.Metadata
	62, // 10: banyandb.database.v1.IndexRuleBindingRegistryServiceGetResponse.index_rule_binding:type_name -> banyandb.database.v1.IndexRuleBinding
	62, // 11: banyandb.database.v1.IndexRuleBindingRegistryServiceListResponse.index_rule_binding:type_name -> banyandb.database.v1.IndexRuleBinding
	63, // 12: banyandb.database.v1.IndexRuleRegistryServiceCreateRequest.index_rule:type_name -> banyandb.database.v1.IndexRule
	63, // 13: banyandb.database.v1.IndexRuleRegistryServiceUpdateRequest.index_rule:type_name -> banyandb.database.v1.IndexRule
	61, // 14: banyandb.database.v1.IndexRuleRegistryServiceDeleteRequest.metadata:type_name -> banyandb.common.v1.Metadata
	61, // 15: banyandb.database.v1.IndexRuleRegistryServiceGetRequest.metadata:type_name -> banyandb.common.v1.Metadata
	63, // 16: banyandb.database.v1.IndexRuleRegistryServiceGetResponse.index_rule:type_name -> banyandb.database.v1.IndexRule
	63, // 17: banyandb.database.v1.IndexRuleRegistryServiceListResponse.index_rule:type_name -> banyandb.database.v1.IndexRule
	64, // 18: banyandb.database.v1.MeasureRegistryServiceCreateRequest.measure:type_name -> banyandb.database.v1.Measure
	64, // 19: banyandb.database.v1.MeasureRegistryServiceUpdateRequest.measure:type_name -> banyandb.database.v1.Measure
	61, // 20: banyandb.database.v1.MeasureRegistryServiceDeleteRequest.metadata:type_name -> banyandb.common.v1.Metadata
	61, // 21: banyandb.database.v1.MeasureRegistryServiceGetRequest.metadata:type_name -> banyandb.common.v1.Metadata
	64, // 22: banyandb.database.v1.MeasureRegistryServiceGetResponse.measure:type_name -> banyandb.database.v1.Measure
	64, // 23: banyandb.database.v1.MeasureRegistryServiceListResponse.measure:type_name -> banyandb.database.v1.Measure
	65, // 24: banyandb.database.v1.GroupRegistryServiceCreateRequest.group:type_name -> banyandb.common.v1.Group
	65, // 25: banyandb.database.v1.GroupRegistryServiceUpdateRequest.group:type_name -> banyandb.common.v1.Group
	65, // 26: banyandb.database.v1.GroupRegistryServiceGetResponse.group:type_name -> banyandb.common.v1.Group
	65, // 27: banyandb.database.v1.GroupRegistryServiceListResponse.group:type_name -> banyandb.common.v1.Group
	66, // 28: banyandb.database.v1.TopNAggregationRegistryServiceCreateRequest.top_n_aggregation:type_name -> banyandb.database.v1.TopNAggregation
	66, // 29: banyandb.database.v1.TopNAggregationRegistryServiceUpdateRequest.top_n_aggregation:type_name -> banyandb.database.v1.TopNAggregation
	61, // 30: banyandb.database.v1.TopNAggregationRegistryServiceDeleteRequest.metadata:type_name -> banyandb.common.v1.Metadata
	61, // 31: banyandb.database.v1.TopNAggregationRegistryServiceGetRequest.metadata:type_name -> banyandb.common.v1.Metadata
	66, // 32: banyandb.database.v1.TopNAggregationRegistryServiceGetResponse.top_n_aggregation:type_name -> banyandb.database.v1.TopNAggregation
	66, // 33: banyandb.database.v1.TopNAggregationRegistryServiceListResponse.top_n_aggregation:type_name -> banyandb.database.v1.TopNAggregation
	0,  // 34: banyandb.database.v1.StreamRegistryService.Create:input_type -> banyandb.database.v1.StreamRegistryServiceCreateRequest
	2,  // 35: banyandb.database.v1.StreamRegistryService.Update:input_type -> banyandb.database.v1.StreamRegistryServiceUpdateRequest
	4,  // 36: banyandb.database.v1.StreamRegistryService.Delete:input_type -> banyandb.database.v1.StreamRegistryServiceDeleteRequest
	6,  // 37: banyandb.database.v1.StreamRegistryService.Get:input_type -> banyandb.database.v1.StreamRegistryServiceGetRequest
	8,  // 38: banyandb.database.v1.StreamRegistryService.List:input_type -> banyandb.database.v1.StreamRegistryServiceListRequest
	10, // 39: banyandb.database.v1.IndexRuleBindingRegistryService.Create:input_type -> banyandb.database.v1.IndexRuleBindingRegistryServiceCreateRequest
	12, // 40: banyandb.database.v1.IndexRuleBindingRegistryService.Update:input_type -> banyandb.database.v1.IndexRuleBindingRegistryServiceUpdateRequest
	14, // 41: banyandb.database.v1.IndexRuleBindingRegistryService.Delete:input_type -> banyandb.database.v1.IndexRuleBindingRegistryServiceDeleteRequest
	16, // 42: banyandb.database.v1.IndexRuleBindingRegistryService.Get:input_type -> banyandb.database.v1.IndexRuleBindingRegistryServiceGetRequest
	18, // 43: banyandb.database.v1.IndexRuleBindingRegistryService.List:input_type -> banyandb.database.v1.IndexRuleBindingRegistryServiceListRequest
	20, // 44: banyandb.database.v1.IndexRuleRegistryService.Create:input_type -> banyandb.database.v1.IndexRuleRegistryServiceCreateRequest
	22, // 45: banyandb.database.v1.IndexRuleRegistryService.Update:input_type -> banyandb.database.v1.IndexRuleRegistryServiceUpdateRequest
	24, // 46: banyandb.database.v1.IndexRuleRegistryService.Delete:input_type -> banyandb.database.v1.IndexRuleRegistryServiceDeleteRequest
	26, // 47: banyandb.database.v1.IndexRuleRegistryService.Get:input_type -> banyandb.database.v1.IndexRuleRegistryServiceGetRequest
	28, // 48: banyandb.database.v1.IndexRuleRegistryService.List:input_type -> banyandb.database.v1.IndexRuleRegistryServiceListRequest
	30, // 49: banyandb.database.v1.MeasureRegistryService.Create:input_type -> banyandb.database.v1.MeasureRegistryServiceCreateRequest
	32, // 50: banyandb.database.v1.MeasureRegistryService.Update:input_type -> banyandb.database.v1.MeasureRegistryServiceUpdateRequest
	34, // 51: banyandb.database.v1.MeasureRegistryService.Delete:input_type -> banyandb.database.v1.MeasureRegistryServiceDeleteRequest
	36, // 52: banyandb.database.v1.MeasureRegistryService.Get:input_type -> banyandb.database.v1.MeasureRegistryServiceGetRequest
	38, // 53: banyandb.database.v1.MeasureRegistryService.List:input_type -> banyandb.database.v1.MeasureRegistryServiceListRequest
	40, // 54: banyandb.database.v1.GroupRegistryService.Create:input_type -> banyandb.database.v1.GroupRegistryServiceCreateRequest
	42, // 55: banyandb.database.v1.GroupRegistryService.Update:input_type -> banyandb.database.v1.GroupRegistryServiceUpdateRequest
	44, // 56: banyandb.database.v1.GroupRegistryService.Delete:input_type -> banyandb.database.v1.GroupRegistryServiceDeleteRequest
	46, // 57: banyandb.database.v1.GroupRegistryService.Get:input_type -> banyandb.database.v1.GroupRegistryServiceGetRequest
	48, // 58: banyandb.database.v1.GroupRegistryService.List:input_type -> banyandb.database.v1.GroupRegistryServiceListRequest
	50, // 59: banyandb.database.v1.TopNAggregationRegistryService.Create:input_type -> banyandb.database.v1.TopNAggregationRegistryServiceCreateRequest
	52, // 60: banyandb.database.v1.TopNAggregationRegistryService.Update:input_type -> banyandb.database.v1.TopNAggregationRegistryServiceUpdateRequest
	54, // 61: banyandb.database.v1.TopNAggregationRegistryService.Delete:input_type -> banyandb.database.v1.TopNAggregationRegistryServiceDeleteRequest
	56, // 62: banyandb.database.v1.TopNAggregationRegistryService.Get:input_type -> banyandb.database.v1.TopNAggregationRegistryServiceGetRequest
	58, // 63: banyandb.database.v1.TopNAggregationRegistryService.List:input_type -> banyandb.database.v1.TopNAggregationRegistryServiceListRequest
	1,  // 64: banyandb.database.v1.StreamRegistryService.Create:output_type -> banyandb.database.v1.StreamRegistryServiceCreateResponse
	3,  // 65: banyandb.database.v1.StreamRegistryService.Update:output_type -> banyandb.database.v1.StreamRegistryServiceUpdateResponse
	5,  // 66: banyandb.database.v1.StreamRegistryService.Delete:output_type -> banyandb.database.v1.StreamRegistryServiceDeleteResponse
	7,  // 67: banyandb.database.v1.StreamRegistryService.Get:output_type -> banyandb.database.v1.StreamRegistryServiceGetResponse
	9,  // 68: banyandb.database.v1.StreamRegistryService.List:output_type -> banyandb.database.v1.StreamRegistryServiceListResponse
	11, // 69: banyandb.database.v1.IndexRuleBindingRegistryService.Create:output_type -> banyandb.database.v1.IndexRuleBindingRegistryServiceCreateResponse
	13, // 70: banyandb.database.v1.IndexRuleBindingRegistryService.Update:output_type -> banyandb.database.v1.IndexRuleBindingRegistryServiceUpdateResponse
	15, // 71: banyandb.database.v1.IndexRuleBindingRegistryService.Delete:output_type -> banyandb.database.v1.IndexRuleBindingRegistryServiceDeleteResponse
	17, // 72: banyandb.database.v1.IndexRuleBindingRegistryService.Get:output_type -> banyandb.database.v1.IndexRuleBindingRegistryServiceGetResponse
	19, // 73: banyandb.database.v1.IndexRuleBindingRegistryService.List:output_type -> banyandb.database.v1.IndexRuleBindingRegistryServiceListResponse
	21, // 74: banyandb.database.v1.IndexRuleRegistryService.Create:output_type -> banyandb.database.v1.IndexRuleRegistryServiceCreateResponse
	23, // 75: banyandb.database.v1.IndexRuleRegistryService.Update:output_type -> banyandb.database.v1.IndexRuleRegistryServiceUpdateResponse
	25, // 76: banyandb.database.v1.IndexRuleRegistryService.Delete:output_type -> banyandb.database.v1.IndexRuleRegistryServiceDeleteResponse
	27, // 77: banyandb.database.v1.IndexRuleRegistryService.Get:output_type -> banyandb.database.v1.IndexRuleRegistryServiceGetResponse
	29, // 78: banyandb.database.v1.IndexRuleRegistryService.List:output_type -> banyandb.database.v1.IndexRuleRegistryServiceListResponse
	31, // 79: banyandb.database.v1.MeasureRegistryService.Create:output_type -> banyandb.database.v1.MeasureRegistryServiceCreateResponse
	33, // 80: banyandb.database.v1.MeasureRegistryService.Update:output_type -> banyandb.database.v1.MeasureRegistryServiceUpdateResponse
	35, // 81: banyandb.database.v1.MeasureRegistryService.Delete:output_type -> banyandb.database.v1.MeasureRegistryServiceDeleteResponse
	37, // 82: banyandb.database.v1.MeasureRegistryService.Get:output_type -> banyandb.database.v1.MeasureRegistryServiceGetResponse
	39, // 83: banyandb.database.v1.MeasureRegistryService.List:output_type -> banyandb.database.v1.MeasureRegistryServiceListResponse
	41, // 84: banyandb.database.v1.GroupRegistryService.Create:output_type -> banyandb.database.v1.GroupRegistryServiceCreateResponse
	43, // 85: banyandb.database.v1.GroupRegistryService.Update:output_type -> banyandb.database.v1.GroupRegistryServiceUpdateResponse
	45, // 86: banyandb.database.v1.GroupRegistryService.Delete:output_type -> banyandb.database.v1.GroupRegistryServiceDeleteResponse
	47, // 87: banyandb.database.v1.GroupRegistryService.Get:output_type -> banyandb.database.v1.GroupRegistryServiceGetResponse
	49, // 88: banyandb.database.v1.GroupRegistryService.List:output_type -> banyandb.database.v1.GroupRegistryServiceListResponse
	51, // 89: banyandb.database.v1.TopNAggregationRegistryService.Create:output_type -> banyandb.database.v1.TopNAggregationRegistryServiceCreateResponse
	53, // 90: banyandb.database.v1.TopNAggregationRegistryService.Update:output_type -> banyandb.database.v1.TopNAggregationRegistryServiceUpdateResponse
	55, // 91: banyandb.database.v1.TopNAggregationRegistryService.Delete:output_type -> banyandb.database.v1.TopNAggregationRegistryServiceDeleteResponse
	57, // 92: banyandb.database.v1.TopNAggregationRegistryService.Get:output_type -> banyandb.database.v1.TopNAggregationRegistryServiceGetResponse
	59, // 93: banyandb.database.v1.TopNAggregationRegistryService.List:output_type -> banyandb.database.v1.TopNAggregationRegistryServiceListResponse
	64, // [64:94] is the sub-list for method output_type
	34, // [34:64] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_banyandb_database_v1_rpc_proto_init() }
func file_banyandb_database_v1_rpc_proto_init() {
	if File_banyandb_database_v1_rpc_proto != nil {
		return
	}
	file_banyandb_database_v1_schema_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_banyandb_database_v1_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRegistryServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRegistryServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRegistryServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRegistryServiceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRegistryServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRegistryServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRegistryServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRegistryServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRegistryServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRegistryServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBindingRegistryServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBindingRegistryServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBindingRegistryServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBindingRegistryServiceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBindingRegistryServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBindingRegistryServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBindingRegistryServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBindingRegistryServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBindingRegistryServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBindingRegistryServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleRegistryServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleRegistryServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleRegistryServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleRegistryServiceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleRegistryServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleRegistryServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleRegistryServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleRegistryServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleRegistryServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleRegistryServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureRegistryServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureRegistryServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureRegistryServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureRegistryServiceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureRegistryServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureRegistryServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureRegistryServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureRegistryServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureRegistryServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeasureRegistryServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistryServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistryServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistryServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistryServiceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistryServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistryServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistryServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistryServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistryServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupRegistryServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNAggregationRegistryServiceCreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNAggregationRegistryServiceCreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNAggregationRegistryServiceUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNAggregationRegistryServiceUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNAggregationRegistryServiceDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNAggregationRegistryServiceDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNAggregationRegistryServiceGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNAggregationRegistryServiceGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNAggregationRegistryServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_database_v1_rpc_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopNAggregationRegistryServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_banyandb_database_v1_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_banyandb_database_v1_rpc_proto_goTypes,
		DependencyIndexes: file_banyandb_database_v1_rpc_proto_depIdxs,
		MessageInfos:      file_banyandb_database_v1_rpc_proto_msgTypes,
	}.Build()
	File_banyandb_database_v1_rpc_proto = out.File
	file_banyandb_database_v1_rpc_proto_rawDesc = nil
	file_banyandb_database_v1_rpc_proto_goTypes = nil
	file_banyandb_database_v1_rpc_proto_depIdxs = nil
}
