// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntityRegistryClient is the client API for EntityRegistry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityRegistryClient interface {
	CreateOrUpdate(ctx context.Context, in *EntityCreateOrUpdateRequest, opts ...grpc.CallOption) (*EntityCreateOrUpdateResponse, error)
	Delete(ctx context.Context, in *GeneralEntityRequest, opts ...grpc.CallOption) (*EntityDeleteResponse, error)
	Get(ctx context.Context, in *GeneralEntityRequest, opts ...grpc.CallOption) (*EntityGetResponse, error)
}

type entityRegistryClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityRegistryClient(cc grpc.ClientConnInterface) EntityRegistryClient {
	return &entityRegistryClient{cc}
}

func (c *entityRegistryClient) CreateOrUpdate(ctx context.Context, in *EntityCreateOrUpdateRequest, opts ...grpc.CallOption) (*EntityCreateOrUpdateResponse, error) {
	out := new(EntityCreateOrUpdateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.EntityRegistry/CreateOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistryClient) Delete(ctx context.Context, in *GeneralEntityRequest, opts ...grpc.CallOption) (*EntityDeleteResponse, error) {
	out := new(EntityDeleteResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.EntityRegistry/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityRegistryClient) Get(ctx context.Context, in *GeneralEntityRequest, opts ...grpc.CallOption) (*EntityGetResponse, error) {
	out := new(EntityGetResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.EntityRegistry/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityRegistryServer is the server API for EntityRegistry service.
// All implementations must embed UnimplementedEntityRegistryServer
// for forward compatibility
type EntityRegistryServer interface {
	CreateOrUpdate(context.Context, *EntityCreateOrUpdateRequest) (*EntityCreateOrUpdateResponse, error)
	Delete(context.Context, *GeneralEntityRequest) (*EntityDeleteResponse, error)
	Get(context.Context, *GeneralEntityRequest) (*EntityGetResponse, error)
	mustEmbedUnimplementedEntityRegistryServer()
}

// UnimplementedEntityRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedEntityRegistryServer struct {
}

func (UnimplementedEntityRegistryServer) CreateOrUpdate(context.Context, *EntityCreateOrUpdateRequest) (*EntityCreateOrUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdate not implemented")
}
func (UnimplementedEntityRegistryServer) Delete(context.Context, *GeneralEntityRequest) (*EntityDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedEntityRegistryServer) Get(context.Context, *GeneralEntityRequest) (*EntityGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedEntityRegistryServer) mustEmbedUnimplementedEntityRegistryServer() {}

// UnsafeEntityRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityRegistryServer will
// result in compilation errors.
type UnsafeEntityRegistryServer interface {
	mustEmbedUnimplementedEntityRegistryServer()
}

func RegisterEntityRegistryServer(s grpc.ServiceRegistrar, srv EntityRegistryServer) {
	s.RegisterService(&EntityRegistry_ServiceDesc, srv)
}

func _EntityRegistry_CreateOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityCreateOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistryServer).CreateOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.EntityRegistry/CreateOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistryServer).CreateOrUpdate(ctx, req.(*EntityCreateOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistry_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.EntityRegistry/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistryServer).Delete(ctx, req.(*GeneralEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EntityRegistry_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityRegistryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.EntityRegistry/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityRegistryServer).Get(ctx, req.(*GeneralEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EntityRegistry_ServiceDesc is the grpc.ServiceDesc for EntityRegistry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EntityRegistry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banyandb.database.v1.EntityRegistry",
	HandlerType: (*EntityRegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdate",
			Handler:    _EntityRegistry_CreateOrUpdate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _EntityRegistry_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _EntityRegistry_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banyandb/database/v1/rpc.proto",
}
