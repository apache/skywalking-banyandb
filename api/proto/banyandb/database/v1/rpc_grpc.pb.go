// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: banyandb/database/v1/rpc.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamRegistryServiceClient is the client API for StreamRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamRegistryServiceClient interface {
	Create(ctx context.Context, in *StreamRegistryServiceCreateRequest, opts ...grpc.CallOption) (*StreamRegistryServiceCreateResponse, error)
	Update(ctx context.Context, in *StreamRegistryServiceUpdateRequest, opts ...grpc.CallOption) (*StreamRegistryServiceUpdateResponse, error)
	Delete(ctx context.Context, in *StreamRegistryServiceDeleteRequest, opts ...grpc.CallOption) (*StreamRegistryServiceDeleteResponse, error)
	Get(ctx context.Context, in *StreamRegistryServiceGetRequest, opts ...grpc.CallOption) (*StreamRegistryServiceGetResponse, error)
	List(ctx context.Context, in *StreamRegistryServiceListRequest, opts ...grpc.CallOption) (*StreamRegistryServiceListResponse, error)
}

type streamRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamRegistryServiceClient(cc grpc.ClientConnInterface) StreamRegistryServiceClient {
	return &streamRegistryServiceClient{cc}
}

func (c *streamRegistryServiceClient) Create(ctx context.Context, in *StreamRegistryServiceCreateRequest, opts ...grpc.CallOption) (*StreamRegistryServiceCreateResponse, error) {
	out := new(StreamRegistryServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.StreamRegistryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamRegistryServiceClient) Update(ctx context.Context, in *StreamRegistryServiceUpdateRequest, opts ...grpc.CallOption) (*StreamRegistryServiceUpdateResponse, error) {
	out := new(StreamRegistryServiceUpdateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.StreamRegistryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamRegistryServiceClient) Delete(ctx context.Context, in *StreamRegistryServiceDeleteRequest, opts ...grpc.CallOption) (*StreamRegistryServiceDeleteResponse, error) {
	out := new(StreamRegistryServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.StreamRegistryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamRegistryServiceClient) Get(ctx context.Context, in *StreamRegistryServiceGetRequest, opts ...grpc.CallOption) (*StreamRegistryServiceGetResponse, error) {
	out := new(StreamRegistryServiceGetResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.StreamRegistryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamRegistryServiceClient) List(ctx context.Context, in *StreamRegistryServiceListRequest, opts ...grpc.CallOption) (*StreamRegistryServiceListResponse, error) {
	out := new(StreamRegistryServiceListResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.StreamRegistryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamRegistryServiceServer is the server API for StreamRegistryService service.
// All implementations must embed UnimplementedStreamRegistryServiceServer
// for forward compatibility
type StreamRegistryServiceServer interface {
	Create(context.Context, *StreamRegistryServiceCreateRequest) (*StreamRegistryServiceCreateResponse, error)
	Update(context.Context, *StreamRegistryServiceUpdateRequest) (*StreamRegistryServiceUpdateResponse, error)
	Delete(context.Context, *StreamRegistryServiceDeleteRequest) (*StreamRegistryServiceDeleteResponse, error)
	Get(context.Context, *StreamRegistryServiceGetRequest) (*StreamRegistryServiceGetResponse, error)
	List(context.Context, *StreamRegistryServiceListRequest) (*StreamRegistryServiceListResponse, error)
	mustEmbedUnimplementedStreamRegistryServiceServer()
}

// UnimplementedStreamRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStreamRegistryServiceServer struct {
}

func (UnimplementedStreamRegistryServiceServer) Create(context.Context, *StreamRegistryServiceCreateRequest) (*StreamRegistryServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStreamRegistryServiceServer) Update(context.Context, *StreamRegistryServiceUpdateRequest) (*StreamRegistryServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStreamRegistryServiceServer) Delete(context.Context, *StreamRegistryServiceDeleteRequest) (*StreamRegistryServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedStreamRegistryServiceServer) Get(context.Context, *StreamRegistryServiceGetRequest) (*StreamRegistryServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStreamRegistryServiceServer) List(context.Context, *StreamRegistryServiceListRequest) (*StreamRegistryServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStreamRegistryServiceServer) mustEmbedUnimplementedStreamRegistryServiceServer() {}

// UnsafeStreamRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamRegistryServiceServer will
// result in compilation errors.
type UnsafeStreamRegistryServiceServer interface {
	mustEmbedUnimplementedStreamRegistryServiceServer()
}

func RegisterStreamRegistryServiceServer(s grpc.ServiceRegistrar, srv StreamRegistryServiceServer) {
	s.RegisterService(&StreamRegistryService_ServiceDesc, srv)
}

func _StreamRegistryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRegistryServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamRegistryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.StreamRegistryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamRegistryServiceServer).Create(ctx, req.(*StreamRegistryServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamRegistryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRegistryServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamRegistryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.StreamRegistryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamRegistryServiceServer).Update(ctx, req.(*StreamRegistryServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamRegistryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRegistryServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamRegistryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.StreamRegistryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamRegistryServiceServer).Delete(ctx, req.(*StreamRegistryServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamRegistryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRegistryServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamRegistryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.StreamRegistryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamRegistryServiceServer).Get(ctx, req.(*StreamRegistryServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamRegistryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamRegistryServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamRegistryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.StreamRegistryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamRegistryServiceServer).List(ctx, req.(*StreamRegistryServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamRegistryService_ServiceDesc is the grpc.ServiceDesc for StreamRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banyandb.database.v1.StreamRegistryService",
	HandlerType: (*StreamRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StreamRegistryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StreamRegistryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StreamRegistryService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _StreamRegistryService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _StreamRegistryService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banyandb/database/v1/rpc.proto",
}

// IndexRuleBindingRegistryServiceClient is the client API for IndexRuleBindingRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexRuleBindingRegistryServiceClient interface {
	Create(ctx context.Context, in *IndexRuleBindingRegistryServiceCreateRequest, opts ...grpc.CallOption) (*IndexRuleBindingRegistryServiceCreateResponse, error)
	Update(ctx context.Context, in *IndexRuleBindingRegistryServiceUpdateRequest, opts ...grpc.CallOption) (*IndexRuleBindingRegistryServiceUpdateResponse, error)
	Delete(ctx context.Context, in *IndexRuleBindingRegistryServiceDeleteRequest, opts ...grpc.CallOption) (*IndexRuleBindingRegistryServiceDeleteResponse, error)
	Get(ctx context.Context, in *IndexRuleBindingRegistryServiceGetRequest, opts ...grpc.CallOption) (*IndexRuleBindingRegistryServiceGetResponse, error)
	List(ctx context.Context, in *IndexRuleBindingRegistryServiceListRequest, opts ...grpc.CallOption) (*IndexRuleBindingRegistryServiceListResponse, error)
}

type indexRuleBindingRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexRuleBindingRegistryServiceClient(cc grpc.ClientConnInterface) IndexRuleBindingRegistryServiceClient {
	return &indexRuleBindingRegistryServiceClient{cc}
}

func (c *indexRuleBindingRegistryServiceClient) Create(ctx context.Context, in *IndexRuleBindingRegistryServiceCreateRequest, opts ...grpc.CallOption) (*IndexRuleBindingRegistryServiceCreateResponse, error) {
	out := new(IndexRuleBindingRegistryServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.IndexRuleBindingRegistryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexRuleBindingRegistryServiceClient) Update(ctx context.Context, in *IndexRuleBindingRegistryServiceUpdateRequest, opts ...grpc.CallOption) (*IndexRuleBindingRegistryServiceUpdateResponse, error) {
	out := new(IndexRuleBindingRegistryServiceUpdateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.IndexRuleBindingRegistryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexRuleBindingRegistryServiceClient) Delete(ctx context.Context, in *IndexRuleBindingRegistryServiceDeleteRequest, opts ...grpc.CallOption) (*IndexRuleBindingRegistryServiceDeleteResponse, error) {
	out := new(IndexRuleBindingRegistryServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.IndexRuleBindingRegistryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexRuleBindingRegistryServiceClient) Get(ctx context.Context, in *IndexRuleBindingRegistryServiceGetRequest, opts ...grpc.CallOption) (*IndexRuleBindingRegistryServiceGetResponse, error) {
	out := new(IndexRuleBindingRegistryServiceGetResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.IndexRuleBindingRegistryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexRuleBindingRegistryServiceClient) List(ctx context.Context, in *IndexRuleBindingRegistryServiceListRequest, opts ...grpc.CallOption) (*IndexRuleBindingRegistryServiceListResponse, error) {
	out := new(IndexRuleBindingRegistryServiceListResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.IndexRuleBindingRegistryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexRuleBindingRegistryServiceServer is the server API for IndexRuleBindingRegistryService service.
// All implementations must embed UnimplementedIndexRuleBindingRegistryServiceServer
// for forward compatibility
type IndexRuleBindingRegistryServiceServer interface {
	Create(context.Context, *IndexRuleBindingRegistryServiceCreateRequest) (*IndexRuleBindingRegistryServiceCreateResponse, error)
	Update(context.Context, *IndexRuleBindingRegistryServiceUpdateRequest) (*IndexRuleBindingRegistryServiceUpdateResponse, error)
	Delete(context.Context, *IndexRuleBindingRegistryServiceDeleteRequest) (*IndexRuleBindingRegistryServiceDeleteResponse, error)
	Get(context.Context, *IndexRuleBindingRegistryServiceGetRequest) (*IndexRuleBindingRegistryServiceGetResponse, error)
	List(context.Context, *IndexRuleBindingRegistryServiceListRequest) (*IndexRuleBindingRegistryServiceListResponse, error)
	mustEmbedUnimplementedIndexRuleBindingRegistryServiceServer()
}

// UnimplementedIndexRuleBindingRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndexRuleBindingRegistryServiceServer struct {
}

func (UnimplementedIndexRuleBindingRegistryServiceServer) Create(context.Context, *IndexRuleBindingRegistryServiceCreateRequest) (*IndexRuleBindingRegistryServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIndexRuleBindingRegistryServiceServer) Update(context.Context, *IndexRuleBindingRegistryServiceUpdateRequest) (*IndexRuleBindingRegistryServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIndexRuleBindingRegistryServiceServer) Delete(context.Context, *IndexRuleBindingRegistryServiceDeleteRequest) (*IndexRuleBindingRegistryServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIndexRuleBindingRegistryServiceServer) Get(context.Context, *IndexRuleBindingRegistryServiceGetRequest) (*IndexRuleBindingRegistryServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIndexRuleBindingRegistryServiceServer) List(context.Context, *IndexRuleBindingRegistryServiceListRequest) (*IndexRuleBindingRegistryServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIndexRuleBindingRegistryServiceServer) mustEmbedUnimplementedIndexRuleBindingRegistryServiceServer() {
}

// UnsafeIndexRuleBindingRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexRuleBindingRegistryServiceServer will
// result in compilation errors.
type UnsafeIndexRuleBindingRegistryServiceServer interface {
	mustEmbedUnimplementedIndexRuleBindingRegistryServiceServer()
}

func RegisterIndexRuleBindingRegistryServiceServer(s grpc.ServiceRegistrar, srv IndexRuleBindingRegistryServiceServer) {
	s.RegisterService(&IndexRuleBindingRegistryService_ServiceDesc, srv)
}

func _IndexRuleBindingRegistryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRuleBindingRegistryServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexRuleBindingRegistryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.IndexRuleBindingRegistryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexRuleBindingRegistryServiceServer).Create(ctx, req.(*IndexRuleBindingRegistryServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexRuleBindingRegistryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRuleBindingRegistryServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexRuleBindingRegistryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.IndexRuleBindingRegistryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexRuleBindingRegistryServiceServer).Update(ctx, req.(*IndexRuleBindingRegistryServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexRuleBindingRegistryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRuleBindingRegistryServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexRuleBindingRegistryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.IndexRuleBindingRegistryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexRuleBindingRegistryServiceServer).Delete(ctx, req.(*IndexRuleBindingRegistryServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexRuleBindingRegistryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRuleBindingRegistryServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexRuleBindingRegistryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.IndexRuleBindingRegistryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexRuleBindingRegistryServiceServer).Get(ctx, req.(*IndexRuleBindingRegistryServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexRuleBindingRegistryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRuleBindingRegistryServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexRuleBindingRegistryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.IndexRuleBindingRegistryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexRuleBindingRegistryServiceServer).List(ctx, req.(*IndexRuleBindingRegistryServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexRuleBindingRegistryService_ServiceDesc is the grpc.ServiceDesc for IndexRuleBindingRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexRuleBindingRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banyandb.database.v1.IndexRuleBindingRegistryService",
	HandlerType: (*IndexRuleBindingRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IndexRuleBindingRegistryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IndexRuleBindingRegistryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IndexRuleBindingRegistryService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IndexRuleBindingRegistryService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _IndexRuleBindingRegistryService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banyandb/database/v1/rpc.proto",
}

// IndexRuleRegistryServiceClient is the client API for IndexRuleRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexRuleRegistryServiceClient interface {
	Create(ctx context.Context, in *IndexRuleRegistryServiceCreateRequest, opts ...grpc.CallOption) (*IndexRuleRegistryServiceCreateResponse, error)
	Update(ctx context.Context, in *IndexRuleRegistryServiceUpdateRequest, opts ...grpc.CallOption) (*IndexRuleRegistryServiceUpdateResponse, error)
	Delete(ctx context.Context, in *IndexRuleRegistryServiceDeleteRequest, opts ...grpc.CallOption) (*IndexRuleRegistryServiceDeleteResponse, error)
	Get(ctx context.Context, in *IndexRuleRegistryServiceGetRequest, opts ...grpc.CallOption) (*IndexRuleRegistryServiceGetResponse, error)
	List(ctx context.Context, in *IndexRuleRegistryServiceListRequest, opts ...grpc.CallOption) (*IndexRuleRegistryServiceListResponse, error)
}

type indexRuleRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexRuleRegistryServiceClient(cc grpc.ClientConnInterface) IndexRuleRegistryServiceClient {
	return &indexRuleRegistryServiceClient{cc}
}

func (c *indexRuleRegistryServiceClient) Create(ctx context.Context, in *IndexRuleRegistryServiceCreateRequest, opts ...grpc.CallOption) (*IndexRuleRegistryServiceCreateResponse, error) {
	out := new(IndexRuleRegistryServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.IndexRuleRegistryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexRuleRegistryServiceClient) Update(ctx context.Context, in *IndexRuleRegistryServiceUpdateRequest, opts ...grpc.CallOption) (*IndexRuleRegistryServiceUpdateResponse, error) {
	out := new(IndexRuleRegistryServiceUpdateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.IndexRuleRegistryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexRuleRegistryServiceClient) Delete(ctx context.Context, in *IndexRuleRegistryServiceDeleteRequest, opts ...grpc.CallOption) (*IndexRuleRegistryServiceDeleteResponse, error) {
	out := new(IndexRuleRegistryServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.IndexRuleRegistryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexRuleRegistryServiceClient) Get(ctx context.Context, in *IndexRuleRegistryServiceGetRequest, opts ...grpc.CallOption) (*IndexRuleRegistryServiceGetResponse, error) {
	out := new(IndexRuleRegistryServiceGetResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.IndexRuleRegistryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexRuleRegistryServiceClient) List(ctx context.Context, in *IndexRuleRegistryServiceListRequest, opts ...grpc.CallOption) (*IndexRuleRegistryServiceListResponse, error) {
	out := new(IndexRuleRegistryServiceListResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.IndexRuleRegistryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexRuleRegistryServiceServer is the server API for IndexRuleRegistryService service.
// All implementations must embed UnimplementedIndexRuleRegistryServiceServer
// for forward compatibility
type IndexRuleRegistryServiceServer interface {
	Create(context.Context, *IndexRuleRegistryServiceCreateRequest) (*IndexRuleRegistryServiceCreateResponse, error)
	Update(context.Context, *IndexRuleRegistryServiceUpdateRequest) (*IndexRuleRegistryServiceUpdateResponse, error)
	Delete(context.Context, *IndexRuleRegistryServiceDeleteRequest) (*IndexRuleRegistryServiceDeleteResponse, error)
	Get(context.Context, *IndexRuleRegistryServiceGetRequest) (*IndexRuleRegistryServiceGetResponse, error)
	List(context.Context, *IndexRuleRegistryServiceListRequest) (*IndexRuleRegistryServiceListResponse, error)
	mustEmbedUnimplementedIndexRuleRegistryServiceServer()
}

// UnimplementedIndexRuleRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIndexRuleRegistryServiceServer struct {
}

func (UnimplementedIndexRuleRegistryServiceServer) Create(context.Context, *IndexRuleRegistryServiceCreateRequest) (*IndexRuleRegistryServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedIndexRuleRegistryServiceServer) Update(context.Context, *IndexRuleRegistryServiceUpdateRequest) (*IndexRuleRegistryServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedIndexRuleRegistryServiceServer) Delete(context.Context, *IndexRuleRegistryServiceDeleteRequest) (*IndexRuleRegistryServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedIndexRuleRegistryServiceServer) Get(context.Context, *IndexRuleRegistryServiceGetRequest) (*IndexRuleRegistryServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedIndexRuleRegistryServiceServer) List(context.Context, *IndexRuleRegistryServiceListRequest) (*IndexRuleRegistryServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedIndexRuleRegistryServiceServer) mustEmbedUnimplementedIndexRuleRegistryServiceServer() {
}

// UnsafeIndexRuleRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexRuleRegistryServiceServer will
// result in compilation errors.
type UnsafeIndexRuleRegistryServiceServer interface {
	mustEmbedUnimplementedIndexRuleRegistryServiceServer()
}

func RegisterIndexRuleRegistryServiceServer(s grpc.ServiceRegistrar, srv IndexRuleRegistryServiceServer) {
	s.RegisterService(&IndexRuleRegistryService_ServiceDesc, srv)
}

func _IndexRuleRegistryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRuleRegistryServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexRuleRegistryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.IndexRuleRegistryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexRuleRegistryServiceServer).Create(ctx, req.(*IndexRuleRegistryServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexRuleRegistryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRuleRegistryServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexRuleRegistryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.IndexRuleRegistryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexRuleRegistryServiceServer).Update(ctx, req.(*IndexRuleRegistryServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexRuleRegistryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRuleRegistryServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexRuleRegistryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.IndexRuleRegistryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexRuleRegistryServiceServer).Delete(ctx, req.(*IndexRuleRegistryServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexRuleRegistryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRuleRegistryServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexRuleRegistryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.IndexRuleRegistryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexRuleRegistryServiceServer).Get(ctx, req.(*IndexRuleRegistryServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexRuleRegistryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRuleRegistryServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexRuleRegistryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.IndexRuleRegistryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexRuleRegistryServiceServer).List(ctx, req.(*IndexRuleRegistryServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexRuleRegistryService_ServiceDesc is the grpc.ServiceDesc for IndexRuleRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexRuleRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banyandb.database.v1.IndexRuleRegistryService",
	HandlerType: (*IndexRuleRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _IndexRuleRegistryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _IndexRuleRegistryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _IndexRuleRegistryService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _IndexRuleRegistryService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _IndexRuleRegistryService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banyandb/database/v1/rpc.proto",
}

// MeasureRegistryServiceClient is the client API for MeasureRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeasureRegistryServiceClient interface {
	Create(ctx context.Context, in *MeasureRegistryServiceCreateRequest, opts ...grpc.CallOption) (*MeasureRegistryServiceCreateResponse, error)
	Update(ctx context.Context, in *MeasureRegistryServiceUpdateRequest, opts ...grpc.CallOption) (*MeasureRegistryServiceUpdateResponse, error)
	Delete(ctx context.Context, in *MeasureRegistryServiceDeleteRequest, opts ...grpc.CallOption) (*MeasureRegistryServiceDeleteResponse, error)
	Get(ctx context.Context, in *MeasureRegistryServiceGetRequest, opts ...grpc.CallOption) (*MeasureRegistryServiceGetResponse, error)
	List(ctx context.Context, in *MeasureRegistryServiceListRequest, opts ...grpc.CallOption) (*MeasureRegistryServiceListResponse, error)
}

type measureRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeasureRegistryServiceClient(cc grpc.ClientConnInterface) MeasureRegistryServiceClient {
	return &measureRegistryServiceClient{cc}
}

func (c *measureRegistryServiceClient) Create(ctx context.Context, in *MeasureRegistryServiceCreateRequest, opts ...grpc.CallOption) (*MeasureRegistryServiceCreateResponse, error) {
	out := new(MeasureRegistryServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.MeasureRegistryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureRegistryServiceClient) Update(ctx context.Context, in *MeasureRegistryServiceUpdateRequest, opts ...grpc.CallOption) (*MeasureRegistryServiceUpdateResponse, error) {
	out := new(MeasureRegistryServiceUpdateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.MeasureRegistryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureRegistryServiceClient) Delete(ctx context.Context, in *MeasureRegistryServiceDeleteRequest, opts ...grpc.CallOption) (*MeasureRegistryServiceDeleteResponse, error) {
	out := new(MeasureRegistryServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.MeasureRegistryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureRegistryServiceClient) Get(ctx context.Context, in *MeasureRegistryServiceGetRequest, opts ...grpc.CallOption) (*MeasureRegistryServiceGetResponse, error) {
	out := new(MeasureRegistryServiceGetResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.MeasureRegistryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureRegistryServiceClient) List(ctx context.Context, in *MeasureRegistryServiceListRequest, opts ...grpc.CallOption) (*MeasureRegistryServiceListResponse, error) {
	out := new(MeasureRegistryServiceListResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.MeasureRegistryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeasureRegistryServiceServer is the server API for MeasureRegistryService service.
// All implementations must embed UnimplementedMeasureRegistryServiceServer
// for forward compatibility
type MeasureRegistryServiceServer interface {
	Create(context.Context, *MeasureRegistryServiceCreateRequest) (*MeasureRegistryServiceCreateResponse, error)
	Update(context.Context, *MeasureRegistryServiceUpdateRequest) (*MeasureRegistryServiceUpdateResponse, error)
	Delete(context.Context, *MeasureRegistryServiceDeleteRequest) (*MeasureRegistryServiceDeleteResponse, error)
	Get(context.Context, *MeasureRegistryServiceGetRequest) (*MeasureRegistryServiceGetResponse, error)
	List(context.Context, *MeasureRegistryServiceListRequest) (*MeasureRegistryServiceListResponse, error)
	mustEmbedUnimplementedMeasureRegistryServiceServer()
}

// UnimplementedMeasureRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeasureRegistryServiceServer struct {
}

func (UnimplementedMeasureRegistryServiceServer) Create(context.Context, *MeasureRegistryServiceCreateRequest) (*MeasureRegistryServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMeasureRegistryServiceServer) Update(context.Context, *MeasureRegistryServiceUpdateRequest) (*MeasureRegistryServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMeasureRegistryServiceServer) Delete(context.Context, *MeasureRegistryServiceDeleteRequest) (*MeasureRegistryServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMeasureRegistryServiceServer) Get(context.Context, *MeasureRegistryServiceGetRequest) (*MeasureRegistryServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedMeasureRegistryServiceServer) List(context.Context, *MeasureRegistryServiceListRequest) (*MeasureRegistryServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMeasureRegistryServiceServer) mustEmbedUnimplementedMeasureRegistryServiceServer() {
}

// UnsafeMeasureRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeasureRegistryServiceServer will
// result in compilation errors.
type UnsafeMeasureRegistryServiceServer interface {
	mustEmbedUnimplementedMeasureRegistryServiceServer()
}

func RegisterMeasureRegistryServiceServer(s grpc.ServiceRegistrar, srv MeasureRegistryServiceServer) {
	s.RegisterService(&MeasureRegistryService_ServiceDesc, srv)
}

func _MeasureRegistryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasureRegistryServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureRegistryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.MeasureRegistryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureRegistryServiceServer).Create(ctx, req.(*MeasureRegistryServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasureRegistryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasureRegistryServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureRegistryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.MeasureRegistryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureRegistryServiceServer).Update(ctx, req.(*MeasureRegistryServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasureRegistryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasureRegistryServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureRegistryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.MeasureRegistryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureRegistryServiceServer).Delete(ctx, req.(*MeasureRegistryServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasureRegistryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasureRegistryServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureRegistryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.MeasureRegistryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureRegistryServiceServer).Get(ctx, req.(*MeasureRegistryServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasureRegistryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MeasureRegistryServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureRegistryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.MeasureRegistryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureRegistryServiceServer).List(ctx, req.(*MeasureRegistryServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeasureRegistryService_ServiceDesc is the grpc.ServiceDesc for MeasureRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeasureRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banyandb.database.v1.MeasureRegistryService",
	HandlerType: (*MeasureRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MeasureRegistryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MeasureRegistryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MeasureRegistryService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MeasureRegistryService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MeasureRegistryService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banyandb/database/v1/rpc.proto",
}

// GroupRegistryServiceClient is the client API for GroupRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupRegistryServiceClient interface {
	Create(ctx context.Context, in *GroupRegistryServiceCreateRequest, opts ...grpc.CallOption) (*GroupRegistryServiceCreateResponse, error)
	Update(ctx context.Context, in *GroupRegistryServiceUpdateRequest, opts ...grpc.CallOption) (*GroupRegistryServiceUpdateResponse, error)
	Delete(ctx context.Context, in *GroupRegistryServiceDeleteRequest, opts ...grpc.CallOption) (*GroupRegistryServiceDeleteResponse, error)
	Get(ctx context.Context, in *GroupRegistryServiceGetRequest, opts ...grpc.CallOption) (*GroupRegistryServiceGetResponse, error)
	List(ctx context.Context, in *GroupRegistryServiceListRequest, opts ...grpc.CallOption) (*GroupRegistryServiceListResponse, error)
}

type groupRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupRegistryServiceClient(cc grpc.ClientConnInterface) GroupRegistryServiceClient {
	return &groupRegistryServiceClient{cc}
}

func (c *groupRegistryServiceClient) Create(ctx context.Context, in *GroupRegistryServiceCreateRequest, opts ...grpc.CallOption) (*GroupRegistryServiceCreateResponse, error) {
	out := new(GroupRegistryServiceCreateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.GroupRegistryService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRegistryServiceClient) Update(ctx context.Context, in *GroupRegistryServiceUpdateRequest, opts ...grpc.CallOption) (*GroupRegistryServiceUpdateResponse, error) {
	out := new(GroupRegistryServiceUpdateResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.GroupRegistryService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRegistryServiceClient) Delete(ctx context.Context, in *GroupRegistryServiceDeleteRequest, opts ...grpc.CallOption) (*GroupRegistryServiceDeleteResponse, error) {
	out := new(GroupRegistryServiceDeleteResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.GroupRegistryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRegistryServiceClient) Get(ctx context.Context, in *GroupRegistryServiceGetRequest, opts ...grpc.CallOption) (*GroupRegistryServiceGetResponse, error) {
	out := new(GroupRegistryServiceGetResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.GroupRegistryService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupRegistryServiceClient) List(ctx context.Context, in *GroupRegistryServiceListRequest, opts ...grpc.CallOption) (*GroupRegistryServiceListResponse, error) {
	out := new(GroupRegistryServiceListResponse)
	err := c.cc.Invoke(ctx, "/banyandb.database.v1.GroupRegistryService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupRegistryServiceServer is the server API for GroupRegistryService service.
// All implementations must embed UnimplementedGroupRegistryServiceServer
// for forward compatibility
type GroupRegistryServiceServer interface {
	Create(context.Context, *GroupRegistryServiceCreateRequest) (*GroupRegistryServiceCreateResponse, error)
	Update(context.Context, *GroupRegistryServiceUpdateRequest) (*GroupRegistryServiceUpdateResponse, error)
	Delete(context.Context, *GroupRegistryServiceDeleteRequest) (*GroupRegistryServiceDeleteResponse, error)
	Get(context.Context, *GroupRegistryServiceGetRequest) (*GroupRegistryServiceGetResponse, error)
	List(context.Context, *GroupRegistryServiceListRequest) (*GroupRegistryServiceListResponse, error)
	mustEmbedUnimplementedGroupRegistryServiceServer()
}

// UnimplementedGroupRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGroupRegistryServiceServer struct {
}

func (UnimplementedGroupRegistryServiceServer) Create(context.Context, *GroupRegistryServiceCreateRequest) (*GroupRegistryServiceCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGroupRegistryServiceServer) Update(context.Context, *GroupRegistryServiceUpdateRequest) (*GroupRegistryServiceUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGroupRegistryServiceServer) Delete(context.Context, *GroupRegistryServiceDeleteRequest) (*GroupRegistryServiceDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGroupRegistryServiceServer) Get(context.Context, *GroupRegistryServiceGetRequest) (*GroupRegistryServiceGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGroupRegistryServiceServer) List(context.Context, *GroupRegistryServiceListRequest) (*GroupRegistryServiceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGroupRegistryServiceServer) mustEmbedUnimplementedGroupRegistryServiceServer() {}

// UnsafeGroupRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupRegistryServiceServer will
// result in compilation errors.
type UnsafeGroupRegistryServiceServer interface {
	mustEmbedUnimplementedGroupRegistryServiceServer()
}

func RegisterGroupRegistryServiceServer(s grpc.ServiceRegistrar, srv GroupRegistryServiceServer) {
	s.RegisterService(&GroupRegistryService_ServiceDesc, srv)
}

func _GroupRegistryService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRegistryServiceCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRegistryServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.GroupRegistryService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRegistryServiceServer).Create(ctx, req.(*GroupRegistryServiceCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRegistryService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRegistryServiceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRegistryServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.GroupRegistryService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRegistryServiceServer).Update(ctx, req.(*GroupRegistryServiceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRegistryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRegistryServiceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRegistryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.GroupRegistryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRegistryServiceServer).Delete(ctx, req.(*GroupRegistryServiceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRegistryService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRegistryServiceGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRegistryServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.GroupRegistryService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRegistryServiceServer).Get(ctx, req.(*GroupRegistryServiceGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupRegistryService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRegistryServiceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupRegistryServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.database.v1.GroupRegistryService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupRegistryServiceServer).List(ctx, req.(*GroupRegistryServiceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupRegistryService_ServiceDesc is the grpc.ServiceDesc for GroupRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banyandb.database.v1.GroupRegistryService",
	HandlerType: (*GroupRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GroupRegistryService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GroupRegistryService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GroupRegistryService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GroupRegistryService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GroupRegistryService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "banyandb/database/v1/rpc.proto",
}
