// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

option java_package = "org.apache.skywalking.banyandb.trace.v1";
option go_package = "github.com/apache/skywalking-banyandb/api/proto/banyandb/trace/v1";

package banyandb.trace.v1;

import "google/protobuf/timestamp.proto";
import "banyandb/common/v1/common.proto";
import "banyandb/model/v1/query.proto";

// Entity represents
// (Trace context) a Span defined in Google Dapper paper or equivalently a Segment in Skywalking.
// (Log context) a log
message Entity {
  // entity_id could be span_id of a Span or segment_id of a Segment in the context of Trace
  string entity_id = 1;
  // timestamp represents
  // 1) either the start time of a Span/Segment,
  // 2) or the timestamp of a log
  google.protobuf.Timestamp timestamp = 2;
  // data_binary contains all un-indexed Tags and other key-value pairs
  bytes data_binary = 3;
  // fields contains all indexed Field. Some typical names,
  // - trace_id
  // - duration
  // - service_name
  // - service_instance_id
  // - end_time_nanoseconds
  repeated model.v1.TypedPair fields = 4;
}

// QueryResponse is the response for a query to the Query module.
message QueryResponse {
  // entities are the actual data returned
  repeated Entity entities = 1;
}

// QueryRequest is the request contract for query.
message QueryRequest {
  // metadata is required
  common.v1.Metadata metadata = 1;
  // time_range is a range query with begin/end time of entities in the timeunit of nanoseconds.
  // In the context of Trace, it represents the range of the `startTime` for spans/segments,
  // while in the context of Log, it means the range of the timestamp(s) for logs.
  // it is always recommended to specify time range for performance reason
  model.v1.TimeRange time_range = 2;
  // offset is used to support pagination, together with the following limit
  uint32 offset = 3;
  // limit is used to impose a boundary on the number of records being returned
  uint32 limit = 4;
  // order_by is given to specify the sort for a field. So far, only fields in the type of Integer are supported
  model.v1.QueryOrder order_by = 5;
  // fields are indexed. Some typical fields are listed below,
  // - trace_id: if given, it takes precedence over other fields and will be used to retrieve entities before other conditions are imposed
  // - duration: typical for trace context
  repeated model.v1.PairQuery fields = 6;
  // projection can be used to select the key names of the entities in the response
  model.v1.Projection projection = 7;
}
