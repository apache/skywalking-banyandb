// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: banyandb/v1/schema.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Duration_Duration int32

const (
	Duration_DURATION_UNSPECIFIED Duration_Duration = 0
	Duration_DURATION_HOUR        Duration_Duration = 1
	Duration_DURATION_DAY         Duration_Duration = 2
	Duration_DURATION_WEEK        Duration_Duration = 3
	Duration_DURATION_MONTH       Duration_Duration = 4
)

// Enum value maps for Duration_Duration.
var (
	Duration_Duration_name = map[int32]string{
		0: "DURATION_UNSPECIFIED",
		1: "DURATION_HOUR",
		2: "DURATION_DAY",
		3: "DURATION_WEEK",
		4: "DURATION_MONTH",
	}
	Duration_Duration_value = map[string]int32{
		"DURATION_UNSPECIFIED": 0,
		"DURATION_HOUR":        1,
		"DURATION_DAY":         2,
		"DURATION_WEEK":        3,
		"DURATION_MONTH":       4,
	}
)

func (x Duration_Duration) Enum() *Duration_Duration {
	p := new(Duration_Duration)
	*p = x
	return p
}

func (x Duration_Duration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Duration_Duration) Descriptor() protoreflect.EnumDescriptor {
	return file_banyandb_v1_schema_proto_enumTypes[0].Descriptor()
}

func (Duration_Duration) Type() protoreflect.EnumType {
	return &file_banyandb_v1_schema_proto_enumTypes[0]
}

func (x Duration_Duration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Duration_Duration.Descriptor instead.
func (Duration_Duration) EnumDescriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{1, 0}
}

type FieldSpec_FieldType int32

const (
	FieldSpec_FIELD_TYPE_UNSPECIFIED  FieldSpec_FieldType = 0
	FieldSpec_FIELD_TYPE_STRING       FieldSpec_FieldType = 1
	FieldSpec_FIELD_TYPE_INT          FieldSpec_FieldType = 2
	FieldSpec_FIELD_TYPE_STRING_ARRAY FieldSpec_FieldType = 3
	FieldSpec_FIELD_TYPE_INT_ARRAY    FieldSpec_FieldType = 4
)

// Enum value maps for FieldSpec_FieldType.
var (
	FieldSpec_FieldType_name = map[int32]string{
		0: "FIELD_TYPE_UNSPECIFIED",
		1: "FIELD_TYPE_STRING",
		2: "FIELD_TYPE_INT",
		3: "FIELD_TYPE_STRING_ARRAY",
		4: "FIELD_TYPE_INT_ARRAY",
	}
	FieldSpec_FieldType_value = map[string]int32{
		"FIELD_TYPE_UNSPECIFIED":  0,
		"FIELD_TYPE_STRING":       1,
		"FIELD_TYPE_INT":          2,
		"FIELD_TYPE_STRING_ARRAY": 3,
		"FIELD_TYPE_INT_ARRAY":    4,
	}
)

func (x FieldSpec_FieldType) Enum() *FieldSpec_FieldType {
	p := new(FieldSpec_FieldType)
	*p = x
	return p
}

func (x FieldSpec_FieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldSpec_FieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_banyandb_v1_schema_proto_enumTypes[1].Descriptor()
}

func (FieldSpec_FieldType) Type() protoreflect.EnumType {
	return &file_banyandb_v1_schema_proto_enumTypes[1]
}

func (x FieldSpec_FieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldSpec_FieldType.Descriptor instead.
func (FieldSpec_FieldType) EnumDescriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{2, 0}
}

// IndexType determine the index structure under the hood
// Fields with SeriesInternal type is reserved by Series module, would not be indexed by Index module.
type IndexObject_IndexType int32

const (
	IndexObject_INDEX_TYPE_UNSPECIFIED     IndexObject_IndexType = 0
	IndexObject_INDEX_TYPE_TEXT            IndexObject_IndexType = 1
	IndexObject_INDEX_TYPE_NUMERICAL       IndexObject_IndexType = 2
	IndexObject_INDEX_TYPE_ID              IndexObject_IndexType = 3
	IndexObject_INDEX_TYPE_MULTI_TEXT      IndexObject_IndexType = 4
	IndexObject_INDEX_TYPE_MULTI_NUMERICAL IndexObject_IndexType = 5
	IndexObject_INDEX_TYPE_SERIES_INTERNAL IndexObject_IndexType = 6
)

// Enum value maps for IndexObject_IndexType.
var (
	IndexObject_IndexType_name = map[int32]string{
		0: "INDEX_TYPE_UNSPECIFIED",
		1: "INDEX_TYPE_TEXT",
		2: "INDEX_TYPE_NUMERICAL",
		3: "INDEX_TYPE_ID",
		4: "INDEX_TYPE_MULTI_TEXT",
		5: "INDEX_TYPE_MULTI_NUMERICAL",
		6: "INDEX_TYPE_SERIES_INTERNAL",
	}
	IndexObject_IndexType_value = map[string]int32{
		"INDEX_TYPE_UNSPECIFIED":     0,
		"INDEX_TYPE_TEXT":            1,
		"INDEX_TYPE_NUMERICAL":       2,
		"INDEX_TYPE_ID":              3,
		"INDEX_TYPE_MULTI_TEXT":      4,
		"INDEX_TYPE_MULTI_NUMERICAL": 5,
		"INDEX_TYPE_SERIES_INTERNAL": 6,
	}
)

func (x IndexObject_IndexType) Enum() *IndexObject_IndexType {
	p := new(IndexObject_IndexType)
	*p = x
	return p
}

func (x IndexObject_IndexType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IndexObject_IndexType) Descriptor() protoreflect.EnumDescriptor {
	return file_banyandb_v1_schema_proto_enumTypes[2].Descriptor()
}

func (IndexObject_IndexType) Type() protoreflect.EnumType {
	return &file_banyandb_v1_schema_proto_enumTypes[2]
}

func (x IndexObject_IndexType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IndexObject_IndexType.Descriptor instead.
func (IndexObject_IndexType) EnumDescriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{6, 0}
}

// Catalog refers to a placement contains objects belonged to a particular data type
type Series_Catalog int32

const (
	Series_CATALOG_UNSPECIFIED Series_Catalog = 0
	Series_CATALOG_TRACE       Series_Catalog = 1
	Series_CATALOG_LOG         Series_Catalog = 2
	Series_CATALOG_METRIC      Series_Catalog = 3
)

// Enum value maps for Series_Catalog.
var (
	Series_Catalog_name = map[int32]string{
		0: "CATALOG_UNSPECIFIED",
		1: "CATALOG_TRACE",
		2: "CATALOG_LOG",
		3: "CATALOG_METRIC",
	}
	Series_Catalog_value = map[string]int32{
		"CATALOG_UNSPECIFIED": 0,
		"CATALOG_TRACE":       1,
		"CATALOG_LOG":         2,
		"CATALOG_METRIC":      3,
	}
)

func (x Series_Catalog) Enum() *Series_Catalog {
	p := new(Series_Catalog)
	*p = x
	return p
}

func (x Series_Catalog) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Series_Catalog) Descriptor() protoreflect.EnumDescriptor {
	return file_banyandb_v1_schema_proto_enumTypes[3].Descriptor()
}

func (Series_Catalog) Type() protoreflect.EnumType {
	return &file_banyandb_v1_schema_proto_enumTypes[3]
}

func (x Series_Catalog) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Series_Catalog.Descriptor instead.
func (Series_Catalog) EnumDescriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{8, 0}
}

type ShardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number        uint32   `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	RoutingFields []string `protobuf:"bytes,2,rep,name=routing_fields,json=routingFields,proto3" json:"routing_fields,omitempty"`
}

func (x *ShardInfo) Reset() {
	*x = ShardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_v1_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardInfo) ProtoMessage() {}

func (x *ShardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_v1_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardInfo.ProtoReflect.Descriptor instead.
func (*ShardInfo) Descriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{0}
}

func (x *ShardInfo) GetNumber() uint32 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *ShardInfo) GetRoutingFields() []string {
	if x != nil {
		return x.RoutingFields
	}
	return nil
}

// Duration represents the elapsed time between two instants
type Duration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val  uint32            `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
	Unit Duration_Duration `protobuf:"varint,2,opt,name=unit,proto3,enum=banyandb.v1.Duration_Duration" json:"unit,omitempty"`
}

func (x *Duration) Reset() {
	*x = Duration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_v1_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Duration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Duration) ProtoMessage() {}

func (x *Duration) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_v1_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Duration.ProtoReflect.Descriptor instead.
func (*Duration) Descriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Duration) GetVal() uint32 {
	if x != nil {
		return x.Val
	}
	return 0
}

func (x *Duration) GetUnit() Duration_Duration {
	if x != nil {
		return x.Unit
	}
	return Duration_DURATION_UNSPECIFIED
}

type FieldSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type FieldSpec_FieldType `protobuf:"varint,2,opt,name=type,proto3,enum=banyandb.v1.FieldSpec_FieldType" json:"type,omitempty"`
}

func (x *FieldSpec) Reset() {
	*x = FieldSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_v1_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldSpec) ProtoMessage() {}

func (x *FieldSpec) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_v1_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldSpec.ProtoReflect.Descriptor instead.
func (*FieldSpec) Descriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{2}
}

func (x *FieldSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldSpec) GetType() FieldSpec_FieldType {
	if x != nil {
		return x.Type
	}
	return FieldSpec_FIELD_TYPE_UNSPECIFIED
}

type TraceStateMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field      string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	ValSuccess string `protobuf:"bytes,2,opt,name=val_success,json=valSuccess,proto3" json:"val_success,omitempty"`
	ValError   string `protobuf:"bytes,3,opt,name=val_error,json=valError,proto3" json:"val_error,omitempty"`
}

func (x *TraceStateMap) Reset() {
	*x = TraceStateMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_v1_schema_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceStateMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceStateMap) ProtoMessage() {}

func (x *TraceStateMap) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_v1_schema_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceStateMap.ProtoReflect.Descriptor instead.
func (*TraceStateMap) Descriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{3}
}

func (x *TraceStateMap) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *TraceStateMap) GetValSuccess() string {
	if x != nil {
		return x.ValSuccess
	}
	return ""
}

func (x *TraceStateMap) GetValError() string {
	if x != nil {
		return x.ValError
	}
	return ""
}

// The key in TraceFieldMap are reserved by trace series engine. Their corresponding value is the Fields or
// the combination of Fields
type TraceFieldMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// trace_id the unique identity of a single trace
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// series_id groups entities into a storage bucket
	SeriesId []string `protobuf:"bytes,2,rep,name=series_id,json=seriesId,proto3" json:"series_id,omitempty"`
	// state indicates the trace is "success" or "error"
	State *TraceStateMap `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *TraceFieldMap) Reset() {
	*x = TraceFieldMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_v1_schema_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceFieldMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceFieldMap) ProtoMessage() {}

func (x *TraceFieldMap) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_v1_schema_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceFieldMap.ProtoReflect.Descriptor instead.
func (*TraceFieldMap) Descriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{4}
}

func (x *TraceFieldMap) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *TraceFieldMap) GetSeriesId() []string {
	if x != nil {
		return x.SeriesId
	}
	return nil
}

func (x *TraceFieldMap) GetState() *TraceStateMap {
	if x != nil {
		return x.State
	}
	return nil
}

// TraceSeries represents a trace storage object
type TraceSeries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metadata is the identity of a trace series
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// fields defines accepted fields
	Fields []*FieldSpec `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// reserved_fields_map indicates how to index reserved fields to ingested fields
	ReservedFieldsMap *TraceFieldMap `protobuf:"bytes,3,opt,name=reserved_fields_map,json=reservedFieldsMap,proto3" json:"reserved_fields_map,omitempty"`
	// shard indicates how trace data distributes
	Shard *ShardInfo `protobuf:"bytes,4,opt,name=shard,proto3" json:"shard,omitempty"`
	// duration determines how long a TraceSeries keeps its data
	Duration *Duration `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	// updated_at_nanoseconds indicates when the TraceSeries is updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *TraceSeries) Reset() {
	*x = TraceSeries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_v1_schema_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraceSeries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraceSeries) ProtoMessage() {}

func (x *TraceSeries) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_v1_schema_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraceSeries.ProtoReflect.Descriptor instead.
func (*TraceSeries) Descriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{5}
}

func (x *TraceSeries) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TraceSeries) GetFields() []*FieldSpec {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TraceSeries) GetReservedFieldsMap() *TraceFieldMap {
	if x != nil {
		return x.ReservedFieldsMap
	}
	return nil
}

func (x *TraceSeries) GetShard() *ShardInfo {
	if x != nil {
		return x.Shard
	}
	return nil
}

func (x *TraceSeries) GetDuration() *Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *TraceSeries) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// IndexObject defines who should be indexed.
type IndexObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name is the identity of a IndexObject
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// fields are the combination that refers to an indexed object
	// If the elements in fields are more than 1, the object will generate a multi-field index
	// Caveat: All fields in a multi-field index MUST have an identical IndexType
	Fields []string `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// type is the IndexType of this IndexObject.
	Type IndexObject_IndexType `protobuf:"varint,3,opt,name=type,proto3,enum=banyandb.v1.IndexObject_IndexType" json:"type,omitempty"`
}

func (x *IndexObject) Reset() {
	*x = IndexObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_v1_schema_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexObject) ProtoMessage() {}

func (x *IndexObject) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_v1_schema_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexObject.ProtoReflect.Descriptor instead.
func (*IndexObject) Descriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{6}
}

func (x *IndexObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndexObject) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *IndexObject) GetType() IndexObject_IndexType {
	if x != nil {
		return x.Type
	}
	return IndexObject_INDEX_TYPE_UNSPECIFIED
}

// IndexRule defines how to generate indices based on IndexObject
// IndexRule should bind to an Series through an IndexRuleBinding to generate proper indices.
// Example: A trace entity wants to index fields: trace_id, service_name, endpoint_name, and latency.
//          and service_name and endpoint_name would combine a multi-field index.
// The index rule could be:
// IndexRule {
//     metadata: {
//         name: sw_trace
//         group: production
//     }
//     objects: [
//        {
//            fields: [trace_id]
//            type: ID
//        },
//        {
//            fields: [service_name, endpoint_name]
//            type: Text
//        },
//        {
//            fields: [latency]
//            type: Numerical
//        },
//    ]
//    updated_at_nanoseconds: .......
// }
type IndexRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metadata define the rule's identity
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// objects refer to which fields should be indexed
	Objects []*IndexObject `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty"`
	// updated_at_nanoseconds indicates when the IndexRule is updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *IndexRule) Reset() {
	*x = IndexRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_v1_schema_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRule) ProtoMessage() {}

func (x *IndexRule) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_v1_schema_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRule.ProtoReflect.Descriptor instead.
func (*IndexRule) Descriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{7}
}

func (x *IndexRule) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IndexRule) GetObjects() []*IndexObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *IndexRule) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

// Series defines which subject(series) would generate indices
// For example, if a TraceSeries's metadata is {name: sw_trace, group: production},
//                in consequence, the Series is
//                series {
//                    catalog: Trace
//                    series: {name: sw_trace, group: production}
//                }
type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// catalog is where the subject/series belongs to
	Catalog Series_Catalog `protobuf:"varint,1,opt,name=catalog,proto3,enum=banyandb.v1.Series_Catalog" json:"catalog,omitempty"`
	// series refers to a series in a particular catalog
	Series *Metadata `protobuf:"bytes,2,opt,name=series,proto3" json:"series,omitempty"`
}

func (x *Series) Reset() {
	*x = Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_v1_schema_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_v1_schema_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{8}
}

func (x *Series) GetCatalog() Series_Catalog {
	if x != nil {
		return x.Catalog
	}
	return Series_CATALOG_UNSPECIFIED
}

func (x *Series) GetSeries() *Metadata {
	if x != nil {
		return x.Series
	}
	return nil
}

// IndexRuleBinding is a bridge to connect an IndexRule to several Series
// This binding is valid between begin_at_nanoseconds and expire_at_nanoseconds, that provides flexible strategies
// to control how to generate time series indices.
type IndexRuleBinding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metadata is the identity of this binding
	Metadata *Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// rule_ref refers to the IndexRule
	RuleRef *Metadata `protobuf:"bytes,2,opt,name=rule_ref,json=ruleRef,proto3" json:"rule_ref,omitempty"`
	// subjects indicate the subjects of binding action
	Subjects []*Series `protobuf:"bytes,3,rep,name=subjects,proto3" json:"subjects,omitempty"`
	// begin_at_nanoseconds is the timestamp, after which the binding will be active
	BeginAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=begin_at,json=beginAt,proto3" json:"begin_at,omitempty"`
	// expire_at_nanoseconds it the timestamp, after which the binding will be inactive
	// expire_at_nanoseconds must be larger than begin_at_nanoseconds
	ExpireAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
	// updated_at_nanoseconds indicates when the IndexRuleBinding is updated
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *IndexRuleBinding) Reset() {
	*x = IndexRuleBinding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_banyandb_v1_schema_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexRuleBinding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexRuleBinding) ProtoMessage() {}

func (x *IndexRuleBinding) ProtoReflect() protoreflect.Message {
	mi := &file_banyandb_v1_schema_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexRuleBinding.ProtoReflect.Descriptor instead.
func (*IndexRuleBinding) Descriptor() ([]byte, []int) {
	return file_banyandb_v1_schema_proto_rawDescGZIP(), []int{9}
}

func (x *IndexRuleBinding) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *IndexRuleBinding) GetRuleRef() *Metadata {
	if x != nil {
		return x.RuleRef
	}
	return nil
}

func (x *IndexRuleBinding) GetSubjects() []*Series {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *IndexRuleBinding) GetBeginAt() *timestamppb.Timestamp {
	if x != nil {
		return x.BeginAt
	}
	return nil
}

func (x *IndexRuleBinding) GetExpireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

func (x *IndexRuleBinding) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

var File_banyandb_v1_schema_proto protoreflect.FileDescriptor

var file_banyandb_v1_schema_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x61, 0x6e, 0x79,
	0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e,
	0x64, 0x62, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x22, 0xc2, 0x01, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12,
	0x32, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x22, 0x70, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f,
	0x4e, 0x54, 0x48, 0x10, 0x04, 0x22, 0xe1, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x89, 0x01,
	0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x46,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x03, 0x12,
	0x18, 0x0a, 0x14, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x04, 0x22, 0x63, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x79,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d,
	0x61, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd8, 0x02, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4a, 0x0a, 0x13,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x61, 0x6e, 0x79,
	0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x70, 0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x2c, 0x0a, 0x05, 0x73, 0x68, 0x61, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e,
	0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x73, 0x68, 0x61, 0x72, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xb8, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x44, 0x45, 0x58,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x44, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x04, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x12,
	0x1e, 0x0a, 0x1a, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45,
	0x52, 0x49, 0x45, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x06, 0x22,
	0xad, 0x01, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x31, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x32, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xca, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61,
	0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73,
	0x22, 0x5a, 0x0a, 0x07, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f,
	0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x54, 0x41, 0x4c,
	0x4f, 0x47, 0x5f, 0x4c, 0x4f, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x54, 0x41,
	0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x10, 0x03, 0x22, 0xd3, 0x02, 0x0a,
	0x10, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x31, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64,
	0x62, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x72,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12, 0x2f, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x61, 0x6e, 0x79, 0x61,
	0x6e, 0x64, 0x62, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x52, 0x08, 0x73,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x65, 0x67, 0x69, 0x6e,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x41, 0x74, 0x12, 0x37,
	0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x60, 0x0a, 0x1e, 0x6f, 0x72, 0x67, 0x2e, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65,
	0x2e, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x61, 0x6e, 0x79,
	0x61, 0x6e, 0x64, 0x62, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x73, 0x6b, 0x79, 0x77, 0x61, 0x6c, 0x6b, 0x69,
	0x6e, 0x67, 0x2d, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x61, 0x6e, 0x79, 0x61, 0x6e, 0x64, 0x62, 0x2f, 0x76,
	0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_banyandb_v1_schema_proto_rawDescOnce sync.Once
	file_banyandb_v1_schema_proto_rawDescData = file_banyandb_v1_schema_proto_rawDesc
)

func file_banyandb_v1_schema_proto_rawDescGZIP() []byte {
	file_banyandb_v1_schema_proto_rawDescOnce.Do(func() {
		file_banyandb_v1_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_banyandb_v1_schema_proto_rawDescData)
	})
	return file_banyandb_v1_schema_proto_rawDescData
}

var file_banyandb_v1_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_banyandb_v1_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_banyandb_v1_schema_proto_goTypes = []interface{}{
	(Duration_Duration)(0),        // 0: banyandb.v1.Duration.Duration
	(FieldSpec_FieldType)(0),      // 1: banyandb.v1.FieldSpec.FieldType
	(IndexObject_IndexType)(0),    // 2: banyandb.v1.IndexObject.IndexType
	(Series_Catalog)(0),           // 3: banyandb.v1.Series.Catalog
	(*ShardInfo)(nil),             // 4: banyandb.v1.ShardInfo
	(*Duration)(nil),              // 5: banyandb.v1.Duration
	(*FieldSpec)(nil),             // 6: banyandb.v1.FieldSpec
	(*TraceStateMap)(nil),         // 7: banyandb.v1.TraceStateMap
	(*TraceFieldMap)(nil),         // 8: banyandb.v1.TraceFieldMap
	(*TraceSeries)(nil),           // 9: banyandb.v1.TraceSeries
	(*IndexObject)(nil),           // 10: banyandb.v1.IndexObject
	(*IndexRule)(nil),             // 11: banyandb.v1.IndexRule
	(*Series)(nil),                // 12: banyandb.v1.Series
	(*IndexRuleBinding)(nil),      // 13: banyandb.v1.IndexRuleBinding
	(*Metadata)(nil),              // 14: banyandb.v1.Metadata
	(*timestamppb.Timestamp)(nil), // 15: google.protobuf.Timestamp
}
var file_banyandb_v1_schema_proto_depIdxs = []int32{
	0,  // 0: banyandb.v1.Duration.unit:type_name -> banyandb.v1.Duration.Duration
	1,  // 1: banyandb.v1.FieldSpec.type:type_name -> banyandb.v1.FieldSpec.FieldType
	7,  // 2: banyandb.v1.TraceFieldMap.state:type_name -> banyandb.v1.TraceStateMap
	14, // 3: banyandb.v1.TraceSeries.metadata:type_name -> banyandb.v1.Metadata
	6,  // 4: banyandb.v1.TraceSeries.fields:type_name -> banyandb.v1.FieldSpec
	8,  // 5: banyandb.v1.TraceSeries.reserved_fields_map:type_name -> banyandb.v1.TraceFieldMap
	4,  // 6: banyandb.v1.TraceSeries.shard:type_name -> banyandb.v1.ShardInfo
	5,  // 7: banyandb.v1.TraceSeries.duration:type_name -> banyandb.v1.Duration
	15, // 8: banyandb.v1.TraceSeries.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 9: banyandb.v1.IndexObject.type:type_name -> banyandb.v1.IndexObject.IndexType
	14, // 10: banyandb.v1.IndexRule.metadata:type_name -> banyandb.v1.Metadata
	10, // 11: banyandb.v1.IndexRule.objects:type_name -> banyandb.v1.IndexObject
	15, // 12: banyandb.v1.IndexRule.updated_at:type_name -> google.protobuf.Timestamp
	3,  // 13: banyandb.v1.Series.catalog:type_name -> banyandb.v1.Series.Catalog
	14, // 14: banyandb.v1.Series.series:type_name -> banyandb.v1.Metadata
	14, // 15: banyandb.v1.IndexRuleBinding.metadata:type_name -> banyandb.v1.Metadata
	14, // 16: banyandb.v1.IndexRuleBinding.rule_ref:type_name -> banyandb.v1.Metadata
	12, // 17: banyandb.v1.IndexRuleBinding.subjects:type_name -> banyandb.v1.Series
	15, // 18: banyandb.v1.IndexRuleBinding.begin_at:type_name -> google.protobuf.Timestamp
	15, // 19: banyandb.v1.IndexRuleBinding.expire_at:type_name -> google.protobuf.Timestamp
	15, // 20: banyandb.v1.IndexRuleBinding.updated_at:type_name -> google.protobuf.Timestamp
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_banyandb_v1_schema_proto_init() }
func file_banyandb_v1_schema_proto_init() {
	if File_banyandb_v1_schema_proto != nil {
		return
	}
	file_banyandb_v1_database_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_banyandb_v1_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_v1_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Duration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_v1_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_v1_schema_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceStateMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_v1_schema_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceFieldMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_v1_schema_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraceSeries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_v1_schema_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_v1_schema_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_v1_schema_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_banyandb_v1_schema_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexRuleBinding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_banyandb_v1_schema_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_banyandb_v1_schema_proto_goTypes,
		DependencyIndexes: file_banyandb_v1_schema_proto_depIdxs,
		EnumInfos:         file_banyandb_v1_schema_proto_enumTypes,
		MessageInfos:      file_banyandb_v1_schema_proto_msgTypes,
	}.Build()
	File_banyandb_v1_schema_proto = out.File
	file_banyandb_v1_schema_proto_rawDesc = nil
	file_banyandb_v1_schema_proto_goTypes = nil
	file_banyandb_v1_schema_proto_depIdxs = nil
}
