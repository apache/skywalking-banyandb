// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: banyandb/measure/v1/rpc.proto

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MeasureServiceClient is the client API for MeasureService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeasureServiceClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (MeasureService_WriteClient, error)
	TopN(ctx context.Context, in *TopNRequest, opts ...grpc.CallOption) (*TopNResponse, error)
}

type measureServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMeasureServiceClient(cc grpc.ClientConnInterface) MeasureServiceClient {
	return &measureServiceClient{cc}
}

func (c *measureServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/banyandb.measure.v1.MeasureService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *measureServiceClient) Write(ctx context.Context, opts ...grpc.CallOption) (MeasureService_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &MeasureService_ServiceDesc.Streams[0], "/banyandb.measure.v1.MeasureService/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &measureServiceWriteClient{stream}
	return x, nil
}

type MeasureService_WriteClient interface {
	Send(*WriteRequest) error
	Recv() (*WriteResponse, error)
	grpc.ClientStream
}

type measureServiceWriteClient struct {
	grpc.ClientStream
}

func (x *measureServiceWriteClient) Send(m *WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *measureServiceWriteClient) Recv() (*WriteResponse, error) {
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *measureServiceClient) TopN(ctx context.Context, in *TopNRequest, opts ...grpc.CallOption) (*TopNResponse, error) {
	out := new(TopNResponse)
	err := c.cc.Invoke(ctx, "/banyandb.measure.v1.MeasureService/TopN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeasureServiceServer is the server API for MeasureService service.
// All implementations must embed UnimplementedMeasureServiceServer
// for forward compatibility
type MeasureServiceServer interface {
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	Write(MeasureService_WriteServer) error
	TopN(context.Context, *TopNRequest) (*TopNResponse, error)
	mustEmbedUnimplementedMeasureServiceServer()
}

// UnimplementedMeasureServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMeasureServiceServer struct {
}

func (UnimplementedMeasureServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedMeasureServiceServer) Write(MeasureService_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedMeasureServiceServer) TopN(context.Context, *TopNRequest) (*TopNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopN not implemented")
}
func (UnimplementedMeasureServiceServer) mustEmbedUnimplementedMeasureServiceServer() {}

// UnsafeMeasureServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeasureServiceServer will
// result in compilation errors.
type UnsafeMeasureServiceServer interface {
	mustEmbedUnimplementedMeasureServiceServer()
}

func RegisterMeasureServiceServer(s grpc.ServiceRegistrar, srv MeasureServiceServer) {
	s.RegisterService(&MeasureService_ServiceDesc, srv)
}

func _MeasureService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.measure.v1.MeasureService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MeasureService_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MeasureServiceServer).Write(&measureServiceWriteServer{stream})
}

type MeasureService_WriteServer interface {
	Send(*WriteResponse) error
	Recv() (*WriteRequest, error)
	grpc.ServerStream
}

type measureServiceWriteServer struct {
	grpc.ServerStream
}

func (x *measureServiceWriteServer) Send(m *WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *measureServiceWriteServer) Recv() (*WriteRequest, error) {
	m := new(WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MeasureService_TopN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeasureServiceServer).TopN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.measure.v1.MeasureService/TopN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeasureServiceServer).TopN(ctx, req.(*TopNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MeasureService_ServiceDesc is the grpc.ServiceDesc for MeasureService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MeasureService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banyandb.measure.v1.MeasureService",
	HandlerType: (*MeasureServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _MeasureService_Query_Handler,
		},
		{
			MethodName: "TopN",
			Handler:    _MeasureService_TopN_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _MeasureService_Write_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "banyandb/measure/v1/rpc.proto",
}
