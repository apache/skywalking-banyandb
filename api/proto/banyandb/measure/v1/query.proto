// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

option java_package = "org.apache.skywalking.banyandb.measure.v1";
option go_package = "github.com/apache/skywalking-banyandb/api/proto/banyandb/measure/v1";

package banyandb.measure.v1;

import "google/protobuf/timestamp.proto";
import "banyandb/common/v1/common.proto";
import "banyandb/model/v1/common.proto";
import "banyandb/model/v1/query.proto";

// DataPoint is stored in Measures
message DataPoint {
  // timestamp is in the timeunit of nanoseconds.
  google.protobuf.Timestamp timestamp = 1;
  // tag_families contains tags selected in the projection
  repeated model.v1.TagFamily tag_families = 2;
  message Field {
    string name = 1;
    model.v1.FieldValue value = 2;
  }
  // fields contains fields selected in the projection
  repeated Field fields = 3;
}

// QueryResponse is the response for a query to the Query module.
message QueryResponse {
  // data_points are the actual data returned
  repeated DataPoint data_points = 1;
}

// QueryRequest is the request contract for query.
message QueryRequest {
  // metadata is required
  common.v1.Metadata metadata = 1;
  // time_range is a range query with begin/end time of entities in the timeunit of nanoseconds.
  model.v1.TimeRange time_range = 2;
  message Criteria {
    string tag_family_name = 1;
    repeated model.v1.Condition conditions = 2;
  }
  // criteria select the data points.
  repeated Criteria criteria = 4;
  // tag_projection can be used to select tags of the data points in the response
  model.v1.TagProjection tag_projection = 5;
  message FieldProjection {
    repeated string names = 1;
  }
  // field_projection can be used to select fields of the data points in the response
  FieldProjection field_projection = 6;
  message GroupBy {
    model.v1.TagProjection tag_projection = 1;
    string field_name = 2;
  }
  // group_by groups data points based on their field value for a specific tag and use field_name as the projection name
  GroupBy group_by = 7;
  message Aggregation {
    model.v1.AggregationFunction function = 1;
    string field_name = 2; 
  }
  // agg aggregates data points based on a field
  Aggregation agg = 8;
}
