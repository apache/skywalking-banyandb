// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

syntax = "proto3";

option java_package = "org.apache.skywalking.banyandb.measure.v1";
option go_package = "github.com/apache/skywalking-banyandb/api/proto/banyandb/measure/v1";

package banyandb.measure.v1;

import "google/protobuf/timestamp.proto";
import "banyandb/common/v1/common.proto";
import "banyandb/model/v1/common.proto";
import "banyandb/model/v1/query.proto";

//TopNList contains a series of topN items
message TopNList {
    // timestamp is in the timeunit of nanoseconds.
    google.protobuf.Timestamp timestamp = 1;
    message Item {
        string name = 1;
        model.v1.FieldValue value = 2;
    }
    // items contains top-n items in a list
    repeated Item items = 2;
}

// TopNResponse is the response for a query to the Query module.
message TopNResponse {
    // lists contain a series topN lists ranked by timestamp
    // if agg_func in query request is specified, lists' size should be one.
    repeated TopNList lists = 1;
}

enum AggregationFunction {
    AGGREGATION_FUNCTION_UNSPECIFIED = 0;
    AGGREGATION_FUNCTION_MEAN = 1;
}

// TopNRequest is the request contract for query.
message TopNRequest {
    // metadata is required
    common.v1.Metadata metadata = 1;
    // time_range is a range query with begin/end time of entities in the timeunit of nanoseconds.
    model.v1.TimeRange time_range = 2;
    // top_n set the how many items should be returned in each list.
    int32 top_n = 3;
    // agg aggregates lists grouped by field names in the time_range
    AggregationFunction agg = 4;
    // criteria select counters.
    repeated model.v1.Condition conditions = 5;
}
