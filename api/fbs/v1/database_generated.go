// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package v1

import (
	"strconv"

	flatbuffers "github.com/google/flatbuffers/go"
)

type Action int8

const (
	ActionPut    Action = 0
	ActionDelete Action = 1
)

var EnumNamesAction = map[Action]string{
	ActionPut:    "Put",
	ActionDelete: "Delete",
}

var EnumValuesAction = map[string]Action{
	"Put":    ActionPut,
	"Delete": ActionDelete,
}

func (v Action) String() string {
	if s, ok := EnumNamesAction[v]; ok {
		return s
	}
	return "Action(" + strconv.FormatInt(int64(v), 10) + ")"
}

type Node struct {
	_tab flatbuffers.Table
}

func GetRootAsNode(buf []byte, offset flatbuffers.UOffsetT) *Node {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Node{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsNode(buf []byte, offset flatbuffers.UOffsetT) *Node {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Node{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Node) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Node) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Node) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) Addr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Node) UpdateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Node) MutateUpdateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *Node) CreateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Node) MutateCreateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func NodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func NodeAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func NodeAddAddr(builder *flatbuffers.Builder, addr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(addr), 0)
}
func NodeAddUpdateTime(builder *flatbuffers.Builder, updateTime int64) {
	builder.PrependInt64Slot(2, updateTime, 0)
}
func NodeAddCreateTime(builder *flatbuffers.Builder, createTime int64) {
	builder.PrependInt64Slot(3, createTime, 0)
}
func NodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type Shard struct {
	_tab flatbuffers.Table
}

func GetRootAsShard(buf []byte, offset flatbuffers.UOffsetT) *Shard {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Shard{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsShard(buf []byte, offset flatbuffers.UOffsetT) *Shard {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Shard{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Shard) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Shard) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Shard) Id() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Shard) MutateId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *Shard) Series(obj *Metadata) *Metadata {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Metadata)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Shard) Node(obj *Node) *Node {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Node)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Shard) Total() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Shard) MutateTotal(n byte) bool {
	return rcv._tab.MutateByteSlot(10, n)
}

func (rcv *Shard) UpdateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Shard) MutateUpdateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *Shard) CreateTime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Shard) MutateCreateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(14, n)
}

func ShardStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func ShardAddId(builder *flatbuffers.Builder, id uint64) {
	builder.PrependUint64Slot(0, id, 0)
}
func ShardAddSeries(builder *flatbuffers.Builder, series flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(series), 0)
}
func ShardAddNode(builder *flatbuffers.Builder, node flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(node), 0)
}
func ShardAddTotal(builder *flatbuffers.Builder, total byte) {
	builder.PrependByteSlot(3, total, 0)
}
func ShardAddUpdateTime(builder *flatbuffers.Builder, updateTime int64) {
	builder.PrependInt64Slot(4, updateTime, 0)
}
func ShardAddCreateTime(builder *flatbuffers.Builder, createTime int64) {
	builder.PrependInt64Slot(5, createTime, 0)
}
func ShardEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type ShardEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsShardEvent(buf []byte, offset flatbuffers.UOffsetT) *ShardEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ShardEvent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsShardEvent(buf []byte, offset flatbuffers.UOffsetT) *ShardEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ShardEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ShardEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ShardEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ShardEvent) Shard(obj *Shard) *Shard {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Shard)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ShardEvent) Action() Action {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return Action(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ShardEvent) MutateAction(n Action) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *ShardEvent) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ShardEvent) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func ShardEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func ShardEventAddShard(builder *flatbuffers.Builder, shard flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(shard), 0)
}
func ShardEventAddAction(builder *flatbuffers.Builder, action Action) {
	builder.PrependInt8Slot(1, int8(action), 0)
}
func ShardEventAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(2, time, 0)
}
func ShardEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type SeriesEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsSeriesEvent(buf []byte, offset flatbuffers.UOffsetT) *SeriesEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SeriesEvent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSeriesEvent(buf []byte, offset flatbuffers.UOffsetT) *SeriesEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SeriesEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SeriesEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SeriesEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SeriesEvent) Series(obj *Metadata) *Metadata {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Metadata)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SeriesEvent) FieldNamesCompositeSeriesId(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SeriesEvent) FieldNamesCompositeSeriesIdLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SeriesEvent) Action() Action {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return Action(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SeriesEvent) MutateAction(n Action) bool {
	return rcv._tab.MutateInt8Slot(8, int8(n))
}

func (rcv *SeriesEvent) Time() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SeriesEvent) MutateTime(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func SeriesEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SeriesEventAddSeries(builder *flatbuffers.Builder, series flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(series), 0)
}
func SeriesEventAddFieldNamesCompositeSeriesId(builder *flatbuffers.Builder, fieldNamesCompositeSeriesId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(fieldNamesCompositeSeriesId), 0)
}
func SeriesEventStartFieldNamesCompositeSeriesIdVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SeriesEventAddAction(builder *flatbuffers.Builder, action Action) {
	builder.PrependInt8Slot(2, int8(action), 0)
}
func SeriesEventAddTime(builder *flatbuffers.Builder, time int64) {
	builder.PrependInt64Slot(3, time, 0)
}
func SeriesEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

type Metadata struct {
	_tab flatbuffers.Table
}

func GetRootAsMetadata(buf []byte, offset flatbuffers.UOffsetT) *Metadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Metadata{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMetadata(buf []byte, offset flatbuffers.UOffsetT) *Metadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Metadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Metadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Metadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Metadata) Group() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Metadata) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func MetadataAddGroup(builder *flatbuffers.Builder, group flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(group), 0)
}
func MetadataAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func MetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
