//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: rpc

package v1

import (
	context "context"

	flatbuffers "github.com/google/flatbuffers/go"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Client API for Trace service
type TraceClient interface {
	Query(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*QueryResponse, error)
	Write(ctx context.Context,
		opts ...grpc.CallOption) (Trace_WriteClient, error)
}

type traceClient struct {
	cc grpc.ClientConnInterface
}

func NewTraceClient(cc grpc.ClientConnInterface) TraceClient {
	return &traceClient{cc}
}

func (c *traceClient) Query(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/banyandb.v1.Trace/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *traceClient) Write(ctx context.Context,
	opts ...grpc.CallOption) (Trace_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Trace_serviceDesc.Streams[0], "/banyandb.v1.Trace/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &traceWriteClient{stream}
	return x, nil
}

type Trace_WriteClient interface {
	Send(*flatbuffers.Builder) error
	Recv() (*WriteResponse, error)
	grpc.ClientStream
}

type traceWriteClient struct {
	grpc.ClientStream
}

func (x *traceWriteClient) Send(m *flatbuffers.Builder) error {
	return x.ClientStream.SendMsg(m)
}

func (x *traceWriteClient) Recv() (*WriteResponse, error) {
	m := new(WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Trace service
type TraceServer interface {
	Query(context.Context, *EntityCriteria) (*flatbuffers.Builder, error)
	Write(Trace_WriteServer) error
	mustEmbedUnimplementedTraceServer()
}

type UnimplementedTraceServer struct {
}

func (UnimplementedTraceServer) Query(context.Context, *EntityCriteria) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}

func (UnimplementedTraceServer) Write(Trace_WriteServer) error {
	return status.Errorf(codes.Unimplemented, "method Write not implemented")
}

func (UnimplementedTraceServer) mustEmbedUnimplementedTraceServer() {}

type UnsafeTraceServer interface {
	mustEmbedUnimplementedTraceServer()
}

func RegisterTraceServer(s grpc.ServiceRegistrar, srv TraceServer) {
	s.RegisterService(&_Trace_serviceDesc, srv)
}

func _Trace_Query_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityCriteria)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TraceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.v1.Trace/Query",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TraceServer).Query(ctx, req.(*EntityCriteria))
	}
	return interceptor(ctx, in, info, handler)
}
func _Trace_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TraceServer).Write(&traceWriteServer{stream})
}

type Trace_WriteServer interface {
	Send(*flatbuffers.Builder) error
	Recv() (*WriteEntity, error)
	grpc.ServerStream
}

type traceWriteServer struct {
	grpc.ServerStream
}

func (x *traceWriteServer) Send(m *flatbuffers.Builder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *traceWriteServer) Recv() (*WriteEntity, error) {
	m := new(WriteEntity)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Trace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "banyandb.v1.Trace",
	HandlerType: (*TraceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Trace_Query_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _Trace_Write_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
