// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

include "database.fbs";

namespace banyandb.v1;

table ShardInfo {
    number:uint;
    routing_fields:[string];
}

enum DurationUint:byte { Hour = 0, Day = 1, Week = 2, Month = 3 }

// Duration represents the elapsed time between two instants
struct Duration {
    val:uint;
    unit:DurationUint;
}

enum FieldType:byte { String = 0, Int = 1, StringArray = 2, IntArray = 3 }

table FieldSpec {
    name:string;
    type:FieldType;
}

table TraceStateMap {
    field:string;
    val_success:string;
    val_error:string;
}

// The key in TraceFieldMap are reserved by trace series engine. Their corresponding value is the Fields or 
// the combination of Fields
table TraceFieldMap {
    // trace_id the unique identity of a single trace
    trace_id:string;
    // series_id groups entities into a storage bucket
    series_id:[string];
    // state indicates the trace is "success" or "error"
    state:TraceStateMap;
}

// TraceSeries represents a trace storage object
table TraceSeries {
    // metadata is the identity of a trace series
    metadata:Metadata;
    // fields defines accepted fields
    fields:[FieldSpec];
    // reserved_fields_map indicates how to index reserved fields to ingested fields
    reserved_fields_map:TraceFieldMap;
    // shard indicates how trace data distributes
    shard:ShardInfo;
    // duration determines how long a TraceSeries keeps its data
    duration:Duration;
    // updated_at_nanoseconds indicates when the TraceSeries is updated
    updated_at_nanoseconds:uint64;
}

// Catalog refers to a placement contains objects belonged to a particular data type
enum Catalog:byte { Trace = 0, Log = 1, Metric = 2 }

// IndexType determine the index structure under the hood
// Fields with SeriesInternal type is reserved by Series module, would not be indexed by Index module.
enum IndexType:byte { Text = 0, Numerical = 1, ID = 2, MultiText = 3, MultiNumerical = 4, SeriesInternal = 5 }

// IndexObject defines who should be indexed.
table IndexObject {
    // name is the identity of a IndexObject
    name:string;
    // fields are the combination that refers to an indexed object
    // If the elements in fields are more than 1, the object will generate a multi-field index
    // Caveat: All fields in a multi-field index MUST have an identical IndexType
    fields:[string];
    // type is the IndexType of this IndexObject.
    type:IndexType;
}

// IndexRule defines how to generate indices based on IndexObject
// IndexRule should bind to an Series through an IndexRuleBinding to generate proper indices.
// Example: A trace entity wants to index fields: trace_id, service_name, endpoint_name, and latency.
//          and service_name and endpoint_name would combine a multi-field index.
// The index rule could be:
// IndexRule {
//     metadata: {
//         name: sw_trace
//         group: production
//     }
//     objects: [
//        { 
//            fields: [trace_id]
//            type: ID
//        },
//        { 
//            fields: [service_name, endpoint_name]
//            type: Text
//        },
//        { 
//            fields: [latency]
//            type: Numerical
//        },
//    ]
//    updated_at_nanoseconds: .......
// } 
table IndexRule {
    // metadata define the rule's identity
    metadata:Metadata;
    // objects refer to which fields should be indexed
    objects:[IndexObject];
    // updated_at_nanoseconds indicates when the IndexRule is updated
    updated_at_nanoseconds:uint64;
}

// Series defines which subject(series) would generate indices
// For example, if a TraceSeries's metadata is {name: sw_trace, group: production},
//                in consequence, the Series is
//                series {
//                    catalog: Trace
//                    series: {name: sw_trace, group: production}
//                }
table Series {
    // catalog is where the subject/series belongs to
    catalog:Catalog;
    // series refers to a series in a particular catalog
    series:Metadata;
}

// IndexRuleBinding is a bridge to connect an IndexRule to several Series
// This binding is valid between begin_at_nanoseconds and expire_at_nanoseconds, that provides flexible strategies
// to control how to generate time series indices.
table IndexRuleBinding {
    // metadata is the identity of this binding
    metadata:Metadata;
    // rule_ref refers to the IndexRule
    rule_ref:Metadata;
    // subjects indicate the subjects of binding action
    subjects:[Series];
    // begin_at_nanoseconds is the timestamp, after which the binding will be active
    begin_at_nanoseconds:uint64;
    // expire_at_nanoseconds it the timestamp, after which the binding will be inactive
    // expire_at_nanoseconds must be larger than begin_at_nanoseconds
    expire_at_nanoseconds:uint64;
    // updated_at_nanoseconds indicates when the IndexRuleBinding is updated
    updated_at_nanoseconds:uint64;
}

root_type TraceSeries;
root_type IndexRule;
root_type IndexRuleBinding;
