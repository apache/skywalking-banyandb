//
// Licensed to Apache Software Foundation (ASF) under one or more contributor
// license agreements. See the NOTICE file distributed with
// this work for additional information regarding copyright
// ownership. Apache Software Foundation (ASF) licenses this file to you under
// the Apache License, Version 2.0 (the "License"); you may
// not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: rpc

package v1

import (
	context "context"

	flatbuffers "github.com/google/flatbuffers/go"
	grpc "google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Client API for Query service
type QueryClient interface {
	QueryTraces(ctx context.Context, in *flatbuffers.Builder,
		opts ...grpc.CallOption) (*TracesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) QueryTraces(ctx context.Context, in *flatbuffers.Builder,
	opts ...grpc.CallOption) (*TracesResponse, error) {
	out := new(TracesResponse)
	err := c.cc.Invoke(ctx, "/banyandb.v1.Query/QueryTraces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Query service
type QueryServer interface {
	QueryTraces(context.Context, *EntityCriteria) (*flatbuffers.Builder, error)
	mustEmbedUnimplementedQueryServer()
}

type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) QueryTraces(context.Context, *EntityCriteria) (*flatbuffers.Builder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTraces not implemented")
}

func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_QueryTraces_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityCriteria)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/banyandb.v1.Query/QueryTraces",
	}

	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryTraces(ctx, req.(*EntityCriteria))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "banyandb.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryTraces",
			Handler:    _Query_QueryTraces_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
